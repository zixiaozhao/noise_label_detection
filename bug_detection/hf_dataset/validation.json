[
  {
    "project": "Collections",
    "bug_id": "23",
    "file": "org/apache/commons/collections4/trie/UnmodifiableTrie.java",
    "snippet": "    /**\n     * Factory method to create a unmodifiable trie.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param trie  the trie to decorate, must not be null\n     * @return a new unmodifiable trie\n     * @throws IllegalArgumentException if trie is null\n     */\n    public static <K, V> UnmodifiableTrie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie) {\n        return new UnmodifiableTrie<K, V>(trie);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n",
    "label": "buggy",
    "id": "a516a2b9-0a7d-41c9-84f6-76260c37961d"
  },
  {
    "project": "Math",
    "bug_id": "31",
    "file": "org/apache/commons/math3/util/ContinuedFraction.java",
    "snippet": "    /**\n     * <p>\n     * Evaluates the continued fraction at the value x.\n     * </p>\n     *\n     * <p>\n     * The implementation of this method is based on the modified Lentz algorithm as described\n     * on page 18 ff. in:\n     * <ul>\n     * <li>\n     *   I. J. Thompson,  A. R. Barnett. \"Coulomb and Bessel Functions of Complex Arguments and Order.\"\n     *   <a target=\"_blank\" href=\"http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf\">\n     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>\n     * </li>\n     * </ul>\n     * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in\n     * <a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">Continued Fraction / MathWorld</a>.\n     * </p>\n     *\n     * @param x the evaluation point.\n     * @param epsilon maximum error allowed.\n     * @param maxIterations maximum number of convergents\n     * @return the value of the continued fraction evaluated at x.\n     * @throws ConvergenceException if the algorithm fails to converge.\n     */\n    public double evaluate(double x, double epsilon, int maxIterations) {\n        final double small = 1e-50;\n        double hPrev = getA(0, x);\n\n        // use the value of small as epsilon criteria for zero checks\n        if (Precision.equals(hPrev, 0.0, small)) {\n            hPrev = small;\n        }\n\n        int n = 1;\n        double dPrev = 0.0;\n        double p0 = 1.0;\n        double q1 = 1.0;\n        double cPrev = hPrev;\n        double hN = hPrev;\n\n        while (n < maxIterations) {\n",
    "label": "buggy",
    "id": "2d2e2ba5-0597-42a0-aab3-1fde81fbc6f5"
  },
  {
    "project": "JacksonCore",
    "bug_id": "10",
    "file": "com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
    "snippet": "    /**********************************************************\n     */\n\n    public String addName(String name, int q1) {\n        _verifySharing();\n        if (_intern) {\n            name = InternCache.instance.intern(name);\n        }\n        int offset = _findOffsetForAdd(calcHash(q1));\n        _hashArea[offset] = q1;\n        _hashArea[offset+3] = 1;\n        _names[offset >> 2] = name;\n        ++_count;\n        _verifyNeedForRehash();\n        return name;\n    }\n\n    public String addName(String name, int q1, int q2) {\n        _verifySharing();\n        if (_intern) {\n            name = InternCache.instance.intern(name);\n        }\n        int hash = (q2 == 0) ? calcHash(q1) : calcHash(q1, q2);\n        int offset = _findOffsetForAdd(hash);\n        _hashArea[offset] = q1;\n        _hashArea[offset+1] = q2;\n        _hashArea[offset+3] = 2;\n        _names[offset >> 2] = name;\n        ++_count;\n        _verifyNeedForRehash();\n        return name;\n    }\n\n    public String addName(String name, int q1, int q2, int q3) {\n        _verifySharing();\n        if (_intern) {\n            name = InternCache.instance.intern(name);\n        }\n        int offset = _findOffsetForAdd(calcHash(q1, q2, q3));\n        _hashArea[offset] = q1;\n        _hashArea[offset+1] = q2;\n        _hashArea[offset+2] = q3;\n        _hashArea[offset+3] = 3;\n        _names[offset >> 2] = name;\n        ++_count;\n        _verifyNeedForRehash();\n        return name;\n    }\n\n    public String addName(String name, int[] q, int qlen)\n    {\n        _verifySharing();\n        if (_intern) {\n            name = InternCache.instance.intern(name);\n        }\n        int offset;\n        \n        switch (qlen) {\n        case 1:\n        {\n                offset = _findOffsetForAdd(calcHash(q[0]));\n                _hashArea[offset] = q[0];\n                _hashArea[offset+3] = 1;\n            }\n            break;\n        case 2:\n            {\n                offset = _findOffsetForAdd(calcHash(q[0], q[1]));\n                _hashArea[offset] = q[0];\n                _hashArea[offset+1] = q[1];\n                _hashArea[offset+3] = 2;\n            }\n            break;\n        case 3:\n            {\n                offset = _findOffsetForAdd(calcHash(q[0], q[1], q[2]));\n                _hashArea[offset] = q[0];\n                _hashArea[offset+1] = q[1];\n                _hashArea[offset+2] = q[2];\n                _hashArea[offset+3] = 3;\n            }\n            break;\n        default:\n            final int hash = calcHash(q, qlen);\n            offset = _findOffsetForAdd(hash);\n\n            _hashArea[offset] = hash;\n            int longStart = _appendLongName(q, qlen);\n            _hashArea[offset+1] = longStart;\n            _hashArea[offset+3] = qlen;\n        }\n        // plus add the actual String\n        _names[offset >> 2] = name;\n\n        // and finally; see if we really should rehash.\n        ++_count;\n        _verifyNeedForRehash();\n        return name;\n    }\n\n    private void _verifyNeedForRehash() {\n        // Yes if above 80%, or above 50% AND have ~1% spill-overs\n        if (_count > (_hashSize >> 1)) { // over 50%\n            int spillCount = (_spilloverEnd - _spilloverStart()) >> 2;\n            if ((spillCount > (1 + _count >> 7))\n                    || (_count > (_hashSize * 0.80))) {\n                _needRehash = true;\n            }\n        }\n    }\n\n    private void _verifySharing()\n    {\n        if (_hashShared) {\n            _hashArea = Arrays.copyOf(_hashArea, _hashArea.length);\n            _names = Arrays.copyOf(_names, _names.length);\n            _hashShared = false;\n        }\n        if (_needRehash) {\n            rehash();\n        }\n    }\n    \n    /**\n     * Method called to find the location within hash table to add a new symbol in.\n     */\n    private int _findOffsetForAdd(int hash)\n    {\n        // first, check the primary:\n        int offset = _calcOffset(hash);\n        final int[] hashArea = _hashArea;\n        if (hashArea[offset+3] == 0) {\n//System.err.printf(\" PRImary slot #%d, hash %X\\n\", (offset>>2), hash & 0x7F);\n            return offset;\n        }\n        // then secondary\n        int offset2 = _secondaryStart + ((offset >> 3) << 2);\n        if (hashArea[offset2+3] == 0) {\n//System.err.printf(\" SECondary slot #%d (start x%X), hash %X\\n\",(offset >> 3), _secondaryStart, (hash & 0x7F));\n            return offset2;\n        }\n        // if not, tertiary?\n\n        offset2 = _tertiaryStart + ((offset >> (_tertiaryShift + 2)) << _tertiaryShift);\n        final int bucketSize = (1 << _tertiaryShift);\n        for (int end = offset2 + bucketSize; offset2 < end; offset2 += 4) {\n            if (hashArea[offset2+3] == 0) {\n//System.err.printf(\" TERtiary slot x%X (from x%X, start x%X), hash %X.\\n\", offset2, ((offset >> (_tertiaryShift + 2)) << _tertiaryShift), _tertiaryStart, (hash & 0x7F));\n                return offset2;\n            }\n        }\n\n        // and if even tertiary full, append at the end of spill area\n        offset = _spilloverEnd;\n        _spilloverEnd += 4;\n\n//System.err.printf(\" SPIll-over at x%X; start x%X; end x%X, hash %X\\n\", offset, _spilloverStart(), _hashArea.length, (hash & 0x7F));\n        \n        // one caveat: in the unlikely event if spill-over filling up,\n        // check if that could be considered a DoS attack; handle appropriately\n        // (NOTE: approximate for now; we could verify details if that becomes necessary)\n        /* 31-Jul-2015, tatu: Note that spillover area does NOT end at end of array,\n         *   since \"long names\" area follows. Instead, need to calculate from hash size.\n         */\n        final int end = (_hashSize << 3);\n        if (_spilloverEnd >= end) {\n            if (_failOnDoS) {\n                _reportTooManyCollisions();\n            }\n            // and if we didn't fail, we'll simply force rehash for next add\n",
    "label": "clean",
    "id": "8cd1bb5d-238c-4408-a8a2-4cec57881234"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "72",
    "file": "com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java",
    "snippet": "    /**\n     * Constructor used with JDK Serialization; needed to handle transient\n     * Constructor, wrap/unwrap in/out-of Annotated variant.\n     */\n    protected InnerClassProperty(InnerClassProperty src, AnnotatedConstructor ann)\n    {\n        super(src);\n        _delegate = src._delegate;\n        _annotated = ann;\n        _creator = (_annotated == null) ? null : _annotated.getAnnotated();\n        if (_creator == null) {\n            throw new IllegalArgumentException(\"Missing constructor (broken JDK (de)serialization?)\");\n        }\n    }\n    \n    protected InnerClassProperty(InnerClassProperty src, JsonDeserializer<?> deser)\n    {\n        super(src, deser);\n        _delegate = src._delegate.withValueDeserializer(deser);\n        _creator = src._creator;\n    }\n\n    protected InnerClassProperty(InnerClassProperty src, PropertyName newName) {\n        super(src, newName);\n        _delegate = src._delegate.withName(newName);\n        _creator = src._creator;\n    }\n\n    @Override\n    public InnerClassProperty withName(PropertyName newName) {\n        return new InnerClassProperty(this, newName);\n    }\n\n    @Override\n    public InnerClassProperty withValueDeserializer(JsonDeserializer<?> deser) {\n        return new InnerClassProperty(this, deser);\n    }\n\n    @Override\n    public void assignIndex(int index) { _delegate.assignIndex(index); }\n\n    @Override\n    public int getPropertyIndex() { return _delegate.getPropertyIndex(); }\n\n    @Override\n    public int getCreatorIndex() { return _delegate.getCreatorIndex(); }\n    \n    // // // BeanProperty impl\n    \n    @Override\n",
    "label": "clean",
    "id": "fbc8de3c-ea36-49fb-a8a5-c01f63cacc47"
  },
  {
    "project": "Time",
    "bug_id": "16",
    "file": "org/joda/time/format/DateTimeFormatter.java",
    "snippet": "    /**\n     * Parses a datetime from the given text, at the given position, saving the\n     * result into the fields of the given ReadWritableInstant. If the parse\n     * succeeds, the return value is the new text position. Note that the parse\n     * may succeed without fully reading the text and in this case those fields\n     * that were read will be set.\n     * <p>\n     * Only those fields present in the string will be changed in the specified\n     * instant. All other fields will remain unaltered. Thus if the string only\n     * contains a year and a month, then the day and time will be retained from\n     * the input instant. If this is not the behaviour you want, then reset the\n     * fields before calling this method, or use {@link #parseDateTime(String)}\n     * or {@link #parseMutableDateTime(String)}.\n     * <p>\n     * If it fails, the return value is negative, but the instant may still be\n     * modified. To determine the position where the parse failed, apply the\n     * one's complement operator (~) on the return value.\n     * <p>\n     * This parse method ignores the {@link #getDefaultYear() default year} and\n     * parses using the year from the supplied instant as the default.\n     * <p>\n     * The parse will use the chronology of the instant.\n     *\n     * @param instant  an instant that will be modified, not null\n     * @param text  the text to parse\n     * @param position  position to start parsing from\n     * @return new position, negative value means parse failed -\n     *  apply complement operator (~) to get position of failure\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the instant is null\n     * @throws IllegalArgumentException if any field is out of range\n     */\n    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n",
    "label": "buggy",
    "id": "c78df046-3f11-4c00-bce4-c6e57823ac50"
  },
  {
    "project": "Compress",
    "bug_id": "30",
    "file": "org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
    "snippet": "/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*\n * This package is based on the work done by Keiron Liddle, Aftex Software\n * <keiron@aftexsw.com> to whom the Ant project is very grateful for his\n * great code.\n */\npackage org.apache.commons.compress.compressors.bzip2;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport org.apache.commons.compress.compressors.CompressorInputStream;\n\n/**\n * An input stream that decompresses from the BZip2 format to be read as any other stream.\n * \n * @NotThreadSafe\n */\npublic class BZip2CompressorInputStream extends CompressorInputStream implements\n                                                                          BZip2Constants {\n\n    /**\n     * Index of the last char in the block, so the block size == last + 1.\n     */\n    private int last;\n\n    /**\n     * Index in zptr[] of original string after sorting.\n     */\n    private int origPtr;\n\n    /**\n     * always: in the range 0 .. 9. The current block size is 100000 * this\n     * number.\n     */\n    private int blockSize100k;\n\n    private boolean blockRandomised;\n\n    private int bsBuff;\n    private int bsLive;\n    private final CRC crc = new CRC();\n\n    private int nInUse;\n\n    private InputStream in;\n    private final boolean decompressConcatenated;\n\n    private static final int EOF = 0;\n    private static final int START_BLOCK_STATE = 1;\n    private static final int RAND_PART_A_STATE = 2;\n    private static final int RAND_PART_B_STATE = 3;\n    private static final int RAND_PART_C_STATE = 4;\n    private static final int NO_RAND_PART_A_STATE = 5;\n    private static final int NO_RAND_PART_B_STATE = 6;\n    private static final int NO_RAND_PART_C_STATE = 7;\n\n    private int currentState = START_BLOCK_STATE;\n\n    private int storedBlockCRC, storedCombinedCRC;\n    private int computedBlockCRC, computedCombinedCRC;\n\n    // Variables used by setup* methods exclusively\n\n    private int su_count;\n    private int su_ch2;\n    private int su_chPrev;\n    private int su_i2;\n    private int su_j2;\n    private int su_rNToGo;\n    private int su_rTPos;\n    private int su_tPos;\n    private char su_z;\n\n    /**\n     * All memory intensive stuff. This field is initialized by initBlock().\n     */\n    private BZip2CompressorInputStream.Data data;\n\n    /**\n     * Constructs a new BZip2CompressorInputStream which decompresses bytes\n     * read from the specified stream. This doesn't suppprt decompressing\n     * concatenated .bz2 files.\n     * \n     * @throws IOException\n     *             if the stream content is malformed or an I/O error occurs.\n     * @throws NullPointerException\n     *             if {@code in == null}\n     */\n    public BZip2CompressorInputStream(final InputStream in) throws IOException {\n        this(in, false);\n    }\n\n    /**\n     * Constructs a new BZip2CompressorInputStream which decompresses bytes\n     * read from the specified stream.\n     *\n     * @param in the InputStream from which this object should be created\n     * @param decompressConcatenated\n     *                     if true, decompress until the end of the input;\n     *                     if false, stop after the first .bz2 stream and\n     *                     leave the input position to point to the next\n     *                     byte after the .bz2 stream\n     *\n     * @throws IOException\n     *             if the stream content is malformed or an I/O error occurs.\n     * @throws NullPointerException\n     *             if {@code in == null}\n     */\n    public BZip2CompressorInputStream(final InputStream in, final boolean decompressConcatenated) throws IOException {\n        this.in = in;\n        this.decompressConcatenated = decompressConcatenated;\n\n        init(true);\n        initBlock();\n    }\n\n    @Override\n    public int read() throws IOException {\n        if (this.in != null) {\n            int r = read0();\n            count(r < 0 ? -1 : 1);\n            return r;\n        } else {\n            throw new IOException(\"stream closed\");\n        }\n    }\n\n    /*\n     * (non-Javadoc)\n     * \n     * @see java.io.InputStream#read(byte[], int, int)\n     */\n    @Override\n    public int read(final byte[] dest, final int offs, final int len)\n        throws IOException {\n        if (offs < 0) {\n            throw new IndexOutOfBoundsException(\"offs(\" + offs + \") < 0.\");\n        }\n        if (len < 0) {\n            throw new IndexOutOfBoundsException(\"len(\" + len + \") < 0.\");\n        }\n        if (offs + len > dest.length) {\n            throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n                                                + len + \") > dest.length(\" + dest.length + \").\");\n        }\n        if (this.in == null) {\n            throw new IOException(\"stream closed\");\n        }\n\n        final int hi = offs + len;\n        int destOffs = offs;\n        int b;\n        while (destOffs < hi && ((b = read0()) >= 0)) {\n",
    "label": "buggy",
    "id": "ae5a33ac-efd4-49c7-8e7e-d11862c29348"
  },
  {
    "project": "Codec",
    "bug_id": "4",
    "file": "org/apache/commons/codec/binary/Base64.java",
    "snippet": "    /**\n     * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.\n     * <p>\n     * When encoding the line length is 0 (no chunking), and the encoding table is STANDARD_ENCODE_TABLE.\n     * </p>\n     * \n     * <p>\n     * When decoding all variants are supported.\n     * </p>\n     */\n    public Base64() {\n        this(0);\n    }\n\n    /**\n     * Creates a Base64 codec used for decoding (all modes) and encoding in the given URL-safe mode.\n     * <p>\n",
    "label": "clean",
    "id": "20a1bcf6-763c-492f-957b-bd3900d1aea2"
  },
  {
    "project": "Collections",
    "bug_id": "23",
    "file": "org/apache/commons/collections4/trie/UnmodifiableTrie.java",
    "snippet": "    /**\n     * Factory method to create a unmodifiable trie.\n     *\n     * @param <K>  the key type\n     * @param <V>  the value type\n     * @param trie  the trie to decorate, must not be null\n     * @return a new unmodifiable trie\n     * @throws IllegalArgumentException if trie is null\n     */\n    public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie) {\n        if (trie instanceof Unmodifiable) {\n            @SuppressWarnings(\"unchecked\") // safe to upcast\n            final Trie<K, V> tmpTrie = (Trie<K, V>) trie;\n            return tmpTrie;\n        }\n",
    "label": "clean",
    "id": "224a922b-da63-4443-9f1a-bd762fd38ac8"
  },
  {
    "project": "Lang",
    "bug_id": "61",
    "file": "org/apache/commons/lang/text/StrBuilder.java",
    "snippet": "    /**\n     * Searches the string builder to find the first reference to the specified\n     * string starting searching from the given index.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the string, or -1 if not found\n     */\n    public int indexOf(String str, int startIndex) {\n        startIndex = (startIndex < 0 ? 0 : startIndex);\n        if (str == null || startIndex >= size) {\n            return -1;\n        }\n        int strLen = str.length();\n        if (strLen == 1) {\n            return indexOf(str.charAt(0), startIndex);\n        }\n        if (strLen == 0) {\n            return startIndex;\n        }\n        if (strLen > size) {\n            return -1;\n        }\n        char[] thisBuf = buffer;\n        int len = size - strLen + 1;\n        outer:\n        for (int i = startIndex; i < len; i++) {\n            for (int j = 0; j < strLen; j++) {\n                if (str.charAt(j) != thisBuf[i + j]) {\n                    continue outer;\n",
    "label": "clean",
    "id": "9cfbaab8-ac09-4757-8703-46a61977863d"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "43",
    "file": "com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java",
    "snippet": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.lang.annotation.Annotation;\n\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.*;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n\n/**\n",
    "label": "clean",
    "id": "bec7ff4c-9a01-4bf5-ac29-a064c60e802a"
  },
  {
    "project": "Mockito",
    "bug_id": "22",
    "file": "org/mockito/internal/matchers/Equality.java",
    "snippet": "    public static boolean areEqual(Object o1, Object o2) {\n        if (o1 == null || o2 == null) {\n            return o1 == null && o2 == null;\n        } else if (isArray(o1)) {\n            return isArray(o2) && areArraysEqual(o1, o2);\n        } else {\n            return o1.equals(o2);\n",
    "label": "buggy",
    "id": "ec332324-046e-4a26-9dda-852a045951d8"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "105",
    "file": "com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
    "snippet": "package com.fasterxml.jackson.databind.deser.std;\n\nimport java.nio.ByteBuffer;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\nimport com.fasterxml.jackson.databind.*;\n\n/**\n * Container class that contains serializers for JDK types that\n * require special handling for some reason.\n */\npublic class JdkDeserializers\n{\n    private final static HashSet<String> _classNames = new HashSet<String>();\n    static {\n        // note: can skip primitive types; other ways to check them:\n        Class<?>[] types = new Class<?>[] {\n                UUID.class,\n                AtomicBoolean.class,\n                StackTraceElement.class,\n                ByteBuffer.class\n        };\n        for (Class<?> cls : types) { _classNames.add(cls.getName()); }\n        for (Class<?> cls : FromStringDeserializer.types()) { _classNames.add(cls.getName()); }\n    }\n\n",
    "label": "buggy",
    "id": "ee11a04a-52bd-4af0-8aee-91a631bbdb76"
  },
  {
    "project": "Closure",
    "bug_id": "23",
    "file": "com/google/javascript/jscomp/PeepholeFoldConstants.java",
    "snippet": "  /**\n   * Try to fold array-length. e.g [1, 2, 3].length ==> 3, [x, y].length ==> 2\n   */\n  private Node tryFoldGetProp(Node n, Node left, Node right) {\n    Preconditions.checkArgument(n.isGetProp());\n\n    if (left.isObjectLit()) {\n      return tryFoldObjectPropAccess(n, left, right);\n    }\n\n    if (right.isString() &&\n        right.getString().equals(\"length\")) {\n      int knownLength = -1;\n      switch (left.getType()) {\n        case Token.ARRAYLIT:\n          if (mayHaveSideEffects(left)) {\n            // Nope, can't fold this, without handling the side-effects.\n            return n;\n          }\n          knownLength = left.getChildCount();\n          break;\n        case Token.STRING:\n          knownLength = left.getString().length();\n          break;\n        default:\n          // Not a foldable case, forget it.\n          return n;\n      }\n\n      Preconditions.checkState(knownLength != -1);\n      Node lengthNode = IR.number(knownLength);\n      n.getParent().replaceChild(n, lengthNode);\n      reportCodeChange();\n\n      return lengthNode;\n    }\n\n    return n;\n  }\n\n  private boolean isAssignmentTarget(Node n) {\n    Node parent = n.getParent();\n    if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)\n        || parent.isInc()\n        || parent.isDec()) {\n      // If GETPROP/GETELEM is used as assignment target the object literal is\n      // acting as a temporary we can't fold it here:\n      //    \"{a:x}.a += 1\" is not \"x += 1\"\n      return true;\n    }\n    return false;\n  }\n\n  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null; i++) {\n      if (i != intIndex) {\n        if (mayHaveSideEffects(current)) {\n          return n;\n        }\n      } else {\n",
    "label": "clean",
    "id": "64970dda-6750-48a1-acf7-4c24a58ca3ab"
  },
  {
    "project": "Cli",
    "bug_id": "5",
    "file": "org/apache/commons/cli/Util.java",
    "snippet": "/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.cli;\n\n/**\n * Contains useful helper methods for classes within this package.\n *\n * @author John Keyes (john at integralsource.com)\n */\nclass Util {\n\n    /**\n     * <p>Remove the hyphens from the begining of <code>str</code> and\n     * return the new String.</p>\n     *\n     * @param str The string from which the hyphens should be removed.\n     *\n     * @return the new String.\n     */\n    static String stripLeadingHyphens(String str)\n    {\n        if (str.startsWith(\"--\"))\n        {\n            return str.substring(2, str.length());\n        }\n        else if (str.startsWith(\"-\"))\n",
    "label": "buggy",
    "id": "31127f89-03fa-4399-a550-2a9bbe46ffb0"
  },
  {
    "project": "Closure",
    "bug_id": "176",
    "file": "com/google/javascript/jscomp/TypeInference.java",
    "snippet": "  /**\n   * Any value can be thrown, so it's really impossible to determine the type\n   * of a CATCH param. Treat it as the UNKNOWN type.\n   */\n  private FlowScope traverseCatch(Node catchNode, FlowScope scope) {\n    Node name = catchNode.getFirstChild();\n    JSType type;\n    // If the catch expression name was declared in the catch use that type,\n    // otherwise use \"unknown\".\n    JSDocInfo info = name.getJSDocInfo();\n    if (info != null && info.hasType()) {\n      type = info.getType().evaluate(syntacticScope, registry);\n    } else {\n      type = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    redeclareSimpleVar(scope, name, type);\n    name.setJSType(type);\n    return scope;\n  }\n\n  private FlowScope traverseAssign(Node n, FlowScope scope) {\n    Node left = n.getFirstChild();\n    Node right = n.getLastChild();\n    scope = traverseChildren(n, scope);\n\n    JSType leftType = left.getJSType();\n    JSType rightType = getJSType(right);\n    n.setJSType(rightType);\n\n    updateScopeForTypeChange(scope, left, leftType, rightType);\n    return scope;\n  }\n\n  /**\n   * Updates the scope according to the result of a type change, like\n   * an assignment or a type cast.\n   */\n  private void updateScopeForTypeChange(\n      FlowScope scope, Node left, JSType leftType, JSType resultType) {\n    Preconditions.checkNotNull(resultType);\n    switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n        boolean isVarDeclaration = left.hasChildren();\n\n        // When looking at VAR initializers for declared VARs, we tend\n        // to use the declared type over the type it's being\n        // initialized to in the global scope.\n        //\n",
    "label": "buggy",
    "id": "71123c8c-4572-4400-a2a3-87bce31b4823"
  },
  {
    "project": "Compress",
    "bug_id": "6",
    "file": "org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java",
    "snippet": "    /**\n     * Creates a new zip entry with the specified name.\n     * @param name the name of the entry\n     */\n    public ZipArchiveEntry(String name) {\n        super(name);\n        setName(name);\n    }\n\n    /**\n     * Creates a new zip entry with fields taken from the specified zip entry.\n     * @param entry the entry to get fields from\n",
    "label": "clean",
    "id": "3793384f-c1f1-4e75-94c9-fca014faa795"
  },
  {
    "project": "Lang",
    "bug_id": "37",
    "file": "org/apache/commons/lang3/ArrayUtils.java",
    "snippet": "    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(null, null)     = null\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * ArrayUtils.addAll([null], [null]) = [null, null]\n     * ArrayUtils.addAll([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) = [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"]\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>\n     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>\n     * @return The new array, <code>null</code> if both arrays are <code>null</code>.\n     *      The type of the new array is the type of the first array,\n     *      unless the first array is null, in which case the type is the same as the second array.\n     * @since 2.1\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T[] addAll(T[] array1, T... array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n        final Class<?> type1 = array1.getClass().getComponentType();\n        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        try {\n            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        } catch (ArrayStoreException ase) {\n            // Check if problem is incompatible types\n            final Class<?> type2 = array2.getClass().getComponentType();\n            if (!type1.isAssignableFrom(type2)){\n",
    "label": "clean",
    "id": "6a3f1613-1751-4cdf-8d87-2a202f404bda"
  },
  {
    "project": "Jsoup",
    "bug_id": "79",
    "file": "org/jsoup/nodes/LeafNode.java",
    "snippet": "package org.jsoup.nodes;\n\nimport org.jsoup.helper.Validate;\n\nimport java.util.List;\n\nabstract class LeafNode extends Node {\n\n    Object value; // either a string value, or an attribute map (in the rare case multiple attributes are set)\n",
    "label": "buggy",
    "id": "f62c5ab7-21d4-462d-8e86-aae4a42c80b9"
  },
  {
    "project": "JacksonCore",
    "bug_id": "25",
    "file": "com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
    "snippet": "    /**\n     * Method for accessing textual representation of the current event;\n     * if no current event (before first call to {@link #nextToken}, or\n     * after encountering end-of-input), returns null.\n     * Method can be called for any event.\n     */\n    @Override\n    public final String getText() throws IOException\n    {\n        JsonToken t = _currToken;\n        if (t == JsonToken.VALUE_STRING) {\n            if (_tokenIncomplete) {\n                _tokenIncomplete = false;\n                _finishString(); // only strings can be incomplete\n            }\n            return _textBuffer.contentsAsString();\n        }\n        return _getText2(t);\n    }\n\n    @Override // since 2.8\n    public int getText(Writer writer) throws IOException\n    {\n        JsonToken t = _currToken;\n        if (t == JsonToken.VALUE_STRING) {\n            if (_tokenIncomplete) {\n                _tokenIncomplete = false;\n                _finishString(); // only strings can be incomplete\n            }\n            return _textBuffer.contentsToWriter(writer);\n        }\n        if (t == JsonToken.FIELD_NAME) {\n            String n = _parsingContext.getCurrentName();\n            writer.write(n);\n            return n.length();\n        }\n        if (t != null) {\n            if (t.isNumeric()) {\n                return _textBuffer.contentsToWriter(writer);\n            }\n            char[] ch = t.asCharArray();\n            writer.write(ch);\n            return ch.length;\n        }\n        return 0;\n    }\n    \n    // // // Let's override default impls for improved performance\n\n    // @since 2.1\n    @Override\n    public final String getValueAsString() throws IOException\n    {\n        if (_currToken == JsonToken.VALUE_STRING) {\n            if (_tokenIncomplete) {\n                _tokenIncomplete = false;\n                _finishString(); // only strings can be incomplete\n            }\n            return _textBuffer.contentsAsString();\n        }\n        if (_currToken == JsonToken.FIELD_NAME) {\n            return getCurrentName();\n        }\n        return super.getValueAsString(null);\n    }\n\n    // @since 2.1\n    @Override\n    public final String getValueAsString(String defValue) throws IOException {\n        if (_currToken == JsonToken.VALUE_STRING) {\n            if (_tokenIncomplete) {\n                _tokenIncomplete = false;\n                _finishString(); // only strings can be incomplete\n            }\n            return _textBuffer.contentsAsString();\n        }\n        if (_currToken == JsonToken.FIELD_NAME) {\n            return getCurrentName();\n        }\n        return super.getValueAsString(defValue);\n    }\n\n    protected final String _getText2(JsonToken t) {\n        if (t == null) {\n            return null;\n        }\n        switch (t.id()) {\n        case ID_FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case ID_STRING:\n            // fall through\n        case ID_NUMBER_INT:\n        case ID_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n            return t.asString();\n        }\n    }\n\n    @Override\n    public final char[] getTextCharacters() throws IOException\n    {\n        if (_currToken != null) { // null only before/after document\n            switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n            default:\n                return _currToken.asCharArray();\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public final int getTextLength() throws IOException\n    {\n        if (_currToken != null) { // null only before/after document\n            switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.size();\n            default:\n                return _currToken.asCharArray().length;\n            }\n        }\n        return 0;\n    }\n\n    @Override\n    public final int getTextOffset() throws IOException\n    {\n        // Most have offset of 0, only some may have other values:\n        if (_currToken != null) {\n            switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return 0;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }\n        }\n        return 0;\n    }\n\n    @Override\n    public byte[] getBinaryValue(Base64Variant b64variant) throws IOException\n    {\n        if ((_currToken == JsonToken.VALUE_EMBEDDED_OBJECT) && (_binaryValue != null)) {\n            return _binaryValue;\n        }\n        if (_currToken != JsonToken.VALUE_STRING) {\n            _reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");\n        }\n        // To ensure that we won't see inconsistent data, better clear up state\n        if (_tokenIncomplete) {\n            try {\n                _binaryValue = _decodeBase64(b64variant);\n            } catch (IllegalArgumentException iae) {\n                throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());\n            }\n            /* let's clear incomplete only now; allows for accessing other\n             * textual content in error cases\n             */\n            _tokenIncomplete = false;\n        } else { // may actually require conversion...\n            if (_binaryValue == null) {\n                @SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();\n                _decodeBase64(getText(), builder, b64variant);\n                _binaryValue = builder.toByteArray();\n            }\n        }\n        return _binaryValue;\n    }\n\n    @Override\n    public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException\n    {\n        // if we have already read the token, just use whatever we may have\n        if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING) {\n            byte[] b = getBinaryValue(b64variant);\n            out.write(b);\n            return b.length;\n        }\n        // otherwise do \"real\" incremental parsing...\n        byte[] buf = _ioContext.allocBase64Buffer();\n        try {\n            return _readBinary(b64variant, out, buf);\n        } finally {\n            _ioContext.releaseBase64Buffer(buf);\n        }\n    }\n\n    protected int _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer) throws IOException\n    {\n        int outputPtr = 0;\n        final int outputEnd = buffer.length - 3;\n        int outputCount = 0;\n\n        while (true) {\n            // first, we'll skip preceding white space, if any\n            char ch;\n            do {\n                if (_inputPtr >= _inputEnd) {\n                    _loadMoreGuaranteed();\n                }\n                ch = _inputBuffer[_inputPtr++];\n            } while (ch <= INT_SPACE);\n            int bits = b64variant.decodeBase64Char(ch);\n            if (bits < 0) { // reached the end, fair and square?\n                if (ch == '\"') {\n                    break;\n                }\n                bits = _decodeBase64Escape(b64variant, ch, 0);\n                if (bits < 0) { // white space to skip\n                    continue;\n                }\n            }\n\n            // enough room? If not, flush\n            if (outputPtr > outputEnd) {\n                outputCount += outputPtr;\n                out.write(buffer, 0, outputPtr);\n                outputPtr = 0;\n            }\n\n            int decodedData = bits;\n\n            // then second base64 char; can't get padding yet, nor ws\n\n            if (_inputPtr >= _inputEnd) {\n                _loadMoreGuaranteed();\n            }\n            ch = _inputBuffer[_inputPtr++];\n            bits = b64variant.decodeBase64Char(ch);\n            if (bits < 0) {\n                bits = _decodeBase64Escape(b64variant, ch, 1);\n            }\n            decodedData = (decodedData << 6) | bits;\n\n            // third base64 char; can be padding, but not ws\n            if (_inputPtr >= _inputEnd) {\n                _loadMoreGuaranteed();\n            }\n            ch = _inputBuffer[_inputPtr++];\n            bits = b64variant.decodeBase64Char(ch);\n\n            // First branch: can get padding (-> 1 byte)\n            if (bits < 0) {\n                if (bits != Base64Variant.BASE64_VALUE_PADDING) {\n                    // as per [JACKSON-631], could also just be 'missing'  padding\n                    if (ch == '\"') {\n                        decodedData >>= 4;\n                        buffer[outputPtr++] = (byte) decodedData;\n                        if (b64variant.usesPadding()) {\n                            --_inputPtr; // to keep parser state bit more consistent\n                            _handleBase64MissingPadding(b64variant);\n                        }\n                        break;\n                    }\n                    bits = _decodeBase64Escape(b64variant, ch, 2);\n                }\n                if (bits == Base64Variant.BASE64_VALUE_PADDING) {\n                    // Ok, must get padding\n                    if (_inputPtr >= _inputEnd) {\n                        _loadMoreGuaranteed();\n                    }\n                    ch = _inputBuffer[_inputPtr++];\n                    if (!b64variant.usesPaddingChar(ch)) {\n                        if (_decodeBase64Escape(b64variant, ch, 3) != Base64Variant.BASE64_VALUE_PADDING) {\n                            throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");\n                        }\n                    }\n                    // Got 12 bits, only need 8, need to shift\n                    decodedData >>= 4;\n                    buffer[outputPtr++] = (byte) decodedData;\n                    continue;\n                }\n            }\n            // Nope, 2 or 3 bytes\n            decodedData = (decodedData << 6) | bits;\n            // fourth and last base64 char; can be padding, but not ws\n            if (_inputPtr >= _inputEnd) {\n                _loadMoreGuaranteed();\n            }\n            ch = _inputBuffer[_inputPtr++];\n            bits = b64variant.decodeBase64Char(ch);\n            if (bits < 0) {\n                if (bits != Base64Variant.BASE64_VALUE_PADDING) {\n                    // as per [JACKSON-631], could also just be 'missing'  padding\n                    if (ch == '\"') {\n                        decodedData >>= 2;\n                        buffer[outputPtr++] = (byte) (decodedData >> 8);\n                        buffer[outputPtr++] = (byte) decodedData;\n                        if (b64variant.usesPadding()) {\n                            --_inputPtr; // to keep parser state bit more consistent\n                            _handleBase64MissingPadding(b64variant);\n                        }\n                        break;\n                    }\n                    bits = _decodeBase64Escape(b64variant, ch, 3);\n                }\n                if (bits == Base64Variant.BASE64_VALUE_PADDING) {\n                    /* With padding we only get 2 bytes; but we have\n                     * to shift it a bit so it is identical to triplet\n                     * case with partial output.\n                     * 3 chars gives 3x6 == 18 bits, of which 2 are\n                     * dummies, need to discard:\n                     */\n                    decodedData >>= 2;\n                    buffer[outputPtr++] = (byte) (decodedData >> 8);\n                    buffer[outputPtr++] = (byte) decodedData;\n                    continue;\n                }\n            }\n            // otherwise, our triplet is now complete\n            decodedData = (decodedData << 6) | bits;\n            buffer[outputPtr++] = (byte) (decodedData >> 16);\n            buffer[outputPtr++] = (byte) (decodedData >> 8);\n            buffer[outputPtr++] = (byte) decodedData;\n        }\n        _tokenIncomplete = false;\n        if (outputPtr > 0) {\n            outputCount += outputPtr;\n            out.write(buffer, 0, outputPtr);\n        }\n        return outputCount;\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, traversal\n    /**********************************************************\n     */\n\n    /**\n     * @return Next token from the stream, if any found, or null\n     *   to indicate end-of-input\n     */\n    @Override\n    public final JsonToken nextToken() throws IOException\n    {\n        /* First: field names are special -- we will always tokenize\n         * (part of) value along with field name to simplify\n         * state handling. If so, can and need to use secondary token:\n         */\n        if (_currToken == JsonToken.FIELD_NAME) {\n            return _nextAfterName();\n        }\n        // But if we didn't already have a name, and (partially?) decode number,\n        // need to ensure no numeric information is leaked\n        _numTypesValid = NR_UNKNOWN;\n        if (_tokenIncomplete) {\n            _skipString(); // only strings can be partial\n        }\n        int i = _skipWSOrEnd();\n        if (i < 0) { // end-of-input\n            // Should actually close/release things\n            // like input source, symbol table and recyclable buffers now.\n            close();\n            return (_currToken = null);\n        }\n        // clear any data retained so far\n        _binaryValue = null;\n\n        // Closing scope?\n        if (i == INT_RBRACKET || i == INT_RCURLY) {\n            _closeScope(i);\n            return _currToken;\n        }\n\n        // Nope: do we then expect a comma?\n        if (_parsingContext.expectComma()) {\n            i = _skipComma(i);\n\n            // Was that a trailing comma?\n            if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {\n                if ((i == INT_RBRACKET) || (i == INT_RCURLY)) {\n                    _closeScope(i);\n                    return _currToken;\n                }\n            }\n        }\n\n        /* And should we now have a name? Always true for Object contexts, since\n         * the intermediate 'expect-value' state is never retained.\n         */\n        boolean inObject = _parsingContext.inObject();\n        if (inObject) {\n            // First, field name itself:\n            _updateNameLocation();\n            String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);\n            _parsingContext.setCurrentName(name);\n            _currToken = JsonToken.FIELD_NAME;\n            i = _skipColon();\n        }\n        _updateLocation();\n\n        // Ok: we must have a value... what is it?\n\n        JsonToken t;\n\n        switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            t = JsonToken.VALUE_STRING;\n            break;\n        case '[':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_OBJECT;\n            break;\n        case '}':\n            // Error: } is not valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n\n        case '-':\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }\n\n        if (inObject) {\n            _nextToken = t;\n            return _currToken;\n        }\n        _currToken = t;\n        return t;\n    }\n\n    private final JsonToken _nextAfterName()\n    {\n        _nameCopied = false; // need to invalidate if it was copied\n        JsonToken t = _nextToken;\n        _nextToken = null;\n\n// !!! 16-Nov-2015, tatu: TODO: fix [databind#37], copy next location to current here\n        \n        // Also: may need to start new context?\n        if (t == JsonToken.START_ARRAY) {\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n        } else if (t == JsonToken.START_OBJECT) {\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n        }\n        return (_currToken = t);\n    }\n\n    @Override\n    public void finishToken() throws IOException {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            _finishString(); // only strings can be incomplete\n        }\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, nextXxx() overrides\n    /**********************************************************\n     */\n\n    // Implemented since 2.7\n    @Override\n    public boolean nextFieldName(SerializableString sstr) throws IOException\n    {\n        // // // Note: most of code below is copied from nextToken()\n\n        _numTypesValid = NR_UNKNOWN;\n        if (_currToken == JsonToken.FIELD_NAME) {\n            _nextAfterName();\n            return false;\n        }\n        if (_tokenIncomplete) {\n            _skipString();\n        }\n        int i = _skipWSOrEnd();\n        if (i < 0) {\n            close();\n            _currToken = null;\n            return false;\n        }\n        _binaryValue = null;\n\n        // Closing scope?\n        if (i == INT_RBRACKET || i == INT_RCURLY) {\n            _closeScope(i);\n            return false;\n        }\n\n        if (_parsingContext.expectComma()) {\n            i = _skipComma(i);\n\n            // Was that a trailing comma?\n            if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {\n                if ((i == INT_RBRACKET) || (i == INT_RCURLY)) {\n                    _closeScope(i);\n                    return false;\n                }\n            }\n        }\n\n        if (!_parsingContext.inObject()) {\n            _updateLocation();\n            _nextTokenNotInObject(i);\n            return false;\n        }\n\n        _updateNameLocation();\n        if (i == INT_QUOTE) {\n            // when doing literal match, must consider escaping:\n            char[] nameChars = sstr.asQuotedChars();\n            final int len = nameChars.length;\n\n            // Require 4 more bytes for faster skipping of colon that follows name\n            if ((_inputPtr + len + 4) < _inputEnd) { // maybe...\n                // first check length match by\n                final int end = _inputPtr+len;\n                if (_inputBuffer[end] == '\"') {\n                    int offset = 0;\n                    int ptr = _inputPtr;\n                    while (true) {\n                        if (ptr == end) { // yes, match!\n                            _parsingContext.setCurrentName(sstr.getValue());\n                            _isNextTokenNameYes(_skipColonFast(ptr+1));\n                            return true;\n                        }\n                        if (nameChars[offset] != _inputBuffer[ptr]) {\n                            break;\n                        }\n                        ++offset;\n                        ++ptr;\n                    }\n                }\n            }\n        }\n        return _isNextTokenNameMaybe(i, sstr.getValue());\n    }\n\n    @Override\n    public String nextFieldName() throws IOException\n    {\n        // // // Note: this is almost a verbatim copy of nextToken() (minus comments)\n\n        _numTypesValid = NR_UNKNOWN;\n        if (_currToken == JsonToken.FIELD_NAME) {\n            _nextAfterName();\n            return null;\n        }\n        if (_tokenIncomplete) {\n            _skipString();\n        }\n        int i = _skipWSOrEnd();\n        if (i < 0) {\n            close();\n            _currToken = null;\n            return null;\n        }\n        _binaryValue = null;\n        if (i == INT_RBRACKET || i == INT_RCURLY) {\n            _closeScope(i);\n            return null;\n        }\n        if (_parsingContext.expectComma()) {\n            i = _skipComma(i);\n            if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {\n                if ((i == INT_RBRACKET) || (i == INT_RCURLY)) {\n                    _closeScope(i);\n                    return null;\n                }\n            }\n        }\n        if (!_parsingContext.inObject()) {\n            _updateLocation();\n            _nextTokenNotInObject(i);\n            return null;\n        }\n\n        _updateNameLocation();\n        String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);\n        _parsingContext.setCurrentName(name);\n        _currToken = JsonToken.FIELD_NAME;\n        i = _skipColon();\n\n        _updateLocation();\n        if (i == INT_QUOTE) {\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return name;\n        }\n        \n        // Ok: we must have a value... what is it?\n\n        JsonToken t;\n\n        switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }\n        _nextToken = t;\n        return name;\n    }\n\n    private final void _isNextTokenNameYes(int i) throws IOException\n    {\n        _currToken = JsonToken.FIELD_NAME;\n        _updateLocation();\n\n        switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return;\n        case '[':\n            _nextToken = JsonToken.START_ARRAY;\n            return;\n        case '{':\n            _nextToken = JsonToken.START_OBJECT;\n            return;\n        case 't':\n            _matchToken(\"true\", 1);\n            _nextToken = JsonToken.VALUE_TRUE;\n            return;\n        case 'f':\n            _matchToken(\"false\", 1);\n            _nextToken = JsonToken.VALUE_FALSE;\n            return;\n        case 'n':\n            _matchToken(\"null\", 1);\n            _nextToken = JsonToken.VALUE_NULL;\n            return;\n        case '-':\n            _nextToken = _parseNegNumber();\n            return;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            _nextToken = _parsePosNumber(i);\n            return;\n        }\n        _nextToken = _handleOddValue(i);\n    }\n\n    protected boolean _isNextTokenNameMaybe(int i, String nameToMatch) throws IOException\n    {\n        // // // and this is back to standard nextToken()\n        String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);\n        _parsingContext.setCurrentName(name);\n        _currToken = JsonToken.FIELD_NAME;\n        i = _skipColon();\n        _updateLocation();\n        if (i == INT_QUOTE) {\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return nameToMatch.equals(name);\n        }\n        // Ok: we must have a value... what is it?\n        JsonToken t;\n        switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }\n        _nextToken = t;\n        return nameToMatch.equals(name);\n    }\n\n    private final JsonToken _nextTokenNotInObject(int i) throws IOException\n    {\n        if (i == INT_QUOTE) {\n            _tokenIncomplete = true;\n            return (_currToken = JsonToken.VALUE_STRING);\n        }\n        switch (i) {\n        case '[':\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_ARRAY);\n        case '{':\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_OBJECT);\n        case 't':\n            _matchToken(\"true\", 1);\n            return (_currToken = JsonToken.VALUE_TRUE);\n        case 'f':\n            _matchToken(\"false\", 1);\n            return (_currToken = JsonToken.VALUE_FALSE);\n        case 'n':\n            _matchToken(\"null\", 1);\n            return (_currToken = JsonToken.VALUE_NULL);\n        case '-':\n            return (_currToken = _parseNegNumber());\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicated by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return (_currToken = _parsePosNumber(i));\n        /*\n         * This check proceeds only if the Feature.ALLOW_MISSING_VALUES is enabled\n         * The Check is for missing values. Incase of missing values in an array, the next token will be either ',' or ']'.\n         * This case, decrements the already incremented _inputPtr in the buffer in case of comma(,) \n         * so that the existing flow goes back to checking the next token which will be comma again and\n         * it continues the parsing.\n         * Also the case returns NULL as current token in case of ',' or ']'.    \n         */\n        case ',':\n        case ']':\n        \tif(isEnabled(Feature.ALLOW_MISSING_VALUES)) {\n        \t\t_inputPtr--;\n        \t\treturn (_currToken = JsonToken.VALUE_NULL);  \n        \t}    \n        }\n        return (_currToken = _handleOddValue(i));\n    }\n\n    // note: identical to one in UTF8StreamJsonParser\n    @Override\n    public final String nextTextValue() throws IOException\n    {\n        if (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'\n            _nameCopied = false;\n            JsonToken t = _nextToken;\n            _nextToken = null;\n            _currToken = t;\n            if (t == JsonToken.VALUE_STRING) {\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString();\n                }\n                return _textBuffer.contentsAsString();\n            }\n            if (t == JsonToken.START_ARRAY) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            } else if (t == JsonToken.START_OBJECT) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            return null;\n        }\n        // !!! TODO: optimize this case as well\n        return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;\n    }\n\n    // note: identical to one in Utf8StreamParser\n    @Override\n    public final int nextIntValue(int defaultValue) throws IOException\n    {\n        if (_currToken == JsonToken.FIELD_NAME) {\n            _nameCopied = false;\n            JsonToken t = _nextToken;\n            _nextToken = null;\n            _currToken = t;\n            if (t == JsonToken.VALUE_NUMBER_INT) {\n                return getIntValue();\n            }\n            if (t == JsonToken.START_ARRAY) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            } else if (t == JsonToken.START_OBJECT) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            return defaultValue;\n        }\n        // !!! TODO: optimize this case as well\n        return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;\n    }\n\n    // note: identical to one in Utf8StreamParser\n    @Override\n    public final long nextLongValue(long defaultValue) throws IOException\n    {\n        if (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'\n            _nameCopied = false;\n            JsonToken t = _nextToken;\n            _nextToken = null;\n            _currToken = t;\n            if (t == JsonToken.VALUE_NUMBER_INT) {\n                return getLongValue();\n            }\n            if (t == JsonToken.START_ARRAY) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            } else if (t == JsonToken.START_OBJECT) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            return defaultValue;\n        }\n        // !!! TODO: optimize this case as well\n        return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;\n    }\n\n    // note: identical to one in UTF8StreamJsonParser\n    @Override\n    public final Boolean nextBooleanValue() throws IOException\n    {\n        if (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'\n            _nameCopied = false;\n            JsonToken t = _nextToken;\n            _nextToken = null;\n            _currToken = t;\n            if (t == JsonToken.VALUE_TRUE) {\n                return Boolean.TRUE;\n            }\n            if (t == JsonToken.VALUE_FALSE) {\n                return Boolean.FALSE;\n            }\n            if (t == JsonToken.START_ARRAY) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            } else if (t == JsonToken.START_OBJECT) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            return null;\n        }\n        JsonToken t = nextToken();\n        if (t != null) {\n            int id = t.id();\n            if (id == ID_TRUE) return Boolean.TRUE;\n            if (id == ID_FALSE) return Boolean.FALSE;\n        }\n        return null;\n    }\n\n    /*\n    /**********************************************************\n    /* Internal methods, number parsing\n    /**********************************************************\n     */\n\n    /**\n     * Initial parsing method for number values. It needs to be able\n     * to parse enough input to be able to determine whether the\n     * value is to be considered a simple integer value, or a more\n     * generic decimal value: latter of which needs to be expressed\n     * as a floating point number. The basic rule is that if the number\n     * has no fractional or exponential part, it is an integer; otherwise\n     * a floating point number.\n     *<p>\n     * Because much of input has to be processed in any case, no partial\n     * parsing is done: all input text will be stored for further\n     * processing. However, actual numeric value conversion will be\n     * deferred, since it is usually the most complicated and costliest\n     * part of processing.\n     */\n    protected final JsonToken _parsePosNumber(int ch) throws IOException\n    {\n        /* Although we will always be complete with respect to textual\n         * representation (that is, all characters will be parsed),\n         * actual conversion to a number is deferred. Thus, need to\n         * note that no representations are valid yet\n         */\n        int ptr = _inputPtr;\n        int startPtr = ptr-1; // to include digit already read\n        final int inputLen = _inputEnd;\n\n        // One special case, leading zero(es):\n        if (ch == INT_0) {\n            return _parseNumber2(false, startPtr);\n        }\n\n        /* First, let's see if the whole number is contained within\n         * the input buffer unsplit. This should be the common case;\n         * and to simplify processing, we will just reparse contents\n         * in the alternative case (number split on buffer boundary)\n         */\n\n        int intLen = 1; // already got one\n\n        // First let's get the obligatory integer part:\n        int_loop:\n        while (true) {\n            if (ptr >= inputLen) {\n                _inputPtr = startPtr;\n                return _parseNumber2(false, startPtr);\n            }\n            ch = (int) _inputBuffer[ptr++];\n            if (ch < INT_0 || ch > INT_9) {\n                break int_loop;\n            }\n            ++intLen;\n        }\n        if (ch == INT_PERIOD || ch == INT_e || ch == INT_E) {\n            _inputPtr = ptr;\n            return _parseFloat(ch, startPtr, ptr, false, intLen);\n        }\n        // Got it all: let's add to text buffer for parsing, access\n        --ptr; // need to push back following separator\n        _inputPtr = ptr;\n        // As per #105, need separating space between root values; check here\n        if (_parsingContext.inRoot()) {\n            _verifyRootSpace(ch);\n        }\n        int len = ptr-startPtr;\n        _textBuffer.resetWithShared(_inputBuffer, startPtr, len);\n        return resetInt(false, intLen);\n    }\n\n    private final JsonToken _parseFloat(int ch, int startPtr, int ptr, boolean neg, int intLen)\n        throws IOException\n    {\n        final int inputLen = _inputEnd;\n        int fractLen = 0;\n\n        // And then see if we get other parts\n        if (ch == '.') { // yes, fraction\n            fract_loop:\n            while (true) {\n                if (ptr >= inputLen) {\n                    return _parseNumber2(neg, startPtr);\n                }\n                ch = (int) _inputBuffer[ptr++];\n                if (ch < INT_0 || ch > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n            }\n            // must be followed by sequence of ints, one minimum\n            if (fractLen == 0) {\n                reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");\n            }\n        }\n        int expLen = 0;\n        if (ch == 'e' || ch == 'E') { // and/or exponent\n            if (ptr >= inputLen) {\n                _inputPtr = startPtr;\n                return _parseNumber2(neg, startPtr);\n            }\n            // Sign indicator?\n            ch = (int) _inputBuffer[ptr++];\n            if (ch == INT_MINUS || ch == INT_PLUS) { // yup, skip for now\n                if (ptr >= inputLen) {\n                    _inputPtr = startPtr;\n                    return _parseNumber2(neg, startPtr);\n                }\n                ch = (int) _inputBuffer[ptr++];\n            }\n            while (ch <= INT_9 && ch >= INT_0) {\n                ++expLen;\n                if (ptr >= inputLen) {\n                    _inputPtr = startPtr;\n                    return _parseNumber2(neg, startPtr);\n                }\n                ch = (int) _inputBuffer[ptr++];\n            }\n            // must be followed by sequence of ints, one minimum\n            if (expLen == 0) {\n                reportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");\n            }\n        }\n        --ptr; // need to push back following separator\n        _inputPtr = ptr;\n        // As per #105, need separating space between root values; check here\n        if (_parsingContext.inRoot()) {\n            _verifyRootSpace(ch);\n        }\n        int len = ptr-startPtr;\n        _textBuffer.resetWithShared(_inputBuffer, startPtr, len);\n        // And there we have it!\n        return resetFloat(neg, intLen, fractLen, expLen);\n    }\n\n    protected final JsonToken _parseNegNumber() throws IOException\n    {\n        int ptr = _inputPtr;\n        int startPtr = ptr-1; // to include sign/digit already read\n        final int inputLen = _inputEnd;\n\n        if (ptr >= inputLen) {\n            return _parseNumber2(true, startPtr);\n        }\n        int ch = _inputBuffer[ptr++];\n        // First check: must have a digit to follow minus sign\n        if (ch > INT_9 || ch < INT_0) {\n            _inputPtr = ptr;\n            return _handleInvalidNumberStart(ch, true);\n        }\n        // One special case, leading zero(es):\n        if (ch == INT_0) {\n            return _parseNumber2(true, startPtr);\n        }\n        int intLen = 1; // already got one\n\n        // First let's get the obligatory integer part:\n        int_loop:\n        while (true) {\n            if (ptr >= inputLen) {\n                return _parseNumber2(true, startPtr);\n            }\n            ch = (int) _inputBuffer[ptr++];\n            if (ch < INT_0 || ch > INT_9) {\n                break int_loop;\n            }\n            ++intLen;\n        }\n\n        if (ch == INT_PERIOD || ch == INT_e || ch == INT_E) {\n            _inputPtr = ptr;\n            return _parseFloat(ch, startPtr, ptr, true, intLen);\n        }\n        --ptr;\n        _inputPtr = ptr;\n        if (_parsingContext.inRoot()) {\n            _verifyRootSpace(ch);\n        }\n        int len = ptr-startPtr;\n        _textBuffer.resetWithShared(_inputBuffer, startPtr, len);\n        return resetInt(true, intLen);\n    }\n\n    /**\n     * Method called to parse a number, when the primary parse\n     * method has failed to parse it, due to it being split on\n     * buffer boundary. As a result code is very similar, except\n     * that it has to explicitly copy contents to the text buffer\n     * instead of just sharing the main input buffer.\n     */\n    private final JsonToken _parseNumber2(boolean neg, int startPtr) throws IOException\n    {\n        _inputPtr = neg ? (startPtr+1) : startPtr;\n        char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\n        int outPtr = 0;\n\n        // Need to prepend sign?\n        if (neg) {\n            outBuf[outPtr++] = '-';\n        }\n\n        // This is the place to do leading-zero check(s) too:\n        int intLen = 0;\n        char c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                : getNextChar(\"No digit following minus sign\", JsonToken.VALUE_NUMBER_INT);\n        if (c == '0') {\n            c = _verifyNoLeadingZeroes();\n        }\n        boolean eof = false;\n\n        // Ok, first the obligatory integer part:\n        int_loop:\n        while (c >= '0' && c <= '9') {\n            ++intLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n            if (_inputPtr >= _inputEnd && !_loadMore()) {\n                // EOF is legal for main level int values\n                c = CHAR_NULL;\n                eof = true;\n                break int_loop;\n            }\n            c = _inputBuffer[_inputPtr++];\n        }\n        // Also, integer part is not optional\n        if (intLen == 0) {\n            return _handleInvalidNumberStart(c, neg);\n        }\n\n        int fractLen = 0;\n        // And then see if we get other parts\n        if (c == '.') { // yes, fraction\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n\n            fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !_loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n            }\n            // must be followed by sequence of ints, one minimum\n            if (fractLen == 0) {\n                reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");\n            }\n        }\n\n        int expLen = 0;\n        if (c == 'e' || c == 'E') { // exponent?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n            // Not optional, can require that we get one more char\n            c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                : getNextChar(\"expected a digit for number exponent\");\n            // Sign indicator?\n            if (c == '-' || c == '+') {\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n                // Likewise, non optional:\n                c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                    : getNextChar(\"expected a digit for number exponent\");\n            }\n\n            exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n                if (_inputPtr >= _inputEnd && !_loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n            }\n            // must be followed by sequence of ints, one minimum\n            if (expLen == 0) {\n                reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");\n            }\n        }\n\n        // Ok; unless we hit end-of-input, need to push last char read back\n        if (!eof) {\n            --_inputPtr;\n            if (_parsingContext.inRoot()) {\n                _verifyRootSpace(c);\n            }\n        }\n        _textBuffer.setCurrentLength(outPtr);\n        // And there we have it!\n        return reset(neg, intLen, fractLen, expLen);\n    }\n\n    /**\n     * Method called when we have seen one zero, and want to ensure\n     * it is not followed by another\n     */\n    private final char _verifyNoLeadingZeroes() throws IOException\n    {\n        // Fast case first:\n        if (_inputPtr < _inputEnd) {\n            char ch = _inputBuffer[_inputPtr];\n            // if not followed by a number (probably '.'); return zero as is, to be included\n            if (ch < '0' || ch > '9') {\n                return '0';\n            }\n        }\n        // and offline the less common case\n        return _verifyNLZ2();\n    }\n\n    private char _verifyNLZ2() throws IOException\n    {\n        if (_inputPtr >= _inputEnd && !_loadMore()) {\n            return '0';\n        }\n        char ch = _inputBuffer[_inputPtr];\n        if (ch < '0' || ch > '9') {\n            return '0';\n        }\n        if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS)) {\n            reportInvalidNumber(\"Leading zeroes not allowed\");\n        }\n        // if so, just need to skip either all zeroes (if followed by number); or all but one (if non-number)\n        ++_inputPtr; // Leading zero to be skipped\n        if (ch == INT_0) {\n            while (_inputPtr < _inputEnd || _loadMore()) {\n                ch = _inputBuffer[_inputPtr];\n                if (ch < '0' || ch > '9') { // followed by non-number; retain one zero\n                    return '0';\n                }\n                ++_inputPtr; // skip previous zero\n                if (ch != '0') { // followed by other number; return\n                    break;\n                }\n            }\n        }\n        return ch;\n    }\n\n    /**\n     * Method called if expected numeric value (due to leading sign) does not\n     * look like a number\n     */\n    protected JsonToken _handleInvalidNumberStart(int ch, boolean negative) throws IOException\n    {\n        if (ch == 'I') {\n            if (_inputPtr >= _inputEnd) {\n                if (!_loadMore()) {\n                    _reportInvalidEOFInValue(JsonToken.VALUE_NUMBER_INT);\n                }\n            }\n            ch = _inputBuffer[_inputPtr++];\n            if (ch == 'N') {\n                String match = negative ? \"-INF\" :\"+INF\";\n                _matchToken(match, 3);\n                if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                    return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);\n                }\n                _reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            } else if (ch == 'n') {\n                String match = negative ? \"-Infinity\" :\"+Infinity\";\n                _matchToken(match, 3);\n                if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                    return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);\n                }\n                _reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            }\n        }\n        reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");\n        return null;\n    }\n\n    /**\n     * Method called to ensure that a root-value is followed by a space\n     * token.\n     *<p>\n     * NOTE: caller MUST ensure there is at least one character available;\n     * and that input pointer is AT given char (not past)\n     */\n    private final void _verifyRootSpace(int ch) throws IOException\n    {\n        // caller had pushed it back, before calling; reset\n        ++_inputPtr;\n        switch (ch) {\n        case ' ':\n        case '\\t':\n            return;\n        case '\\r':\n            _skipCR();\n            return;\n        case '\\n':\n            ++_currInputRow;\n            _currInputRowStart = _inputPtr;\n            return;\n        }\n        _reportMissingRootWS(ch);\n    }\n\n    /*\n    /**********************************************************\n    /* Internal methods, secondary parsing\n    /**********************************************************\n     */\n\n    protected final String _parseName() throws IOException\n    {\n        // First: let's try to see if we have a simple name: one that does\n        // not cross input buffer boundary, and does not contain escape sequences.\n        int ptr = _inputPtr;\n        int hash = _hashSeed;\n        final int[] codes = _icLatin1;\n\n        while (ptr < _inputEnd) {\n            int ch = _inputBuffer[ptr];\n            if (ch < codes.length && codes[ch] != 0) {\n                if (ch == '\"') {\n                    int start = _inputPtr;\n                    _inputPtr = ptr+1; // to skip the quote\n                    return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n                }\n                break;\n            }\n            hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;\n            ++ptr;\n        }\n        int start = _inputPtr;\n        _inputPtr = ptr;\n        return _parseName2(start, hash, INT_QUOTE);\n    }\n\n    private String _parseName2(int startPtr, int hash, int endChar) throws IOException\n    {\n        _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n\n        /* Output pointers; calls will also ensure that the buffer is\n         * not shared and has room for at least one more char.\n         */\n        char[] outBuf = _textBuffer.getCurrentSegment();\n        int outPtr = _textBuffer.getCurrentSegmentSize();\n\n        while (true) {\n            if (_inputPtr >= _inputEnd) {\n                if (!_loadMore()) {\n                    _reportInvalidEOF(\" in field name\", JsonToken.FIELD_NAME);\n                }\n            }\n            char c = _inputBuffer[_inputPtr++];\n            int i = (int) c;\n            if (i <= INT_BACKSLASH) {\n                if (i == INT_BACKSLASH) {\n                    /* Although chars outside of BMP are to be escaped as\n                     * an UTF-16 surrogate pair, does that affect decoding?\n                     * For now let's assume it does not.\n                     */\n                    c = _decodeEscaped();\n                } else if (i <= endChar) {\n                    if (i == endChar) {\n                        break;\n                    }\n                    if (i < INT_SPACE) {\n                        _throwUnquotedSpace(i, \"name\");\n                    }\n                }\n            }\n            hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + c;\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = c;\n\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n        }\n        _textBuffer.setCurrentLength(outPtr);\n        {\n            TextBuffer tb = _textBuffer;\n            char[] buf = tb.getTextBuffer();\n            int start = tb.getTextOffset();\n            int len = tb.size();\n            return _symbols.findSymbol(buf, start, len, hash);\n        }\n    }\n\n    /**\n     * Method called when we see non-white space character other\n     * than double quote, when expecting a field name.\n     * In standard mode will just throw an expection; but\n     * in non-standard modes may be able to parse name.\n     */\n    protected String _handleOddName(int i) throws IOException\n    {\n        // [JACKSON-173]: allow single quotes\n        if (i == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n            return _parseAposName();\n        }\n        // [JACKSON-69]: allow unquoted names if feature enabled:\n        if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {\n            _reportUnexpectedChar(i, \"was expecting double-quote to start field name\");\n        }\n        final int[] codes = CharTypes.getInputCodeLatin1JsNames();\n        final int maxCode = codes.length;\n\n        // Also: first char must be a valid name char, but NOT be number\n        boolean firstOk;\n\n        if (i < maxCode) { // identifier, or a number ([Issue#102])\n            firstOk = (codes[i] == 0);\n        } else {\n            firstOk = Character.isJavaIdentifierPart((char) i);\n        }\n        if (!firstOk) {\n            _reportUnexpectedChar(i, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");\n        }\n        int ptr = _inputPtr;\n        int hash = _hashSeed;\n        final int inputLen = _inputEnd;\n\n        if (ptr < inputLen) {\n            do {\n                int ch = _inputBuffer[ptr];\n                if (ch < maxCode) {\n                    if (codes[ch] != 0) {\n                        int start = _inputPtr-1; // -1 to bring back first char\n                        _inputPtr = ptr;\n                        return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n                    }\n                } else if (!Character.isJavaIdentifierPart((char) ch)) {\n                    int start = _inputPtr-1; // -1 to bring back first char\n                    _inputPtr = ptr;\n                    return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n                }\n                hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;\n                ++ptr;\n            } while (ptr < inputLen);\n        }\n        int start = _inputPtr-1;\n        _inputPtr = ptr;\n        return _handleOddName2(start, hash, codes);\n    }\n\n    protected String _parseAposName() throws IOException\n    {\n        // Note: mostly copy of_parseFieldName\n        int ptr = _inputPtr;\n        int hash = _hashSeed;\n        final int inputLen = _inputEnd;\n\n        if (ptr < inputLen) {\n            final int[] codes = _icLatin1;\n            final int maxCode = codes.length;\n\n            do {\n                int ch = _inputBuffer[ptr];\n                if (ch == '\\'') {\n                    int start = _inputPtr;\n                    _inputPtr = ptr+1; // to skip the quote\n                    return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n                }\n                if (ch < maxCode && codes[ch] != 0) {\n                    break;\n                }\n                hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;\n                ++ptr;\n            } while (ptr < inputLen);\n        }\n\n        int start = _inputPtr;\n        _inputPtr = ptr;\n\n        return _parseName2(start, hash, '\\'');\n    }\n\n    /**\n     * Method for handling cases where first non-space character\n     * of an expected value token is not legal for standard JSON content.\n     */\n    protected JsonToken _handleOddValue(int i) throws IOException\n    {\n        // Most likely an error, unless we are to allow single-quote-strings\n        switch (i) {\n        case '\\'':\n            /* Allow single quotes? Unlike with regular Strings, we'll eagerly parse\n             * contents; this so that there'sno need to store information on quote char used.\n             * Also, no separation to fast/slow parsing; we'll just do\n             * one regular (~= slowish) parsing, to keep code simple\n             */\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case ']':\n            /* 28-Mar-2016: [core#116]: If Feature.ALLOW_MISSING_VALUES is enabled\n             *   we may allow \"missing values\", that is, encountering a trailing\n             *   comma or closing marker where value would be expected\n             */\n            if (!_parsingContext.inArray()) {\n                break;\n            }\n            // fall through\n        case ',':\n            if (isEnabled(Feature.ALLOW_MISSING_VALUES)) {\n                --_inputPtr;\n                return JsonToken.VALUE_NULL;\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!_loadMore()) {\n                    _reportInvalidEOFInValue(JsonToken.VALUE_NUMBER_INT);\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);\n        }\n        // [core#77] Try to decode most likely token\n        if (Character.isJavaIdentifierStart(i)) {\n            _reportInvalidToken(\"\"+((char) i), \"('true', 'false' or 'null')\");\n        }\n        // but if it doesn't look like a token:\n        _reportUnexpectedChar(i, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");\n        return null;\n    }\n\n    protected JsonToken _handleApos() throws IOException\n    {\n        char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\n        int outPtr = _textBuffer.getCurrentSegmentSize();\n\n        while (true) {\n            if (_inputPtr >= _inputEnd) {\n                if (!_loadMore()) {\n                    _reportInvalidEOF(\": was expecting closing quote for a string value\",\n                            JsonToken.VALUE_STRING);\n                }\n            }\n            char c = _inputBuffer[_inputPtr++];\n            int i = (int) c;\n            if (i <= '\\\\') {\n                if (i == '\\\\') {\n                    /* Although chars outside of BMP are to be escaped as\n                     * an UTF-16 surrogate pair, does that affect decoding?\n                     * For now let's assume it does not.\n                     */\n                    c = _decodeEscaped();\n                } else if (i <= '\\'') {\n                    if (i == '\\'') {\n                        break;\n                    }\n                    if (i < INT_SPACE) {\n                        _throwUnquotedSpace(i, \"string value\");\n                    }\n                }\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = c;\n        }\n        _textBuffer.setCurrentLength(outPtr);\n        return JsonToken.VALUE_STRING;\n    }\n\n    private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n    {\n        _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n        char[] outBuf = _textBuffer.getCurrentSegment();\n        int outPtr = _textBuffer.getCurrentSegmentSize();\n        final int maxCode = codes.length;\n\n        while (true) {\n            if (_inputPtr >= _inputEnd) {\n                if (!_loadMore()) { // acceptable for now (will error out later)\n                    break;\n                }\n            }\n            char c = _inputBuffer[_inputPtr];\n            int i = (int) c;\n            if (i <= maxCode) {\n                if (codes[i] != 0) {\n                    break;\n                }\n            } else if (!Character.isJavaIdentifierPart(c)) {\n                break;\n",
    "label": "buggy",
    "id": "618ed286-d2f1-4db2-8050-86374dd46f65"
  },
  {
    "project": "Codec",
    "bug_id": "7",
    "file": "org/apache/commons/codec/binary/Base64.java",
    "snippet": "    /**\n     * Encodes binary data using the base64 algorithm into 76 character blocks separated by CRLF.\n     *\n     * @param binaryData\n     *            binary data to encode\n     * @return String containing Base64 characters.\n     * @since 1.4\n     */    \n    public static String encodeBase64String(byte[] binaryData) {\n        return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n    }\n    \n    /**\n     * Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the output. The\n     * url-safe variation emits - and _ instead of + and / characters.\n",
    "label": "buggy",
    "id": "daf82d23-168c-4147-9dcf-be43aa22754c"
  },
  {
    "project": "Lang",
    "bug_id": "28",
    "file": "org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
    "snippet": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.lang3.text.translate;\n\nimport java.io.IOException;\nimport java.io.Writer;\n\n/**\n * Translate XML numeric entities of the form &#[xX]?\\d+; to \n * the specific codepoint.\n * \n * @author Apache Software Foundation\n * @since 3.0\n */\npublic class NumericEntityUnescaper extends CharSequenceTranslator {\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // TODO: Protect from ArrayIndexOutOfBounds\n        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n\n            int end = start;\n            while(input.charAt(end) != ';') {\n                end++;\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n                return 0;\n            }\n\n            if(entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n",
    "label": "clean",
    "id": "402c7ff8-be93-43ff-a5bd-7371424411a7"
  },
  {
    "project": "Closure",
    "bug_id": "61",
    "file": "com/google/javascript/jscomp/NodeUtil.java",
    "snippet": "  /**\n   * Creates an EXPR_RESULT.\n   *\n   * @param child The expression itself.\n   * @return Newly created EXPR node with the child as subexpression.\n   */\n  public static Node newExpr(Node child) {\n    Node expr = new Node(Token.EXPR_RESULT, child)\n        .copyInformationFrom(child);\n    return expr;\n  }\n\n  /**\n   * Returns true if the node may create new mutable state, or change existing\n   * state.\n   *\n   * @see <a href=\"http://www.xkcd.org/326/\">XKCD Cartoon</a>\n   */\n  static boolean mayEffectMutableState(Node n) {\n    return mayEffectMutableState(n, null);\n  }\n\n  static boolean mayEffectMutableState(Node n, AbstractCompiler compiler) {\n    return checkForStateChangeHelper(n, true, compiler);\n  }\n\n  /**\n   * Returns true if the node which may have side effects when executed.\n   */\n  static boolean mayHaveSideEffects(Node n) {\n    return mayHaveSideEffects(n, null);\n  }\n\n  static boolean mayHaveSideEffects(Node n, AbstractCompiler compiler) {\n    return checkForStateChangeHelper(n, false, compiler);\n  }\n\n  /**\n   * Returns true if some node in n's subtree changes application state.\n   * If {@code checkForNewObjects} is true, we assume that newly created\n   * mutable objects (like object literals) change state. Otherwise, we assume\n   * that they have no side effects.\n   */\n  private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects, AbstractCompiler compiler) {\n    // Rather than id which ops may have side effects, id the ones\n    // that we know to be safe\n    switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType())) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (isName(assignTarget)) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (checkForStateChangeHelper(c, checkForNewObjects, compiler)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Do calls to this constructor have side effects?\n   *\n   * @param callNode - construtor call node\n   */\n  static boolean constructorCallHasSideEffects(Node callNode) {\n    return constructorCallHasSideEffects(callNode, null);\n  }\n\n  static boolean constructorCallHasSideEffects(\n      Node callNode, AbstractCompiler compiler) {\n    if (callNode.getType() != Token.NEW) {\n      throw new IllegalStateException(\n          \"Expected NEW node, got \" + Token.name(callNode.getType()));\n    }\n\n    if (callNode.isNoSideEffectsCall()) {\n      return false;\n    }\n\n    Node nameNode = callNode.getFirstChild();\n    if (nameNode.getType() == Token.NAME &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // A list of built-in object creation or primitive type cast functions that\n  // can also be called as constructors but lack side-effects.\n  // TODO(johnlenz): consider adding an extern annotation for this.\n  private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\n          \"Object\", \"Array\", \"String\", \"Number\", \"Boolean\", \"RegExp\", \"Error\");\n  private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\"toString\", \"valueOf\");\n  private static final Set<String> REGEXP_METHODS =\n      ImmutableSet.of(\"test\", \"exec\");\n  private static final Set<String> STRING_REGEXP_METHODS =\n      ImmutableSet.of(\"match\", \"replace\", \"search\", \"split\");\n\n  /**\n   * Returns true if calls to this function have side effects.\n   *\n   * @param callNode - function call node\n   */\n  static boolean functionCallHasSideEffects(Node callNode) {\n    return functionCallHasSideEffects(callNode, null);\n  }\n\n  /**\n   * Returns true if calls to this function have side effects.\n   *\n   * @param callNode The call node to inspected.\n   * @param compiler A compiler object to provide program state changing\n   *     context information. Can be null.\n   */\n  static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler) {\n    if (callNode.getType() != Token.CALL) {\n      throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n    }\n\n    if (callNode.isNoSideEffectsCall()) {\n      return false;\n    }\n\n    Node nameNode = callNode.getFirstChild();\n\n    // Built-in functions with no side effects.\n    if (nameNode.getType() == Token.NAME) {\n      String name = nameNode.getString();\n      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n        return false;\n      }\n    } else if (nameNode.getType() == Token.GETPROP) {\n      if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString())) {\n        return false;\n      }\n\n      if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n\n      // Functions in the \"Math\" namespace have no side effects.\n      if (nameNode.getFirstChild().getType() == Token.NAME) {\n        String namespaceName = nameNode.getFirstChild().getString();\n        if (namespaceName.equals(\"Math\")) {\n          return false;\n        }\n      }\n",
    "label": "clean",
    "id": "2372fcbb-a20e-4a7f-9501-04aab410d40e"
  },
  {
    "project": "Compress",
    "bug_id": "9",
    "file": "org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
    "snippet": "    /**\n     * Set the long file mode.\n     * This can be LONGFILE_ERROR(0), LONGFILE_TRUNCATE(1) or LONGFILE_GNU(2).\n     * This specifies the treatment of long file names (names >= TarConstants.NAMELEN).\n     * Default is LONGFILE_ERROR.\n     * @param longFileMode the mode to use\n     */\n    public void setLongFileMode(int longFileMode) {\n        this.longFileMode = longFileMode;\n    }\n\n\n    @Deprecated\n    @Override\n    public int getCount() {\n        return (int) getBytesWritten();\n    }\n\n",
    "label": "clean",
    "id": "464ee78e-d713-4e2b-931c-cfdb560343e9"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "33",
    "file": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "snippet": "    /**********************************************************\n     */\n\n    @Override\n    public String[] findSerializationPropertyOrder(AnnotatedClass ac) {\n        JsonPropertyOrder order = _findAnnotation(ac, JsonPropertyOrder.class);\n        return (order == null) ? null : order.value();\n    }\n\n    @Override\n    public Boolean findSerializationSortAlphabetically(Annotated ann) {\n        return _findSortAlpha(ann);\n    }\n\n    private final Boolean _findSortAlpha(Annotated ann) {\n        JsonPropertyOrder order = _findAnnotation(ann, JsonPropertyOrder.class);\n        /* 23-Jun-2015, tatu: as per [databind#840], let's only consider\n         *  `true` to have any significance.\n         */\n        if ((order != null) && order.alphabetic()) {\n            return Boolean.TRUE;\n        }\n        return null;\n    }\n\n    @Override\n    public void findAndAddVirtualProperties(MapperConfig<?> config, AnnotatedClass ac,\n            List<BeanPropertyWriter> properties) {\n        JsonAppend ann = _findAnnotation(ac, JsonAppend.class);\n        if (ann == null) {\n            return;\n        }\n        final boolean prepend = ann.prepend();\n        JavaType propType = null;\n\n        // First: any attribute-backed properties?\n        JsonAppend.Attr[] attrs = ann.attrs();\n        for (int i = 0, len = attrs.length; i < len; ++i) {\n            if (propType == null) {\n                propType = config.constructType(Object.class);\n            }\n            BeanPropertyWriter bpw = _constructVirtualProperty(attrs[i],\n                    config, ac, propType);\n            if (prepend) {\n                properties.add(i, bpw);\n            } else {\n                properties.add(bpw);\n            }\n        }\n\n        // Then: general-purpose virtual properties?\n        JsonAppend.Prop[] props = ann.props();\n        for (int i = 0, len = props.length; i < len; ++i) {\n            BeanPropertyWriter bpw = _constructVirtualProperty(props[i],\n                    config, ac);\n            if (prepend) {\n                properties.add(i, bpw);\n            } else {\n                properties.add(bpw);\n            }\n        }\n    }\n\n    protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Attr attr,\n            MapperConfig<?> config, AnnotatedClass ac, JavaType type)\n    {\n        PropertyMetadata metadata = attr.required() ?\n                    PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;\n        // could add Index, Description in future, if those matter\n        String attrName = attr.value();\n\n        // allow explicit renaming; if none, default to attribute name\n        PropertyName propName = _propertyName(attr.propName(), attr.propNamespace());\n        if (!propName.hasSimpleName()) {\n            propName = PropertyName.construct(attrName);\n        }\n        // now, then, we need a placeholder for member (no real Field/Method):\n        AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(),\n                attrName, type.getRawClass());\n        // and with that and property definition\n        SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config,\n                member, propName, metadata, attr.include());\n        // can construct the property writer\n        return AttributePropertyWriter.construct(attrName, propDef,\n                ac.getAnnotations(), type);\n    }\n\n    protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Prop prop,\n            MapperConfig<?> config, AnnotatedClass ac)\n    {\n        PropertyMetadata metadata = prop.required() ?\n                    PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;\n        PropertyName propName = _propertyName(prop.name(), prop.namespace());\n        JavaType type = config.constructType(prop.type());\n        // now, then, we need a placeholder for member (no real Field/Method):\n        AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(),\n                propName.getSimpleName(), type.getRawClass());\n        // and with that and property definition\n        SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config,\n                member, propName, metadata, prop.include());\n\n        Class<?> implClass = prop.value();\n\n        HandlerInstantiator hi = config.getHandlerInstantiator();\n        VirtualBeanPropertyWriter bpw = (hi == null) ? null\n                : hi.virtualPropertyWriterInstance(config, implClass);\n        if (bpw == null) {\n            bpw = (VirtualBeanPropertyWriter) ClassUtil.createInstance(implClass,\n                    config.canOverrideAccessModifiers());\n        }\n\n        // one more thing: give it necessary contextual information\n        return bpw.withConfig(config, ac, propDef, type);\n    }\n\n    /*\n    /**********************************************************\n    /* Serialization: property annotations\n    /**********************************************************\n     */\n\n    @Override\n    public PropertyName findNameForSerialization(Annotated a)\n    {\n        String name = null;\n\n        JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n        if (jg != null) {\n            name = jg.value();\n        } else {\n            JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n            if (pann != null) {\n                name = pann.value();\n                /* 22-Apr-2014, tatu: Should figure out a better way to do this, but\n                 *   it's actually bit tricky to do it more efficiently (meta-annotations\n                 *   add more lookups; AnnotationMap costs etc)\n                 */\n            } else if (_hasAnnotation(a, JsonSerialize.class)\n                    || _hasAnnotation(a, JsonView.class)\n                    || _hasAnnotation(a, JsonRawValue.class)) {\n                name = \"\";\n            } else {\n                return null;\n            }\n        }\n",
    "label": "buggy",
    "id": "03ec0d1e-ae37-4824-98de-31ed575d4005"
  },
  {
    "project": "Jsoup",
    "bug_id": "88",
    "file": "org/jsoup/nodes/Attribute.java",
    "snippet": "    /**\n     Get the attribute value.\n     @return the attribute value\n     */\n    public String getValue() {\n        return Attributes.checkNotNull(val);\n    }\n\n    /**\n     Set the attribute value.\n     @param val the new attribute value; must not be null\n",
    "label": "clean",
    "id": "4c5dad7f-7506-4b4d-95b9-c308dbe7c4e2"
  },
  {
    "project": "Cli",
    "bug_id": "39",
    "file": "org/apache/commons/cli/TypeHandler.java",
    "snippet": "/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.cli;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\nimport java.util.Date;\n\n/**\n * This is a temporary implementation. TypeHandler will handle the\n * pluggableness of OptionTypes and it will direct all of these types\n * of conversion functionalities to ConvertUtils component in Commons\n * already. BeanUtils I think.\n *\n * @version $Id$\n */\npublic class TypeHandler\n{\n    /**\n     * Returns the <code>Object</code> of type <code>obj</code>\n     * with the value of <code>str</code>.\n     *\n     * @param str the command line value\n     * @param obj the type of argument\n     * @return The instance of <code>obj</code> initialised with\n     * the value of <code>str</code>.\n     * @throws ParseException if the value creation for the given object type failed\n     */\n    public static Object createValue(final String str, final Object obj) throws ParseException\n    {\n        return createValue(str, (Class<?>) obj);\n    }\n\n    /**\n     * Returns the <code>Object</code> of type <code>clazz</code>\n     * with the value of <code>str</code>.\n     *\n     * @param str the command line value\n     * @param clazz the type of argument\n     * @return The instance of <code>clazz</code> initialised with\n     * the value of <code>str</code>.\n     * @throws ParseException if the value creation for the given class failed\n     */\n    public static Object createValue(final String str, final Class<?> clazz) throws ParseException\n    {\n        if (PatternOptionBuilder.STRING_VALUE == clazz)\n        {\n            return str;\n        }\n        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n        {\n            return createObject(str);\n        }\n        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n        {\n            return createNumber(str);\n        }\n        else if (PatternOptionBuilder.DATE_VALUE == clazz)\n        {\n            return createDate(str);\n        }\n        else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n        {\n            return createClass(str);\n        }\n        else if (PatternOptionBuilder.FILE_VALUE == clazz)\n        {\n            return createFile(str);\n        }\n        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n        {\n            return createFile(str);\n        }\n        else if (PatternOptionBuilder.FILES_VALUE == clazz)\n        {\n            return createFiles(str);\n        }\n",
    "label": "buggy",
    "id": "9dfca7f1-f6af-4c1d-83e0-d3a28de2614c"
  },
  {
    "project": "Collections",
    "bug_id": "20",
    "file": "org/apache/commons/collections/list/TreeList.java",
    "snippet": "        /**\n         * Checks the modification count of the list is the value that this\n         * object expects.\n         *\n         * @throws ConcurrentModificationException If the list's modification\n         * count isn't the value that was expected.\n         */\n        protected void checkModCount() {\n            if (parent.modCount != expectedModCount) {\n                throw new ConcurrentModificationException();\n            }\n        }\n\n        public boolean hasNext() {\n            return nextIndex < parent.size();\n        }\n\n        public E next() {\n            checkModCount();\n            if (!hasNext()) {\n                throw new NoSuchElementException(\"No element at index \" + nextIndex + \".\");\n            }\n            if (next == null) {\n                next = parent.root.get(nextIndex);\n            }\n            final E value = next.getValue();\n            current = next;\n            currentIndex = nextIndex++;\n            next = next.next();\n            return value;\n        }\n\n        public boolean hasPrevious() {\n            return nextIndex > 0;\n        }\n\n        public E previous() {\n            checkModCount();\n            if (!hasPrevious()) {\n                throw new NoSuchElementException(\"Already at start of list.\");\n            }\n            if (next == null) {\n                next = parent.root.get(nextIndex - 1);\n            } else {\n                next = next.previous();\n            }\n            final E value = next.getValue();\n            current = next;\n            currentIndex = --nextIndex;\n            return value;\n        }\n\n        public int nextIndex() {\n            return nextIndex;\n        }\n\n        public int previousIndex() {\n            return nextIndex() - 1;\n        }\n\n        public void remove() {\n            checkModCount();\n            if (currentIndex == -1) {\n                throw new IllegalStateException();\n            }\n            if (nextIndex == currentIndex) {\n                next = next.next();\n                parent.remove(currentIndex);\n            } else {\n                // remove() following next()\n                parent.remove(currentIndex);\n",
    "label": "buggy",
    "id": "99a2cb39-f283-44c4-9d0f-90b93eaa3127"
  },
  {
    "project": "Math",
    "bug_id": "13",
    "file": "org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java",
    "snippet": "    /**\n     * Computes the square-root of the weight matrix.\n     *\n     * @param m Symmetric, positive-definite (weight) matrix.\n     * @return the square-root of the weight matrix.\n     */\n    private RealMatrix squareRoot(RealMatrix m) {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n    }\n}\n",
    "label": "buggy",
    "id": "3efcb290-1e28-491a-9cd4-de9019c46a1d"
  },
  {
    "project": "Math",
    "bug_id": "12",
    "file": "org/apache/commons/math3/random/BitsStreamGenerator.java",
    "snippet": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.random;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math3.exception.NotStrictlyPositiveException;\nimport org.apache.commons.math3.util.FastMath;\n\n/** Base class for random number generators that generates bits streams.\n",
    "label": "clean",
    "id": "36acbc50-4ee6-4d6d-b33b-a77a13c21bb9"
  },
  {
    "project": "Collections",
    "bug_id": "12",
    "file": "org/apache/commons/collections/ExtendedProperties.java",
    "snippet": "    /**\n     * Combines an existing Hashtable with this Hashtable.\n     * <p>\n     * Warning: It will overwrite previous entries without warning.\n     *\n     * @param props  the properties to combine\n     */\n    public void combine(ExtendedProperties props) {\n        for (Iterator it = props.getKeys(); it.hasNext();) {\n            String key = (String) it.next();\n            clearProperty(key);\n            addPropertyDirect(key, props.get(key));\n        }\n    }\n    \n    /**\n",
    "label": "clean",
    "id": "b21d6341-641e-4e13-aaba-92ff2e6ea826"
  },
  {
    "project": "Closure",
    "bug_id": "164",
    "file": "com/google/javascript/rhino/jstype/ArrowType.java",
    "snippet": "/**\n * The arrow type is an internal type that models the functional arrow type\n * seen in typical functional programming languages.  It is used soley for\n * separating the management of the arrow type from the complex\n * {@link FunctionType} that models JavaScript's notion of functions.\n */\nfinal class ArrowType extends JSType {\n  private static final long serialVersionUID = 1L;\n\n  final Node parameters;\n  JSType returnType;\n\n  // Whether the return type is inferred.\n  final boolean returnTypeInferred;\n\n  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType) {\n    this(registry, parameters, returnType, false);\n  }\n\n  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType, boolean returnTypeInferred) {\n    super(registry);\n\n    this.parameters = parameters == null ?\n        registry.createParametersWithVarArgs(getNativeType(UNKNOWN_TYPE)) :\n        parameters;\n    this.returnType = returnType == null ?\n        getNativeType(UNKNOWN_TYPE) : returnType;\n    this.returnTypeInferred = returnTypeInferred;\n  }\n\n  @Override\n  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    //\n    // In theory, the \"required-ness\" should work in the other direction as\n    // well. In other words, if we have\n    //\n    // function f(number, number) {}\n    // function g(number) {}\n    //\n    // Then f *should* not be a subtype of g, and g *should* not be\n    // a subtype of f. But in practice, we do not implement it this way.\n    // We want to support the use case where you can pass g where f is\n    // expected, and pretend that g ignores the second argument.\n    // That way, you can have a single \"no-op\" function, and you don't have\n    // to create a new no-op function for every possible type signature.\n    //\n    // So, in this case, g < f, but f !< g\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n      if (thisParamType != null) {\n        if (thatParamType == null ||\n            !thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n\n      boolean thisIsVarArgs = thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n      boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();\n      boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();\n\n      // \"that\" can't be a supertype, because it's missing a required argument.\n      if (!thisIsOptional && thatIsOptional) {\n        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n",
    "label": "clean",
    "id": "05a0beee-16c2-4b3d-9a83-f24bc09b4c95"
  },
  {
    "project": "Math",
    "bug_id": "66",
    "file": "org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
    "snippet": "    /**\n     * Construct a solver.\n     */\n    public BrentOptimizer() {\n        setMaxEvaluations(Integer.MAX_VALUE);\n        setMaximalIterationCount(100);\n        setAbsoluteAccuracy(1E-10);\n        setRelativeAccuracy(1.0e-14);\n    }\n\n",
    "label": "buggy",
    "id": "60eea735-e81e-4c48-827a-be07f393fdb5"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "67",
    "file": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "snippet": "    /**\n     * Convenience method for creating a new factory instance with additional\n     * {@link ValueInstantiators}.\n     */\n    @Override\n    public final DeserializerFactory withValueInstantiators(ValueInstantiators instantiators) {\n        return withConfig(_factoryConfig.withValueInstantiators(instantiators));\n    }\n\n    /*\n    /**********************************************************\n    /* DeserializerFactory impl (partial): type mappings\n    /**********************************************************\n     */\n\n    @Override\n    public JavaType mapAbstractType(DeserializationConfig config, JavaType type) throws JsonMappingException\n    {\n        // first, general mappings\n        while (true) {\n            JavaType next = _mapAbstractType2(config, type);\n            if (next == null) {\n                return type;\n            }\n            // Should not have to worry about cycles; but better verify since they will invariably occur... :-)\n            // (also: guard against invalid resolution to a non-related type)\n            Class<?> prevCls = type.getRawClass();\n            Class<?> nextCls = next.getRawClass();\n            if ((prevCls == nextCls) || !prevCls.isAssignableFrom(nextCls)) {\n                throw new IllegalArgumentException(\"Invalid abstract type resolution from \"+type+\" to \"+next+\": latter is not a subtype of former\");\n            }\n            type = next;\n        }\n    }\n\n    /**\n     * Method that will find abstract type mapping for specified type, doing a single\n     * lookup through registered abstract type resolvers; will not do recursive lookups.\n     */\n    private JavaType _mapAbstractType2(DeserializationConfig config, JavaType type)\n        throws JsonMappingException\n    {\n        Class<?> currClass = type.getRawClass();\n        if (_factoryConfig.hasAbstractTypeResolvers()) {\n            for (AbstractTypeResolver resolver : _factoryConfig.abstractTypeResolvers()) {\n                JavaType concrete = resolver.findTypeMapping(config, type);\n                if (concrete != null && concrete.getRawClass() != currClass) {\n                    return concrete;\n                }\n            }\n        }\n        return null;\n    }\n    \n    /*\n    /**********************************************************\n    /* JsonDeserializerFactory impl (partial): ValueInstantiators\n    /**********************************************************\n     */\n\n    /**\n     * Value instantiator is created both based on creator annotations,\n     * and on optional externally provided instantiators (registered through\n     * module interface).\n     */\n    @Override\n    public ValueInstantiator findValueInstantiator(DeserializationContext ctxt,\n            BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config = ctxt.getConfig();\n\n        ValueInstantiator instantiator = null;\n        // [JACKSON-633] Check @JsonValueInstantiator before anything else\n        AnnotatedClass ac = beanDesc.getClassInfo();\n        Object instDef = ctxt.getAnnotationIntrospector().findValueInstantiator(ac);\n        if (instDef != null) {\n            instantiator = _valueInstantiatorInstance(config, ac, instDef);\n        }\n        if (instantiator == null) {\n            /* Second: see if some of standard Jackson/JDK types might provide value\n             * instantiators.\n             */\n            instantiator = _findStdValueInstantiator(config, beanDesc);\n            if (instantiator == null) {\n                instantiator = _constructDefaultValueInstantiator(ctxt, beanDesc);\n            }\n        }\n        \n        // finally: anyone want to modify ValueInstantiator?\n        if (_factoryConfig.hasValueInstantiators()) {\n            for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n                instantiator = insts.findValueInstantiator(config, beanDesc, instantiator);\n                // let's do sanity check; easier to spot buggy handlers\n                if (instantiator == null) {\n\t\t    ctxt.reportMappingException(\n\t\t\t\t\t\t\"Broken registered ValueInstantiators (of type %s): returned null ValueInstantiator\",\n\t\t\t\t\t\tinsts.getClass().getName());\n                }\n            }\n        }\n\n        // Sanity check: does the chosen instantatior have incomplete creators?\n        if (instantiator.getIncompleteParameter() != null) {\n            final AnnotatedParameter nonAnnotatedParam = instantiator.getIncompleteParameter();\n            final AnnotatedWithParams ctor = nonAnnotatedParam.getOwner();\n            throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()+\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n        }\n\n        return instantiator;\n    }\n\n    private ValueInstantiator _findStdValueInstantiator(DeserializationConfig config,\n            BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        if (beanDesc.getBeanClass() == JsonLocation.class) {\n            return new JsonLocationInstantiator();\n        }\n        return null;\n    }\n\n    /**\n     * Method that will construct standard default {@link ValueInstantiator}\n     * using annotations (like @JsonCreator) and visibility rules\n     */\n    protected ValueInstantiator _constructDefaultValueInstantiator(DeserializationContext ctxt,\n            BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        CreatorCollector creators =  new CreatorCollector(beanDesc, ctxt.getConfig());\n        AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n        \n        // need to construct suitable visibility checker:\n        final DeserializationConfig config = ctxt.getConfig();\n        VisibilityChecker<?> vchecker = config.getDefaultVisibilityChecker();\n        vchecker = intr.findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n\n        /* 24-Sep-2014, tatu: Tricky part first; need to merge resolved property information\n         *  (which has creator parameters sprinkled around) with actual creator\n         *  declarations (which are needed to access creator annotation, amongst other things).\n         *  Easiest to combine that info first, then pass it to remaining processing.\n         */\n        /* 15-Mar-2015, tatu: Alas, this won't help with constructors that only have implicit\n         *   names. Those will need to be resolved later on.\n         */\n        Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorDefs = _findCreatorsFromProperties(ctxt,\n                beanDesc);\n\n        /* Important: first add factory methods; then constructors, so\n         * latter can override former!\n         */\n        _addDeserializerFactoryMethods(ctxt, beanDesc, vchecker, intr, creators, creatorDefs);\n        // constructors only usable on concrete types:\n        if (beanDesc.getType().isConcrete()) {\n            _addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators, creatorDefs);\n        }\n        return creators.constructValueInstantiator(config);\n    }\n\n    protected Map<AnnotatedWithParams,BeanPropertyDefinition[]> _findCreatorsFromProperties(DeserializationContext ctxt,\n            BeanDescription beanDesc) throws JsonMappingException\n    {\n        Map<AnnotatedWithParams,BeanPropertyDefinition[]> result = Collections.emptyMap();\n        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n            Iterator<AnnotatedParameter> it = propDef.getConstructorParameters();\n            while (it.hasNext()) {\n                AnnotatedParameter param = it.next();\n                AnnotatedWithParams owner = param.getOwner();\n                BeanPropertyDefinition[] defs = result.get(owner);\n                final int index = param.getIndex();\n                \n                if (defs == null) {\n                    if (result.isEmpty()) { // since emptyMap is immutable need to create a 'real' one\n                        result = new LinkedHashMap<AnnotatedWithParams,BeanPropertyDefinition[]>();\n                    }\n                    defs = new BeanPropertyDefinition[owner.getParameterCount()];\n                    result.put(owner, defs);\n                } else {\n                    if (defs[index] != null) {\n                        throw new IllegalStateException(\"Conflict: parameter #\"+index+\" of \"+owner\n                                +\" bound to more than one property; \"+defs[index]+\" vs \"+propDef);\n                    }\n                }\n                defs[index] = propDef;\n            }\n        }\n        return result;\n    }\n    \n    public ValueInstantiator _valueInstantiatorInstance(DeserializationConfig config,\n            Annotated annotated, Object instDef)\n        throws JsonMappingException\n    {\n        if (instDef == null) {\n            return null;\n        }\n\n        ValueInstantiator inst;\n        \n        if (instDef instanceof ValueInstantiator) {\n            return (ValueInstantiator) instDef;\n        }\n        if (!(instDef instanceof Class)) {\n            throw new IllegalStateException(\"AnnotationIntrospector returned key deserializer definition of type \"\n                    +instDef.getClass().getName()\n                    +\"; expected type KeyDeserializer or Class<KeyDeserializer> instead\");\n        }\n        Class<?> instClass = (Class<?>)instDef;\n        if (ClassUtil.isBogusClass(instClass)) {\n            return null;\n        }\n        if (!ValueInstantiator.class.isAssignableFrom(instClass)) {\n            throw new IllegalStateException(\"AnnotationIntrospector returned Class \"+instClass.getName()\n                    +\"; expected Class<ValueInstantiator>\");\n        }\n        HandlerInstantiator hi = config.getHandlerInstantiator();\n        if (hi != null) {\n            inst = hi.valueInstantiatorInstance(config, annotated, instClass);\n            if (inst != null) {\n                return inst;\n            }\n        }\n        return (ValueInstantiator) ClassUtil.createInstance(instClass,\n                config.canOverrideAccessModifiers());\n    }\n\n    protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators,\n         Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorParams)\n        throws JsonMappingException\n    {\n        // First things first: the \"default constructor\" (zero-arg\n        // constructor; whether implicit or explicit) is NOT included\n        // in list of constructors, so needs to be handled separately.\n        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n        if (defaultCtor != null) {\n            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n                creators.setDefaultCreator(defaultCtor);\n            }\n        }\n\n        // may need to keep track for [#725]\n        List<AnnotatedConstructor> implicitCtors = null;\n        for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n            final boolean isCreator = intr.hasCreatorAnnotation(ctor);\n            BeanPropertyDefinition[] propDefs = creatorParams.get(ctor);\n            final int argCount = ctor.getParameterCount();\n\n            // some single-arg factory methods (String, number) are auto-detected\n            if (argCount == 1) {\n                BeanPropertyDefinition argDef = (propDefs == null) ? null : propDefs[0];\n                boolean useProps = _checkIfCreatorPropertyBased(intr, ctor, argDef);\n\n                if (useProps) {\n                    SettableBeanProperty[] properties = new SettableBeanProperty[1];\n                    PropertyName name = (argDef == null) ? null : argDef.getFullName();\n                    AnnotatedParameter arg = ctor.getParameter(0);\n                    properties[0] = constructCreatorProperty(ctxt, beanDesc, name, 0, arg,\n                            intr.findInjectableValueId(arg));\n                    creators.addPropertyCreator(ctor, isCreator, properties);\n                } else {\n                    /*boolean added = */ _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                            ctor, isCreator,\n                            vchecker.isCreatorVisible(ctor));\n                    // one more thing: sever link to creator property, to avoid possible later\n                    // problems with \"unresolved\" constructor property\n                    if (argDef != null) {\n                        ((POJOPropertyBuilder) argDef).removeConstructors();\n                    }\n                }\n                // regardless, fully handled\n                continue;\n            }\n\n            // 2 or more args; all params must have names or be injectable\n            // 14-Mar-2015, tatu (2.6): Or, as per [#725], implicit names will also\n            //   do, with some constraints. But that will require bit post processing...\n\n            AnnotatedParameter nonAnnotatedParam = null;\n            SettableBeanProperty[] properties = new SettableBeanProperty[argCount];\n            int explicitNameCount = 0;\n            int implicitWithCreatorCount = 0;\n            int injectCount = 0;\n\n            for (int i = 0; i < argCount; ++i) {\n                final AnnotatedParameter param = ctor.getParameter(i);\n                BeanPropertyDefinition propDef = (propDefs == null) ? null : propDefs[i];\n                Object injectId = intr.findInjectableValueId(param);\n                final PropertyName name = (propDef == null) ? null : propDef.getFullName();\n\n                if (propDef != null && propDef.isExplicitlyNamed()) {\n                    ++explicitNameCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                    continue;\n                }\n                if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                    continue;\n                }\n                NameTransformer unwrapper = intr.findUnwrappingNameTransformer(param);\n                if (unwrapper != null) {\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                    ++explicitNameCount;\n                    continue;\n                }\n                // One more thing: implicit names are ok iff ctor has creator annotation\n                if (isCreator && (name != null && !name.isEmpty())) {\n                    ++implicitWithCreatorCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                    continue;\n                }\n                if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n\n            final int namedCount = explicitNameCount + implicitWithCreatorCount;\n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || (explicitNameCount > 0) || (injectCount > 0)) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(ctor, isCreator, properties);\n                    continue;\n                }\n                if ((explicitNameCount == 0) && ((injectCount + 1) == argCount)) {\n                    // Secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(ctor, isCreator, properties);\n                    continue;\n                }\n                // otherwise, epic fail?\n                // 16-Mar-2015, tatu: due to [#725], need to be more permissive. For now let's\n                //    only report problem if there's no implicit name\n                PropertyName impl = _findImplicitParamName(nonAnnotatedParam, intr);\n                if (impl == null || impl.isEmpty()) {\n                    // Let's consider non-static inner class as a special case...\n                    int ix = nonAnnotatedParam.getIndex();\n                    if ((ix == 0) && ClassUtil.isNonStaticInnerClass(ctor.getDeclaringClass())) {\n                        throw new IllegalArgumentException(\"Non-static inner classes like \"\n                                +ctor.getDeclaringClass().getName()+\" can not use @JsonCreator for constructors\");\n                    }\n                    throw new IllegalArgumentException(\"Argument #\"+ix\n                            +\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n                }\n            }\n            // [#725]: as a fallback, all-implicit names may work as well\n            if (!creators.hasDefaultCreator()) {\n                if (implicitCtors == null) {\n                    implicitCtors = new LinkedList<AnnotatedConstructor>();\n                }\n                implicitCtors.add(ctor);\n            }\n        }\n        // last option, as per [#725]: consider implicit-names-only, visible constructor,\n        // if just one found\n        if ((implicitCtors != null) && !creators.hasDelegatingCreator()\n                && !creators.hasPropertyBasedCreator()) {\n            _checkImplicitlyNamedConstructors(ctxt, beanDesc, vchecker, intr,\n                    creators, implicitCtors);\n        }\n    }\n\n    protected void _checkImplicitlyNamedConstructors(DeserializationContext ctxt,\n            BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n            AnnotationIntrospector intr, CreatorCollector creators,\n            List<AnnotatedConstructor> implicitCtors) throws JsonMappingException\n    {\n        AnnotatedConstructor found = null;\n        SettableBeanProperty[] foundProps = null;\n\n        // Further checks: (a) must have names for all parameters, (b) only one visible\n        // Also, since earlier matching of properties and creators relied on existence of\n        // `@JsonCreator` (or equivalent) annotation, we need to do bit more re-inspection...\n\n        main_loop:\n        for (AnnotatedConstructor ctor : implicitCtors) {\n            if (!vchecker.isCreatorVisible(ctor)) {\n                continue;\n            }\n            // as per earlier notes, only end up here if no properties associated with creator\n            final int argCount = ctor.getParameterCount();\n            SettableBeanProperty[] properties = new SettableBeanProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                final AnnotatedParameter param = ctor.getParameter(i);\n                final PropertyName name = _findParamName(param, intr);\n\n                // must have name (implicit fine)\n                if (name == null || name.isEmpty()) {\n                    continue main_loop;\n                }\n                properties[i] = constructCreatorProperty(ctxt, beanDesc, name, param.getIndex(),\n                        param, /*injectId*/ null);\n            }\n            if (found != null) { // only one allowed\n                found = null;\n                break;\n            }\n            found = ctor;\n            foundProps = properties;\n        }\n        // found one and only one visible? Ship it!\n        if (found != null) {\n            creators.addPropertyCreator(found, /*isCreator*/ false, foundProps);\n            BasicBeanDescription bbd = (BasicBeanDescription) beanDesc;\n            // Also: add properties, to keep error messages complete wrt known properties...\n            for (SettableBeanProperty prop : foundProps) {\n                PropertyName pn = prop.getFullName();\n                if (!bbd.hasProperty(pn)) {\n                    BeanPropertyDefinition newDef = SimpleBeanPropertyDefinition.construct(\n                            ctxt.getConfig(), prop.getMember(), pn);\n                    bbd.addProperty(newDef);\n                }\n            }\n        }\n    }\n\n    protected boolean _checkIfCreatorPropertyBased(AnnotationIntrospector intr,\n            AnnotatedWithParams creator, BeanPropertyDefinition propDef)\n    {\n        JsonCreator.Mode mode = intr.findCreatorBinding(creator);\n\n        if (mode == JsonCreator.Mode.PROPERTIES) {\n            return true;\n        }\n        if (mode == JsonCreator.Mode.DELEGATING) {\n            return false;\n        }\n        // If explicit name, or inject id, property-based\n        if (((propDef != null) && propDef.isExplicitlyNamed())\n                || (intr.findInjectableValueId(creator.getParameter(0)) != null)) {\n            return true;\n        }\n        if (propDef != null) {\n            // One more thing: if implicit name matches property with a getter\n            // or field, we'll consider it property-based as well\n            String implName = propDef.getName();\n            if (implName != null && !implName.isEmpty()) {\n                if (propDef.couldSerialize()) {\n                    return true;\n                }\n            }\n        }\n        // in absence of everything else, default to delegating\n        return false;\n    }\n    \n    protected boolean _handleSingleArgumentConstructor(DeserializationContext ctxt,\n            BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n            AnnotationIntrospector intr, CreatorCollector creators,\n            AnnotatedConstructor ctor, boolean isCreator, boolean isVisible)\n        throws JsonMappingException\n    {\n        // otherwise either 'simple' number, String, or general delegate:\n        Class<?> type = ctor.getRawParameterType(0);\n        if (type == String.class || type == CharSequence.class) {\n            if (isCreator || isVisible) {\n                creators.addStringCreator(ctor, isCreator);\n            }\n            return true;\n        }\n        if (type == int.class || type == Integer.class) {\n            if (isCreator || isVisible) {\n                creators.addIntCreator(ctor, isCreator);\n            }\n            return true;\n        }\n        if (type == long.class || type == Long.class) {\n            if (isCreator || isVisible) {\n                creators.addLongCreator(ctor, isCreator);\n            }\n            return true;\n        }\n        if (type == double.class || type == Double.class) {\n            if (isCreator || isVisible) {\n                creators.addDoubleCreator(ctor, isCreator);\n            }\n            return true;\n        }\n        if (type == boolean.class || type == Boolean.class) {\n            if (isCreator || isVisible) {\n                creators.addBooleanCreator(ctor, isCreator);\n            }\n            return true;\n        }\n        // Delegating Creator ok iff it has @JsonCreator (etc)\n        if (isCreator) {\n            creators.addDelegatingCreator(ctor, isCreator, null);\n            return true;\n        }\n        return false;\n    }\n\n    protected void _addDeserializerFactoryMethods\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators,\n         Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorParams)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config = ctxt.getConfig();\n        for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) {\n            final boolean isCreator = intr.hasCreatorAnnotation(factory);\n            final int argCount = factory.getParameterCount();\n            // zero-arg methods must be annotated; if so, are \"default creators\" [JACKSON-850]\n            if (argCount == 0) {\n                if (isCreator) {\n                    creators.setDefaultCreator(factory);\n                }\n                continue;\n            }\n\n            final BeanPropertyDefinition[] propDefs = creatorParams.get(factory);\n            // some single-arg factory methods (String, number) are auto-detected\n            if (argCount == 1) {\n                BeanPropertyDefinition argDef = (propDefs == null) ? null : propDefs[0];\n                boolean useProps = _checkIfCreatorPropertyBased(intr, factory, argDef);\n                if (!useProps) { // not property based but delegating\n                    /*boolean added=*/ _handleSingleArgumentFactory(config, beanDesc, vchecker, intr, creators,\n                            factory, isCreator);\n                    // 23-Sep-2016, tatu: [databind#1383]: Need to also sever link to avoid possible\n                    //    later problems with \"unresolved\" constructor property\n                    if (argDef != null) {\n                        ((POJOPropertyBuilder) argDef).removeConstructors();\n                    }\n                    continue;\n                }\n                // fall through if there's name\n            } else {\n                // more than 2 args, must have @JsonCreator\n                if (!isCreator) {\n                    continue;\n                }\n            }\n            // 1 or more args; all params must have name annotations\n            AnnotatedParameter nonAnnotatedParam = null;            \n            SettableBeanProperty[] properties = new SettableBeanProperty[argCount];\n            int implicitNameCount = 0;\n            int explicitNameCount = 0;\n            int injectCount = 0;\n            \n            for (int i = 0; i < argCount; ++i) {\n                final AnnotatedParameter param = factory.getParameter(i);\n                BeanPropertyDefinition propDef = (propDefs == null) ? null : propDefs[i];\n                Object injectId = intr.findInjectableValueId(param);\n                final PropertyName name = (propDef == null) ? null : propDef.getFullName();\n\n                if (propDef != null && propDef.isExplicitlyNamed()) {\n                    ++explicitNameCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                    continue;\n                }\n                if (injectId != null) {\n                    ++injectCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                    continue;\n                }\n                NameTransformer unwrapper = intr.findUnwrappingNameTransformer(param);\n                if (unwrapper != null) {\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                    ++implicitNameCount;\n                    continue;\n                }\n                // One more thing: implicit names are ok iff ctor has creator annotation\n                if (isCreator) {\n                    if (name != null && !name.isEmpty()) {\n                        ++implicitNameCount;\n                        properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                        continue;\n                    }\n                }\n                /* 25-Sep-2014, tatu: Actually, we may end up \"losing\" naming due to higher-priority constructor\n                 *  (see TestCreators#testConstructorCreator() test). And just to avoid running into that problem,\n                 *  let's add one more work around\n                 */\n                /*\n                PropertyName name2 = _findExplicitParamName(param, intr);\n                if (name2 != null && !name2.isEmpty()) {\n                    // Hmmh. Ok, fine. So what are we to do with it... ?\n                    // For now... skip. May need to revisit this, should this become problematic\n                    continue main_loop;\n                }\n                */\n                if (nonAnnotatedParam == null) {\n                    nonAnnotatedParam = param;\n                }\n            }\n            final int namedCount = explicitNameCount + implicitNameCount;\n            \n            // Ok: if named or injectable, we have more work to do\n            if (isCreator || explicitNameCount > 0 || injectCount > 0) {\n                // simple case; everything covered:\n                if ((namedCount + injectCount) == argCount) {\n                    creators.addPropertyCreator(factory, isCreator, properties);\n                } else if ((explicitNameCount == 0) && ((injectCount + 1) == argCount)) {\n                    // [712] secondary: all but one injectable, one un-annotated (un-named)\n                    creators.addDelegatingCreator(factory, isCreator, properties);\n                } else { // otherwise, epic fail\n                    throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()\n                            +\" of factory method \"+factory+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n                }\n            }\n        }\n    }\n\n    protected boolean _handleSingleArgumentFactory(DeserializationConfig config,\n            BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n            AnnotationIntrospector intr, CreatorCollector creators,\n            AnnotatedMethod factory, boolean isCreator)\n        throws JsonMappingException\n    {\n        Class<?> type = factory.getRawParameterType(0);\n        \n        if (type == String.class || type == CharSequence.class) {\n            if (isCreator || vchecker.isCreatorVisible(factory)) {\n                creators.addStringCreator(factory, isCreator);\n            }\n            return true;\n        }\n        if (type == int.class || type == Integer.class) {\n            if (isCreator || vchecker.isCreatorVisible(factory)) {\n                creators.addIntCreator(factory, isCreator);\n            }\n            return true;\n        }\n        if (type == long.class || type == Long.class) {\n            if (isCreator || vchecker.isCreatorVisible(factory)) {\n                creators.addLongCreator(factory, isCreator);\n            }\n            return true;\n        }\n        if (type == double.class || type == Double.class) {\n            if (isCreator || vchecker.isCreatorVisible(factory)) {\n                creators.addDoubleCreator(factory, isCreator);\n            }\n            return true;\n        }\n        if (type == boolean.class || type == Boolean.class) {\n            if (isCreator || vchecker.isCreatorVisible(factory)) {\n                creators.addBooleanCreator(factory, isCreator);\n            }\n            return true;\n        }\n        if (isCreator) {\n            creators.addDelegatingCreator(factory, isCreator, null);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Method that will construct a property object that represents\n     * a logical property passed via Creator (constructor or static\n     * factory method)\n     */\n    protected SettableBeanProperty constructCreatorProperty(DeserializationContext ctxt,\n            BeanDescription beanDesc, PropertyName name, int index,\n            AnnotatedParameter param,\n            Object injectableValueId)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config = ctxt.getConfig();\n        final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n        PropertyMetadata metadata;\n        {\n            if (intr == null) {\n                metadata = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;\n            } else {\n                Boolean b = intr.hasRequiredMarker(param);\n                boolean req = (b != null && b.booleanValue());\n                String desc = intr.findPropertyDescription(param);\n                Integer idx = intr.findPropertyIndex(param);\n                String def = intr.findPropertyDefaultValue(param);\n                metadata = PropertyMetadata.construct(req, desc, idx, def);\n            }\n        }\n        JavaType type = resolveMemberAndTypeAnnotations(ctxt, param, param.getType());\n        BeanProperty.Std property = new BeanProperty.Std(name, type,\n                intr.findWrapperName(param),\n                beanDesc.getClassAnnotations(), param, metadata);\n        // Type deserializer: either comes from property (and already resolved)\n        TypeDeserializer typeDeser = (TypeDeserializer) type.getTypeHandler();\n        // or if not, based on type being referenced:\n        if (typeDeser == null) {\n            typeDeser = findTypeDeserializer(config, type);\n        }\n        // Note: contextualization of typeDeser _should_ occur in constructor of CreatorProperty\n        // so it is not called directly here\n        SettableBeanProperty prop = new CreatorProperty(name, type, property.getWrapperName(),\n                typeDeser, beanDesc.getClassAnnotations(), param, index, injectableValueId,\n                metadata);\n        JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, param);\n        if (deser == null) {\n            deser = type.getValueHandler();\n        }\n        if (deser != null) {\n            // As per [databind#462] need to ensure we contextualize deserializer before passing it on\n            deser = ctxt.handlePrimaryContextualization(deser, prop, type);\n            prop = prop.withValueDeserializer(deser);\n        }\n        return prop;\n    }\n\n    protected PropertyName _findParamName(AnnotatedParameter param, AnnotationIntrospector intr)\n    {\n        if (param != null && intr != null) {\n            PropertyName name = intr.findNameForDeserialization(param);\n            if (name != null) {\n                return name;\n            }\n            // 14-Apr-2014, tatu: Need to also consider possible implicit name\n            //  (for JDK8, or via paranamer)\n\n            String str = intr.findImplicitPropertyName(param);\n            if (str != null && !str.isEmpty()) {\n                return PropertyName.construct(str);\n            }\n        }\n        return null;\n    }\n\n    protected PropertyName _findImplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)\n    {\n        String str = intr.findImplicitPropertyName(param);\n        if (str != null && !str.isEmpty()) {\n            return PropertyName.construct(str);\n        }\n        return null;\n    }\n\n    @Deprecated // in 2.6, remove from 2.7\n    protected PropertyName _findExplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)\n    {\n        if (param != null && intr != null) {\n            return intr.findNameForDeserialization(param);\n        }\n        return null;\n    }\n\n    @Deprecated // in 2.6, remove from 2.7\n    protected boolean _hasExplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)\n    {\n        if (param != null && intr != null) {\n            PropertyName n = intr.findNameForDeserialization(param);\n            return (n != null) && n.hasSimpleName();\n        }\n        return false;\n    }\n\n    /*\n    /**********************************************************\n    /* JsonDeserializerFactory impl: array deserializers\n    /**********************************************************\n     */\n        \n    @Override\n    public JsonDeserializer<?> createArrayDeserializer(DeserializationContext ctxt,\n            ArrayType type, final BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config = ctxt.getConfig();\n        JavaType elemType = type.getContentType();\n        \n        // Very first thing: is deserializer hard-coded for elements?\n        JsonDeserializer<Object> contentDeser = elemType.getValueHandler();\n        // Then optional type info: if type has been resolved, we may already know type deserializer:\n        TypeDeserializer elemTypeDeser = elemType.getTypeHandler();\n        // but if not, may still be possible to find:\n        if (elemTypeDeser == null) {\n            elemTypeDeser = findTypeDeserializer(config, elemType);\n        }\n        // 23-Nov-2010, tatu: Custom array deserializer?\n        JsonDeserializer<?>  deser = _findCustomArrayDeserializer(type,\n                config, beanDesc, elemTypeDeser, contentDeser);\n        if (deser == null) {\n            if (contentDeser == null) {\n                Class<?> raw = elemType.getRawClass();\n                if (elemType.isPrimitive()) {\n                    return PrimitiveArrayDeserializers.forType(raw);\n                } else if (raw == String.class) {\n                    return StringArrayDeserializer.instance;\n                }\n            }\n            deser = new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n        }\n        // and then new with 2.2: ability to post-process it too (Issue#120)\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deser = mod.modifyArrayDeserializer(config, type, beanDesc, deser);\n            }\n        }\n        return deser;\n    }\n\n    /*\n    /**********************************************************\n    /* JsonDeserializerFactory impl: Collection(-like) deserializers\n    /**********************************************************\n     */\n\n    @Override\n    public JsonDeserializer<?> createCollectionDeserializer(DeserializationContext ctxt,\n            CollectionType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        JavaType contentType = type.getContentType();\n        // Very first thing: is deserializer hard-coded for elements?\n        JsonDeserializer<Object> contentDeser = contentType.getValueHandler();\n        final DeserializationConfig config = ctxt.getConfig();\n\n        // Then optional type info: if type has been resolved, we may already know type deserializer:\n        TypeDeserializer contentTypeDeser = contentType.getTypeHandler();\n        // but if not, may still be possible to find:\n        if (contentTypeDeser == null) {\n            contentTypeDeser = findTypeDeserializer(config, contentType);\n        }\n        // 23-Nov-2010, tatu: Custom deserializer?\n        JsonDeserializer<?> deser = _findCustomCollectionDeserializer(type,\n                config, beanDesc, contentTypeDeser, contentDeser);\n        if (deser == null) {\n            Class<?> collectionClass = type.getRawClass();\n            if (contentDeser == null) { // not defined by annotation\n                // One special type: EnumSet:\n                if (EnumSet.class.isAssignableFrom(collectionClass)) {\n                    deser = new EnumSetDeserializer(contentType, null);\n                }\n            }\n        }\n\n        /* One twist: if we are being asked to instantiate an interface or\n         * abstract Collection, we need to either find something that implements\n         * the thing, or give up.\n         *\n         * Note that we do NOT try to guess based on secondary interfaces\n         * here; that would probably not work correctly since casts would\n         * fail later on (as the primary type is not the interface we'd\n         * be implementing)\n         */\n        if (deser == null) {\n            if (type.isInterface() || type.isAbstract()) {\n                CollectionType implType = _mapAbstractCollectionType(type, config);\n                if (implType == null) {\n                    // [databind#292]: Actually, may be fine, but only if polymorphich deser enabled\n                    if (type.getTypeHandler() == null) {\n                        throw new IllegalArgumentException(\"Can not find a deserializer for non-concrete Collection type \"+type);\n                    }\n                    deser = AbstractDeserializer.constructForNonPOJO(beanDesc);\n                } else {\n                    type = implType;\n                    // But if so, also need to re-check creators...\n                    beanDesc = config.introspectForCreation(type);\n                }\n            }\n            if (deser == null) {\n                ValueInstantiator inst = findValueInstantiator(ctxt, beanDesc);\n                if (!inst.canCreateUsingDefault()) {\n                    // [databind#161]: No default constructor for ArrayBlockingQueue...\n                    if (type.getRawClass() == ArrayBlockingQueue.class) {\n                        return new ArrayBlockingQueueDeserializer(type, contentDeser, contentTypeDeser, inst);\n                    }\n                }\n                // Can use more optimal deserializer if content type is String, so:\n                if (contentType.getRawClass() == String.class) {\n                    // no value type deserializer because Strings are one of natural/native types:\n                    deser = new StringCollectionDeserializer(type, contentDeser, inst);\n                } else {\n                    deser = new CollectionDeserializer(type, contentDeser, contentTypeDeser, inst);\n                }\n            }\n        }\n        // allow post-processing it too\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deser = mod.modifyCollectionDeserializer(config, type, beanDesc, deser);\n            }\n        }\n        return deser;\n    }\n\n    protected CollectionType _mapAbstractCollectionType(JavaType type, DeserializationConfig config)\n    {\n        Class<?> collectionClass = type.getRawClass();\n        collectionClass = _collectionFallbacks.get(collectionClass.getName());\n        if (collectionClass == null) {\n            return null;\n        }\n        return (CollectionType) config.constructSpecializedType(type, collectionClass);\n    }\n    \n    // Copied almost verbatim from \"createCollectionDeserializer\" -- should try to share more code\n    @Override\n    public JsonDeserializer<?> createCollectionLikeDeserializer(DeserializationContext ctxt,\n            CollectionLikeType type, final BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        JavaType contentType = type.getContentType();\n        // Very first thing: is deserializer hard-coded for elements?\n        JsonDeserializer<Object> contentDeser = contentType.getValueHandler();\n        final DeserializationConfig config = ctxt.getConfig();\n\n        // Then optional type info (1.5): if type has been resolved, we may already know type deserializer:\n        TypeDeserializer contentTypeDeser = contentType.getTypeHandler();\n        // but if not, may still be possible to find:\n        if (contentTypeDeser == null) {\n            contentTypeDeser = findTypeDeserializer(config, contentType);\n        }\n        JsonDeserializer<?> deser = _findCustomCollectionLikeDeserializer(type, config, beanDesc,\n                contentTypeDeser, contentDeser);\n        if (deser != null) {\n            // and then new with 2.2: ability to post-process it too (Issue#120)\n            if (_factoryConfig.hasDeserializerModifiers()) {\n                for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                    deser = mod.modifyCollectionLikeDeserializer(config, type, beanDesc, deser);\n                }\n            }\n        }\n        return deser;\n    }\n\n    /*\n    /**********************************************************\n    /* JsonDeserializerFactory impl: Map(-like) deserializers\n    /**********************************************************\n     */\n\n    @Override\n    public JsonDeserializer<?> createMapDeserializer(DeserializationContext ctxt,\n            MapType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config = ctxt.getConfig();\n        JavaType keyType = type.getKeyType();\n        JavaType contentType = type.getContentType();\n        \n        // First: is there annotation-specified deserializer for values?\n        @SuppressWarnings(\"unchecked\")\n        JsonDeserializer<Object> contentDeser = (JsonDeserializer<Object>) contentType.getValueHandler();\n\n        // Ok: need a key deserializer (null indicates 'default' here)\n        KeyDeserializer keyDes = (KeyDeserializer) keyType.getValueHandler();\n        // Then optional type info; either attached to type, or resolved separately:\n        TypeDeserializer contentTypeDeser = contentType.getTypeHandler();\n        // but if not, may still be possible to find:\n        if (contentTypeDeser == null) {\n            contentTypeDeser = findTypeDeserializer(config, contentType);\n        }\n\n        // 23-Nov-2010, tatu: Custom deserializer?\n        JsonDeserializer<?> deser = _findCustomMapDeserializer(type, config, beanDesc,\n                keyDes, contentTypeDeser, contentDeser);\n\n        if (deser == null) {\n            // Value handling is identical for all, but EnumMap requires special handling for keys\n            Class<?> mapClass = type.getRawClass();\n            if (EnumMap.class.isAssignableFrom(mapClass)) {\n                Class<?> kt = keyType.getRawClass();\n                if (kt == null || !kt.isEnum()) {\n                    throw new IllegalArgumentException(\"Can not construct EnumMap; generic (key) type not available\");\n                }\n                deser = new EnumMapDeserializer(type, null, contentDeser, contentTypeDeser);\n            }\n\n            // Otherwise, generic handler works ok.\n    \n            /* But there is one more twist: if we are being asked to instantiate\n             * an interface or abstract Map, we need to either find something\n             * that implements the thing, or give up.\n             *\n             * Note that we do NOT try to guess based on secondary interfaces\n             * here; that would probably not work correctly since casts would\n             * fail later on (as the primary type is not the interface we'd\n             * be implementing)\n             */\n            if (deser == null) {\n                if (type.isInterface() || type.isAbstract()) {\n                    @SuppressWarnings(\"rawtypes\")\n                    Class<? extends Map> fallback = _mapFallbacks.get(mapClass.getName());\n                    if (fallback != null) {\n                        mapClass = fallback;\n                        type = (MapType) config.constructSpecializedType(type, mapClass);\n                        // But if so, also need to re-check creators...\n                        beanDesc = config.introspectForCreation(type);\n                    } else {\n                        // [databind#292]: Actually, may be fine, but only if polymorphic deser enabled\n                        if (type.getTypeHandler() == null) {\n                            throw new IllegalArgumentException(\"Can not find a deserializer for non-concrete Map type \"+type);\n                        }\n                        deser = AbstractDeserializer.constructForNonPOJO(beanDesc);\n                    }\n                }\n                if (deser == null) {\n                    ValueInstantiator inst = findValueInstantiator(ctxt, beanDesc);\n                    // 01-May-2016, tatu: Which base type to use here gets tricky, since\n                    //   most often it ought to be `Map` or `EnumMap`, but due to abstract\n                    //   mapping it will more likely be concrete type like `HashMap`.\n                    //   So, for time being, just pass `Map.class`\n                    MapDeserializer md = new MapDeserializer(type, inst, keyDes, contentDeser, contentTypeDeser);\n                    JsonIgnoreProperties.Value ignorals = config.getDefaultPropertyIgnorals(Map.class,\n                            beanDesc.getClassInfo());\n                    Set<String> ignored = (ignorals == null) ? null\n                            : ignorals.findIgnoredForDeserialization();\n                    md.setIgnorableProperties(ignored);\n                    deser = md;\n                }\n            }\n        }\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deser = mod.modifyMapDeserializer(config, type, beanDesc, deser);\n            }\n        }\n        return deser;\n    }\n\n    // Copied almost verbatim from \"createMapDeserializer\" -- should try to share more code\n    @Override\n    public JsonDeserializer<?> createMapLikeDeserializer(DeserializationContext ctxt,\n            MapLikeType type, final BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        JavaType keyType = type.getKeyType();\n        JavaType contentType = type.getContentType();\n        final DeserializationConfig config = ctxt.getConfig();\n        \n        // First: is there annotation-specified deserializer for values?\n        @SuppressWarnings(\"unchecked\")\n        JsonDeserializer<Object> contentDeser = (JsonDeserializer<Object>) contentType.getValueHandler();\n        \n        // Ok: need a key deserializer (null indicates 'default' here)\n        KeyDeserializer keyDes = (KeyDeserializer) keyType.getValueHandler();\n        /* !!! 24-Jan-2012, tatu: NOTE: impls MUST use resolve() to find key deserializer!\n        if (keyDes == null) {\n            keyDes = p.findKeyDeserializer(config, keyType, property);\n        }\n        */\n        // Then optional type info (1.5); either attached to type, or resolve separately:\n        TypeDeserializer contentTypeDeser = contentType.getTypeHandler();\n        // but if not, may still be possible to find:\n        if (contentTypeDeser == null) {\n            contentTypeDeser = findTypeDeserializer(config, contentType);\n        }\n        JsonDeserializer<?> deser = _findCustomMapLikeDeserializer(type, config,\n                beanDesc, keyDes, contentTypeDeser, contentDeser);\n        if (deser != null) {\n            // and then new with 2.2: ability to post-process it too (Issue#120)\n            if (_factoryConfig.hasDeserializerModifiers()) {\n                for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                    deser = mod.modifyMapLikeDeserializer(config, type, beanDesc, deser);\n                }\n            }\n        }\n        return deser;\n    }\n\n    /*\n    /**********************************************************\n    /* JsonDeserializerFactory impl: other types\n    /**********************************************************\n     */\n    \n    /**\n     * Factory method for constructing serializers of {@link Enum} types.\n     */\n    @Override\n    public JsonDeserializer<?> createEnumDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config = ctxt.getConfig();\n        final Class<?> enumClass = type.getRawClass();\n        // 23-Nov-2010, tatu: Custom deserializer?\n        JsonDeserializer<?> deser = _findCustomEnumDeserializer(enumClass, config, beanDesc);\n\n        if (deser == null) {\n            ValueInstantiator valueInstantiator = _constructDefaultValueInstantiator(ctxt, beanDesc);\n            SettableBeanProperty[] creatorProps = (valueInstantiator == null) ? null\n                    : valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n            // May have @JsonCreator for static factory method:\n            for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) {\n                if (ctxt.getAnnotationIntrospector().hasCreatorAnnotation(factory)) {\n                    if (factory.getParameterCount() == 0) { // [databind#960]\n                        deser = EnumDeserializer.deserializerForNoArgsCreator(config, enumClass, factory);\n                        break;\n                    }\n                    Class<?> returnType = factory.getRawReturnType();\n                    // usually should be class, but may be just plain Enum<?> (for Enum.valueOf()?)\n                    if (returnType.isAssignableFrom(enumClass)) {\n                        deser = EnumDeserializer.deserializerForCreator(config, enumClass, factory, valueInstantiator, creatorProps);\n                        break;\n                    }\n                }\n            }\n           \n            // Need to consider @JsonValue if one found\n            if (deser == null) {\n                deser = new EnumDeserializer(constructEnumResolver(enumClass,\n                        config, beanDesc.findJsonValueMethod()));\n            }\n        }\n\n        // and then post-process it too\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deser = mod.modifyEnumDeserializer(config, type, beanDesc, deser);\n            }\n        }\n        return deser;\n    }\n\n    @Override\n    public JsonDeserializer<?> createTreeDeserializer(DeserializationConfig config,\n            JavaType nodeType, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        @SuppressWarnings(\"unchecked\")\n        Class<? extends JsonNode> nodeClass = (Class<? extends JsonNode>) nodeType.getRawClass();\n        // 23-Nov-2010, tatu: Custom deserializer?\n        JsonDeserializer<?> custom = _findCustomTreeNodeDeserializer(nodeClass, config,\n                beanDesc);\n        if (custom != null) {\n            return custom;\n        }\n        return JsonNodeDeserializer.getDeserializer(nodeClass);\n    }\n\n    @Override\n    public JsonDeserializer<?> createReferenceDeserializer(DeserializationContext ctxt,\n            ReferenceType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        JavaType contentType = type.getContentType();\n        // Very first thing: is deserializer hard-coded for elements?\n        JsonDeserializer<Object> contentDeser = contentType.getValueHandler();\n        final DeserializationConfig config = ctxt.getConfig();\n        // Then optional type info: if type has been resolved, we may already know type deserializer:\n        TypeDeserializer contentTypeDeser = contentType.getTypeHandler();\n        if (contentTypeDeser == null) { // or if not, may be able to find:\n            contentTypeDeser = findTypeDeserializer(config, contentType);\n        }\n        JsonDeserializer<?> deser = _findCustomReferenceDeserializer(type, config, beanDesc,\n                contentTypeDeser, contentDeser);\n\n        if (deser == null) {\n            // Just one referential type as of JDK 1.7 / Java 7: AtomicReference (Java 8 adds Optional)\n            if (AtomicReference.class.isAssignableFrom(type.getRawClass())) {\n                return new AtomicReferenceDeserializer(type, contentTypeDeser, contentDeser);\n            }\n        }\n        if (deser != null) {\n            // and then post-process\n            if (_factoryConfig.hasDeserializerModifiers()) {\n                for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                    deser = mod.modifyReferenceDeserializer(config, type, beanDesc, deser);\n                }\n            }\n        }\n        return deser;\n    }\n\n    /*\n    /**********************************************************\n    /* JsonDeserializerFactory impl (partial): type deserializers\n    /**********************************************************\n     */\n\n    @Override\n    public TypeDeserializer findTypeDeserializer(DeserializationConfig config,\n            JavaType baseType)\n        throws JsonMappingException\n    {\n        BeanDescription bean = config.introspectClassAnnotations(baseType.getRawClass());\n        AnnotatedClass ac = bean.getClassInfo();\n        AnnotationIntrospector ai = config.getAnnotationIntrospector();\n        TypeResolverBuilder<?> b = ai.findTypeResolver(config, ac, baseType);\n\n        /* Ok: if there is no explicit type info handler, we may want to\n         * use a default. If so, config object knows what to use.\n         */\n        Collection<NamedType> subtypes = null;\n        if (b == null) {\n            b = config.getDefaultTyper(baseType);\n            if (b == null) {\n                return null;\n            }\n        } else {\n            subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(config, ac);\n        }\n        // May need to figure out default implementation, if none found yet\n        // (note: check for abstract type is not 100% mandatory, more of an optimization)\n        if ((b.getDefaultImpl() == null) && baseType.isAbstract()) {\n            JavaType defaultType = mapAbstractType(config, baseType);\n            if (defaultType != null && defaultType.getRawClass() != baseType.getRawClass()) {\n                b = b.defaultImpl(defaultType.getRawClass());\n            }\n        }\n        return b.buildTypeDeserializer(config, baseType, subtypes);\n    }\n\n    /**\n     * Overridable method called after checking all other types.\n     * \n     * @since 2.2\n     */\n    protected JsonDeserializer<?> findOptionalStdDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        return OptionalHandlerFactory.instance.findDeserializer(type, ctxt.getConfig(), beanDesc);\n    }\n    \n    /*\n    /**********************************************************\n    /* JsonDeserializerFactory impl (partial): key deserializers\n    /**********************************************************\n     */\n    \n    @Override\n    public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config = ctxt.getConfig();\n        KeyDeserializer deser = null;\n        if (_factoryConfig.hasKeyDeserializers()) {\n            BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n            for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {\n                deser = d.findKeyDeserializer(type, config, beanDesc);\n                if (deser != null) {\n                    break;\n                }\n            }\n        }\n        // the only non-standard thing is this:\n        if (deser == null) {\n            if (type.isEnumType()) {\n                return _createEnumKeyDeserializer(ctxt, type);\n            }\n            deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n        }\n        // and then post-processing\n        if (deser != null) {\n",
    "label": "buggy",
    "id": "1f3445e2-547a-4e9e-a118-9d572deff3b1"
  },
  {
    "project": "Mockito",
    "bug_id": "1",
    "file": "org/mockito/internal/invocation/InvocationMatcher.java",
    "snippet": "    /**\n     * similar means the same method name, same mock, unverified \n     * and: if arguments are the same cannot be overloaded\n     */\n    public boolean hasSimilarMethod(Invocation candidate) {\n        String wantedMethodName = getMethod().getName();\n        String currentMethodName = candidate.getMethod().getName();\n        \n        final boolean methodNameEquals = wantedMethodName.equals(currentMethodName);\n        final boolean isUnverified = !candidate.isVerified();\n        final boolean mockIsTheSame = getInvocation().getMock() == candidate.getMock();\n        final boolean methodEquals = hasSameMethod(candidate);\n\n        if (!methodNameEquals || !isUnverified || !mockIsTheSame) {\n            return false;\n        }\n\n        final boolean overloadedButSameArgs = !methodEquals && safelyArgumentsMatch(candidate.getArguments());\n\n        return !overloadedButSameArgs;\n    }\n\n    public boolean hasSameMethod(Invocation candidate) {\n        //not using method.equals() for 1 good reason:\n        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n        Method m1 = invocation.getMethod();\n        Method m2 = candidate.getMethod();\n        \n        if (m1.getName() != null && m1.getName().equals(m2.getName())) {\n            /* Avoid unnecessary cloning */\n            Class[] params1 = m1.getParameterTypes();\n            Class[] params2 = m2.getParameterTypes();\n            if (params1.length == params2.length) {\n                for (int i = 0; i < params1.length; i++) {\n                if (params1[i] != params2[i])\n                    return false;\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    public Location getLocation() {\n        return invocation.getLocation();\n    }\n\n    public void captureArgumentsFrom(Invocation invocation) {\n        if (invocation.getMethod().isVarArgs()) {\n            int indexOfVararg = invocation.getRawArguments().length - 1;\n            for (int position = 0; position < indexOfVararg; position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                }\n            }\n",
    "label": "clean",
    "id": "31dbf251-02f2-421f-8160-94b3ed106e44"
  },
  {
    "project": "Lang",
    "bug_id": "29",
    "file": "org/apache/commons/lang3/SystemUtils.java",
    "snippet": "    /**\n     * <p>\n     * Is the Java version at least the requested version.\n     * </p>\n     * \n     * <p>\n     * Example input:\n     * </p>\n     * <ul>\n     * <li><code>120</code> to test for Java 1.2 or greater</li>\n     * <li><code>131</code> to test for Java 1.3.1 or greater</li>\n     * </ul>\n     * \n     * @param requiredVersion\n     *            the required version, for example 131\n     * @return <code>true</code> if the actual version is equal or greater than the required version\n     * @since 2.0\n     */\n    public static boolean isJavaVersionAtLeast(int requiredVersion) {\n        return JAVA_VERSION_INT >= requiredVersion;\n    }\n\n    /**\n     * <p>\n     * Decides if the Java version matches.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @param version\n     *            the actual Java version\n     * @param versionPrefix\n     *            the prefix for the expected Java version\n     * @return true if matches, or false if not or can't determine\n     */\n    static boolean isJavaVersionMatch(String version, String versionPrefix) {\n        if (version == null) {\n            return false;\n        }\n        return version.startsWith(versionPrefix);\n    }\n\n    /**\n     * Decides if the operating system matches.\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @param osName\n     *            the actual OS name\n     * @param osVersion\n     *            the actual OS version\n     * @param osNamePrefix\n     *            the prefix for the expected OS name\n     * @param osVersionPrefix\n     *            the prefix for the expected OS version\n     * @return true if matches, or false if not or can't determine\n     */\n    static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix) {\n        if (osName == null || osVersion == null) {\n            return false;\n        }\n        return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);\n    }\n\n    /**\n     * Decides if the operating system matches.\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @param osName\n     *            the actual OS name\n     * @param osNamePrefix\n     *            the prefix for the expected OS name\n     * @return true if matches, or false if not or can't determine\n     */\n    static boolean isOSNameMatch(String osName, String osNamePrefix) {\n        if (osName == null) {\n            return false;\n        }\n        return osName.startsWith(osNamePrefix);\n    }\n\n    /**\n     * <p>\n     * Converts the given Java version string to a <code>float</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>1.2f</code> for Java 1.2</li>\n     * <li><code>1.31f</code> for Java 1.3.1</li>\n     * <li><code>1.6f</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @return the version, for example 1.31f for Java 1.3.1\n     */\n    static float toJavaVersionFloat(String version) {\n        return toVersionFloat(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n    }\n\n    /**\n     * <p>\n     * Converts the given Java version string to an <code>int</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>120</code> for Java 1.2</li>\n     * <li><code>131</code> for Java 1.3.1</li>\n     * <li><code>160</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @return the version, for example 131 for Java 1.3.1\n     */\n    static int toJavaVersionInt(String version) {\n        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n    }\n\n    /**\n     * <p>\n",
    "label": "clean",
    "id": "b7dc6f31-668f-47ef-903e-75bb10820ba8"
  },
  {
    "project": "Compress",
    "bug_id": "47",
    "file": "org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
    "snippet": "    /**\n     * Whether this class is able to read the given entry.\n     *\n     * <p>May return false if it is set up to use encryption or a\n     * compression method that hasn't been implemented yet.</p>\n     * @since 1.1\n     */\n    @Override\n    public boolean canReadEntryData(final ArchiveEntry ae) {\n        if (ae instanceof ZipArchiveEntry) {\n            final ZipArchiveEntry ze = (ZipArchiveEntry) ae;\n            return ZipUtil.canHandleEntryData(ze)\n                && supportsDataDescriptorFor(ze)\n                && supportsCompressedSizeFor(ze);\n        }\n        return false;\n    }\n\n",
    "label": "clean",
    "id": "b2a07571-6b4f-423d-a7eb-e2d3aac37abc"
  },
  {
    "project": "Jsoup",
    "bug_id": "38",
    "file": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "snippet": "/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\nenum HtmlTreeBuilderState {\n    Initial {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                return true; // ignore whitespace\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype()) {\n                // todo: parse error check on expected doctypes\n                // todo: quirk state check on doctype ids\n                Token.Doctype d = t.asDoctype();\n                DocumentType doctype = new DocumentType(d.getName(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());\n                tb.getDocument().appendChild(doctype);\n                if (d.isForceQuirks())\n                    tb.getDocument().quirksMode(Document.QuirksMode.quirks);\n                tb.transition(BeforeHtml);\n            } else {\n                // todo: check not iframe srcdoc\n                tb.transition(BeforeHtml);\n                return tb.process(t); // re-process token\n            }\n            return true;\n        }\n    },\n    BeforeHtml {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (isWhitespace(t)) {\n                return true; // ignore whitespace\n            } else if (t.isStartTag() && t.asStartTag().name().equals(\"html\")) {\n                tb.insert(t.asStartTag());\n                tb.transition(BeforeHead);\n            } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\"))) {\n                return anythingElse(t, tb);\n            } else if (t.isEndTag()) {\n                tb.error(this);\n                return false;\n            } else {\n                return anythingElse(t, tb);\n            }\n            return true;\n        }\n\n        private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            tb.insert(\"html\");\n            tb.transition(BeforeHead);\n            return tb.process(t);\n        }\n    },\n    BeforeHead {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                return true;\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isStartTag() && t.asStartTag().name().equals(\"html\")) {\n                return InBody.process(t, tb); // does not transition\n            } else if (t.isStartTag() && t.asStartTag().name().equals(\"head\")) {\n                Element head = tb.insert(t.asStartTag());\n                tb.setHeadElement(head);\n                tb.transition(InHead);\n            } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\"))) {\n                tb.process(new Token.StartTag(\"head\"));\n                return tb.process(t);\n            } else if (t.isEndTag()) {\n                tb.error(this);\n                return false;\n            } else {\n                tb.process(new Token.StartTag(\"head\"));\n                return tb.process(t);\n            }\n            return true;\n        }\n    },\n    InHead {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                tb.insert(t.asCharacter());\n                return true;\n            }\n            switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.name();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                        tb.insert(start);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.name();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }\n            return true;\n        }\n\n        private boolean anythingElse(Token t, TreeBuilder tb) {\n            tb.process(new Token.EndTag(\"head\"));\n            return tb.process(t);\n        }\n    },\n    InHeadNoscript {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isDoctype()) {\n                tb.error(this);\n            } else if (t.isStartTag() && t.asStartTag().name().equals(\"html\")) {\n                return tb.process(t, InBody);\n            } else if (t.isEndTag() && t.asEndTag().name().equals(\"noscript\")) {\n                tb.pop();\n                tb.transition(InHead);\n            } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().name(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) {\n                return tb.process(t, InHead);\n            } else if (t.isEndTag() && t.asEndTag().name().equals(\"br\")) {\n                return anythingElse(t, tb);\n            } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().name(), \"head\", \"noscript\")) || t.isEndTag()) {\n                tb.error(this);\n                return false;\n            } else {\n                return anythingElse(t, tb);\n            }\n            return true;\n        }\n\n        private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            tb.error(this);\n            tb.process(new Token.EndTag(\"noscript\"));\n            return tb.process(t);\n        }\n    },\n    AfterHead {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                tb.insert(t.asCharacter());\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype()) {\n                tb.error(this);\n            } else if (t.isStartTag()) {\n                Token.StartTag startTag = t.asStartTag();\n                String name = startTag.name();\n                if (name.equals(\"html\")) {\n                    return tb.process(t, InBody);\n                } else if (name.equals(\"body\")) {\n                    tb.insert(startTag);\n                    tb.framesetOk(false);\n                    tb.transition(InBody);\n                } else if (name.equals(\"frameset\")) {\n                    tb.insert(startTag);\n                    tb.transition(InFrameset);\n                } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {\n                    tb.error(this);\n                    Element head = tb.getHeadElement();\n                    tb.push(head);\n                    tb.process(t, InHead);\n                    tb.removeFromStack(head);\n                } else if (name.equals(\"head\")) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    anythingElse(t, tb);\n                }\n            } else if (t.isEndTag()) {\n                if (StringUtil.in(t.asEndTag().name(), \"body\", \"html\")) {\n                    anythingElse(t, tb);\n                } else {\n                    tb.error(this);\n                    return false;\n                }\n            } else {\n                anythingElse(t, tb);\n            }\n            return true;\n        }\n\n        private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            tb.process(new Token.StartTag(\"body\"));\n            tb.framesetOk(true);\n            return tb.process(t);\n        }\n    },\n    InBody {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (isWhitespace(c)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().getFirst();\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.in(name, Constants.InBodyStartToHead)) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        LinkedList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        LinkedList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.removeLast();\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.in(name, Constants.InBodyStartPClosers)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, Constants.Headings)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        if (StringUtil.in(tb.currentElement().nodeName(), Constants.Headings)) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, Constants.InBodyStartPreListing)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        LinkedList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.process(new Token.EndTag(\"li\"));\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, Constants.DdDt)) {\n                        tb.framesetOk(false);\n                        LinkedList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.in(el.nodeName(), Constants.DdDt)) {\n                                tb.process(new Token.EndTag(el.nodeName()));\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"button\"));\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"a\"));\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.in(name, Constants.Formatters)) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"nobr\"));\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.in(name, Constants.InBodyStartApplets)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (StringUtil.in(name, Constants.InBodyStartEmptyFormatters)) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.in(name, Constants.InBodyStartMedia)) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                            return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n",
    "label": "buggy",
    "id": "b51e67c6-6360-4a19-959f-6a6c031f82f5"
  },
  {
    "project": "Math",
    "bug_id": "104",
    "file": "org/apache/commons/math/special/Gamma.java",
    "snippet": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math.special;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math.MathException;\nimport org.apache.commons.math.MaxIterationsExceededException;\nimport org.apache.commons.math.util.ContinuedFraction;\n\n/**\n * This is a utility class that provides computation methods related to the\n * Gamma family of functions.\n *\n * @version $Revision$ $Date$\n */\npublic class Gamma implements Serializable {\n    \n    /** Serializable version identifier */\n    private static final long serialVersionUID = -6587513359895466954L;\n\n    /** Maximum allowed numerical error. */\n    private static final double DEFAULT_EPSILON = 10e-15;\n\n    /** Lanczos coefficients */\n    private static double[] lanczos =\n    {\n        0.99999999999999709182,\n",
    "label": "clean",
    "id": "58bedc05-0863-4a26-91ab-e60ff30226ca"
  },
  {
    "project": "Mockito",
    "bug_id": "5",
    "file": "org/mockito/internal/verification/VerificationOverTimeImpl.java",
    "snippet": "    /**\n     * Verify the given ongoing verification data, and confirm that it satisfies the delegate verification mode\n     * before the full duration has passed.\n     *\n     * In practice, this polls the delegate verification mode until it is satisfied. If it is not satisfied once\n     * the full duration has passed, the last error returned by the delegate verification mode will be thrown\n     * here in turn. This may be thrown early if the delegate is unsatisfied and the verification mode is known\n     * to never recover from this situation (e.g. {@link AtMost}).\n     *\n     * If it is satisfied before the full duration has passed, behaviour is dependent on the returnOnSuccess parameter\n     * given in the constructor. If true, this verification mode is immediately satisfied once the delegate is. If\n     * false, this verification mode is not satisfied until the delegate is satisfied and the full time has passed.\n     *\n     * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout\n     */\n    public void verify(VerificationData data) {\n        AssertionError error = null;\n\n        timer.start();\n        while (timer.isCounting()) {\n            try {\n                delegate.verify(data);\n\n                if (returnOnSuccess) {\n                    return;\n                } else {\n                    error = null;\n                }\n            } catch (MockitoAssertionError e) {\n                error = handleVerifyException(e);\n            }\n            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n                error = handleVerifyException(e);\n            }\n        }\n\n        if (error != null) {\n",
    "label": "buggy",
    "id": "58974dd0-52c2-4dda-b55e-bde8bc500c23"
  },
  {
    "project": "Jsoup",
    "bug_id": "46",
    "file": "org/jsoup/nodes/Entities.java",
    "snippet": "    /**\n     * Get the Character value of the named entity\n     * @param name named entity (e.g. \"lt\" or \"amp\")\n     * @return the Character value of the named entity (e.g. '{@literal <}' or '{@literal &}')\n     */\n    public static Character getCharacterByName(String name) {\n        return full.get(name);\n    }\n    \n    static String escape(String string, Document.OutputSettings out) {\n        StringBuilder accum = new StringBuilder(string.length() * 2);\n        escape(accum, string, out, false, false, false);\n        return accum.toString();\n    }\n\n    // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations\n    static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n\n        boolean lastWasWhite = false;\n        boolean reachedNonWhite = false;\n        final EscapeMode escapeMode = out.escapeMode();\n        final CharsetEncoder encoder = out.encoder();\n        final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n        final Map<Character, String> map = escapeMode.getMap();\n        final int length = string.length();\n\n        int codePoint;\n        for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n            codePoint = string.codePointAt(offset);\n\n            if (normaliseWhite) {\n                if (StringUtil.isWhitespace(codePoint)) {\n                    if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)\n                        continue;\n                    accum.append(' ');\n                    lastWasWhite = true;\n                    continue;\n                } else {\n                    lastWasWhite = false;\n                    reachedNonWhite = true;\n                }\n            }\n            // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):\n            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n                final char c = (char) codePoint;\n                // html specific and required escapes:\n                switch (c) {\n                    case '&':\n                        accum.append(\"&amp;\");\n                        break;\n                    case 0xA0:\n                        if (escapeMode != EscapeMode.xhtml)\n                            accum.append(\"&nbsp;\");\n                        else\n                            accum.append(\"&#xa0;\");\n                        break;\n                    case '<':\n                        if (!inAttribute)\n                            accum.append(\"&lt;\");\n                        else\n",
    "label": "clean",
    "id": "7d147939-2dec-4e63-ac73-bd622aacf271"
  },
  {
    "project": "Lang",
    "bug_id": "16",
    "file": "org/apache/commons/lang3/math/NumberUtils.java",
    "snippet": "    /**\n     * <p>Convert a <code>String</code> to an <code>short</code>, returning a\n     * default value if the conversion fails.</p>\n     *\n     * <p>If the string is <code>null</code>, the default value is returned.</p>\n     *\n     * <pre>\n     *   NumberUtils.toShort(null, 1) = 1\n     *   NumberUtils.toShort(\"\", 1)   = 1\n     *   NumberUtils.toShort(\"1\", 0)  = 1\n     * </pre>\n     *\n     * @param str  the string to convert, may be null\n     * @param defaultValue  the default value\n     * @return the short represented by the string, or the default if conversion fails\n     * @since 2.5\n     */\n    public static short toShort(String str, short defaultValue) {\n        if(str == null) {\n            return defaultValue;\n        }\n        try {\n            return Short.parseShort(str);\n        } catch (NumberFormatException nfe) {\n            return defaultValue;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    // must handle Long, Float, Integer, Float, Short,\n    //                  BigDecimal, BigInteger and Byte\n    // useful methods:\n    // Byte.decode(String)\n    // Byte.valueOf(String,int radix)\n    // Byte.valueOf(String)\n    // Double.valueOf(String)\n    // Float.valueOf(String)\n    // Float.valueOf(String)\n    // Integer.valueOf(String,int radix)\n    // Integer.valueOf(String)\n    // Integer.decode(String)\n    // Integer.getInteger(String)\n    // Integer.getInteger(String,int val)\n    // Integer.getInteger(String,Integer val)\n    // Integer.valueOf(String)\n    // Double.valueOf(String)\n    // new Byte(String)\n    // Long.valueOf(String)\n    // Long.getLong(String)\n    // Long.getLong(String,int)\n    // Long.getLong(String,Integer)\n    // Long.valueOf(String,int)\n    // Long.valueOf(String)\n    // Short.valueOf(String)\n    // Short.decode(String)\n    // Short.valueOf(String,int)\n    // Short.valueOf(String)\n    // new BigDecimal(String)\n    // new BigInteger(String)\n    // new BigInteger(String,int radix)\n    // Possible inputs:\n    // 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd\n    // plus minus everything. Prolly more. A lot are not separable.\n\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }  \n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear \n            // to be in specification of class. OS X Java parses it to \n            // a wrong value.\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n            return createInteger(str);\n        }   \n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n",
    "label": "clean",
    "id": "152c1aed-d363-4eac-81c6-40e7573d3b91"
  },
  {
    "project": "Time",
    "bug_id": "20",
    "file": "org/joda/time/format/DateTimeFormatterBuilder.java",
    "snippet": "        /**\n         * Returns actual amount of digits to parse, but no more than original\n         * 'amount' parameter.\n         */\n        private int digitCount(String text, int position, int amount) {\n            int limit = Math.min(text.length() - position, amount);\n            amount = 0;\n            for (; limit > 0; limit--) {\n                char c = text.charAt(position + amount);\n                if (c < '0' || c > '9') {\n                    break;\n                }\n                amount++;\n            }\n            return amount;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    static class TimeZoneName\n            implements DateTimePrinter, DateTimeParser {\n\n        static final int LONG_NAME = 0;\n        static final int SHORT_NAME = 1;\n\n        private final Map<String, DateTimeZone> iParseLookup;\n        private final int iType;\n\n        TimeZoneName(int type, Map<String, DateTimeZone> parseLookup) {\n            super();\n            iType = type;\n            iParseLookup = parseLookup;\n        }\n\n        public int estimatePrintedLength() {\n            return (iType == SHORT_NAME ? 4 : 20);\n        }\n\n        public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) {\n            buf.append(print(instant - displayOffset, displayZone, locale));\n        }\n\n        public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {\n            out.write(print(instant - displayOffset, displayZone, locale));\n        }\n\n        private String print(long instant, DateTimeZone displayZone, Locale locale) {\n            if (displayZone == null) {\n                return \"\";  // no zone\n            }\n            switch (iType) {\n                case LONG_NAME:\n                    return displayZone.getName(instant, locale);\n                case SHORT_NAME:\n                    return displayZone.getShortName(instant, locale);\n            }\n            return \"\";\n        }\n\n        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n            // no zone info\n        }\n\n        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {\n            // no zone info\n        }\n\n        public int estimateParsedLength() {\n            return (iType == SHORT_NAME ? 4 : 20);\n        }\n\n        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n            String str = text.substring(position);\n            for (String name : iParseLookup.keySet()) {\n                if (str.startsWith(name)) {\n                    bucket.setZone(iParseLookup.get(name));\n                    return position + name.length();\n                }\n            }\n            return ~position;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    static enum TimeZoneId\n            implements DateTimePrinter, DateTimeParser {\n\n        INSTANCE;\n        static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();\n        static final int MAX_LENGTH;\n        static {\n            int max = 0;\n            for (String id : ALL_IDS) {\n                max = Math.max(max, id.length());\n            }\n            MAX_LENGTH = max;\n        }\n\n        public int estimatePrintedLength() {\n            return MAX_LENGTH;\n        }\n\n        public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) {\n            buf.append(displayZone != null ? displayZone.getID() : \"\");\n        }\n\n        public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {\n            out.write(displayZone != null ? displayZone.getID() : \"\");\n        }\n\n        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n            // no zone info\n        }\n\n        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {\n            // no zone info\n        }\n\n        public int estimateParsedLength() {\n            return MAX_LENGTH;\n        }\n\n        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n            String str = text.substring(position);\n            for (String id : ALL_IDS) {\n                if (str.startsWith(id)) {\n                    bucket.setZone(DateTimeZone.forID(id));\n                    return position + id.length();\n                }\n",
    "label": "buggy",
    "id": "025b63e9-b729-46b8-8979-5cde7ad0c284"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "64",
    "file": "com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
    "snippet": "    /**********************************************************\n     */\n\n    public Annotations getClassAnnotations() {\n        return _beanDesc.getClassAnnotations();\n    }\n\n    /**\n     * @param contentTypeSer Optional explicit type information serializer\n     *    to use for contained values (only used for properties that are\n     *    of container type)\n     */\n    @SuppressWarnings(\"deprecation\")\n    protected BeanPropertyWriter buildWriter(SerializerProvider prov,\n            BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,\n            TypeSerializer typeSer, TypeSerializer contentTypeSer,\n            AnnotatedMember am, boolean defaultUseStaticTyping)\n        throws JsonMappingException\n    {\n        // do we have annotation that forces type to use (to declared type or its super type)?\n        JavaType serializationType;\n        try {\n            serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);\n        } catch (JsonMappingException e) {\n            return prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage());\n        }\n\n        // Container types can have separate type serializers for content (value / element) type\n        if (contentTypeSer != null) {\n            /* 04-Feb-2010, tatu: Let's force static typing for collection, if there is\n             *    type information for contents. Should work well (for JAXB case); can be\n             *    revisited if this causes problems.\n             */\n            if (serializationType == null) {\n//                serializationType = TypeFactory.type(am.getGenericType(), _beanDesc.getType());\n                serializationType = declaredType;\n            }\n            JavaType ct = serializationType.getContentType();\n            // Not exactly sure why, but this used to occur; better check explicitly:\n            if (ct == null) {\n                prov.reportBadPropertyDefinition(_beanDesc, propDef,\n                        \"serialization type \"+serializationType+\" has no content\");\n            }\n            serializationType = serializationType.withContentTypeHandler(contentTypeSer);\n            ct = serializationType.getContentType();\n        }\n\n        Object valueToSuppress = null;\n        boolean suppressNulls = false;\n\n        // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement\n        JavaType actualType = (serializationType == null) ? declaredType : serializationType;\n        \n        // 17-Aug-2016, tatu: Default inclusion covers global default (for all types), as well\n        //   as type-default for enclosing POJO. What we need, then, is per-type default (if any)\n        //   for declared property type... and finally property annotation overrides\n        JsonInclude.Value inclV = _config.getDefaultPropertyInclusion(actualType.getRawClass(),\n                _defaultInclusion);\n\n        // property annotation override\n        \n        inclV = inclV.withOverrides(propDef.findInclusion());\n        JsonInclude.Include inclusion = inclV.getValueInclusion();\n\n        if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but...\n            inclusion = JsonInclude.Include.ALWAYS;\n        }\n        \n        switch (inclusion) {\n        case NON_DEFAULT:\n            // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,\n            //    so that if enclosing class has this, we may need to access values of property,\n            //    whereas for global defaults OR per-property overrides, we have more\n            //    static definition. Sigh.\n            // First: case of class/type specifying it; try to find POJO property defaults\n\n            // 16-Oct-2016, tatu: Note: if we can not for some reason create \"default instance\",\n            //    revert logic to the case of general/per-property handling, so both\n            //    type-default AND null are to be excluded.\n            //    (as per [databind#1417]\n",
    "label": "buggy",
    "id": "d6cdc3eb-8b89-47ef-ae3e-a5c30bd02064"
  },
  {
    "project": "Math",
    "bug_id": "37",
    "file": "org/apache/commons/math/complex/Complex.java",
    "snippet": "    /**\n     * Compute the\n     * <a href=\"http://mathworld.wolfram.com/Tangent.html\" TARGET=\"_top\">\n     * tangent</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   tan(a + bi) = sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and\n     * {@link FastMath#sinh}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite (or critical) values in real or imaginary parts of the input may\n     * result in infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   tan(a &plusmn; INFINITY i) = 0 &plusmn; i\n     *   tan(&plusmn;INFINITY + bi) = NaN + NaN i\n     *   tan(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *   tan(&plusmn;&pi;/2 + 0 i) = &plusmn;INFINITY + NaN i\n     *  </code>\n     * </pre>\n     *\n     * @return the tangent of {@code this}.\n     * @since 1.2\n     */\n    public Complex tan() {\n        if (isNaN || Double.isInfinite(real)) {\n            return NaN;\n        }\n        if (imaginary > 20.0) {\n            return createComplex(0.0, 1.0);\n        }\n",
    "label": "clean",
    "id": "247335d9-8212-48e2-ba41-52e778309eaa"
  },
  {
    "project": "Closure",
    "bug_id": "60",
    "file": "com/google/javascript/jscomp/NodeUtil.java",
    "snippet": "  /** the set of builtin constructors that don't have side effects. */\n  private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));\n\n  // Utility class; do not instantiate.\n  private NodeUtil() {}\n\n  /**\n   * Gets the boolean value of a node that represents a expression. This method\n   * effectively emulates the <code>Boolean()</code> JavaScript cast function.\n   * Note: unlike getBooleanValue this function does not return UNKNOWN\n   * for expressions with side-effects.\n   */\n  static TernaryValue getImpureBooleanValue(Node n) {\n    switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getImpureBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getImpureBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // ignoring side-effects\n        return TernaryValue.TRUE;\n\n\n      default:\n        return getPureBooleanValue(n);\n    }\n  }\n",
    "label": "buggy",
    "id": "6af569a7-e961-4cec-aa3b-d53db5cb61c2"
  },
  {
    "project": "Closure",
    "bug_id": "52",
    "file": "com/google/javascript/jscomp/CodeGenerator.java",
    "snippet": "  /**\n   * Insert a ECMASCRIPT 5 strict annotation.\n   */\n  public void tagAsStrict() {\n    add(\"'use strict';\");\n  }\n\n  void add(String str) {\n    cc.add(str);\n  }\n\n  private void addIdentifier(String identifier) {\n    cc.addIdentifier(identifierEscape(identifier));\n  }\n\n  void add(Node n) {\n    add(n, Context.OTHER);\n  }\n\n  void add(Node n, Context context) {\n    if (!cc.continueProcessing()) {\n      return;\n    }\n\n    int type = n.getType();\n    String opstr = NodeUtil.opToStr(type);\n    int childCount = n.getChildCount();\n    Node first = n.getFirstChild();\n    Node last = n.getLastChild();\n\n    // Handle all binary operators\n    if (opstr != null && first != last) {\n      Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);\n      int p = NodeUtil.precedence(type);\n      addLeftExpr(first, p, context);\n      cc.addOp(opstr, true);\n\n      // For right-hand-side of operations, only pass context if it's\n      // the IN_FOR_INIT_CLAUSE one.\n      Context rhsContext = getContextForNoInOperator(context);\n\n      // Handle associativity.\n      // e.g. if the parse tree is a * (b * c),\n      // we can simply generate a * b * c.\n      if (last.getType() == type &&\n          NodeUtil.isAssociative(type)) {\n        addExpr(last, p, rhsContext);\n      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {\n        // Assignments are the only right-associative binary operators\n        addExpr(last, p, rhsContext);\n      } else {\n        addExpr(last, p + 1, rhsContext);\n      }\n      return;\n    }\n\n    cc.startSourceMapping(n);\n\n    switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().getType() == Token.BLOCK &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.getType() == Token.EMPTY) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.getType() == Token.COMMA) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN));\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.LP:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        addList(first, false, context);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type));\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().getType() == Token.NUMBER) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type));\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addLeftExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1);\n        cc.addOp(\":\", true);\n        addExpr(last, 1);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (first.getType() != Token.STRING ||\n            last.getType() != Token.STRING) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.GET_REF:\n        add(first);\n        break;\n\n      case Token.REF_SPECIAL:\n        Preconditions.checkState(childCount == 1);\n        add(first);\n        add(\".\");\n        add((String) n.getProp(Node.NAME_PROP));\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GET:\n      case Token.SET:\n        Preconditions.checkState(n.getParent().getType() == Token.OBJECTLIT);\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.getType() == Token.FUNCTION);\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GET) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n.getString());\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().getType() == Token.SCRIPT);\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.getType() == Token.VAR) {\n            cc.endStatement();\n          }\n\n          if (c.getType() == Token.FUNCTION) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.getType() == Token.VAR) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.getType() == Token.STRING,\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.getType() == Token.NUMBER);\n        if (needsParens) {\n          add(\"(\");\n        }\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA));\n          add(\")\");\n        } else {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n      case Token.THIS:\n      case Token.FALSE:\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        add(Node.tokenToName(type));\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (first.getType() != Token.LABEL_NAME) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (first.getType() != Token.LABEL_NAME) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_VOID:\n        throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\");\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(first, Token.CALL, new MatchNotFunction())) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING:\n        if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0)) {\n          throw new IllegalStateException(\n              \"Unexpected String children: \" + n.getParent().toStringTree());\n        }\n        addJsString(n.getString());\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.getType() == Token.GET || c.getType() == Token.SET) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.getType() == Token.STRING);\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (first.getType() != Token.LABEL_NAME) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      // This node is auto generated in anonymous functions and should just get\n      // ignored for our purposes.\n      case Token.SETNAME:\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }\n\n    cc.endSourceMapping(n);\n  }\n\n  static boolean isSimpleNumber(String s) {\n    int len = s.length();\n    for (int index = 0; index < len; index++) {\n      char c = s.charAt(index);\n      if (c < '0' || c > '9') {\n        return false;\n      }\n    }\n    return len > 0 && s.charAt(0) != '0';\n  }\n\n  static double getSimpleNumber(String s) {\n    if (isSimpleNumber(s)) {\n      try {\n",
    "label": "clean",
    "id": "bf94d8d8-a4b7-45d7-8d21-0865fba2023b"
  },
  {
    "project": "Math",
    "bug_id": "36",
    "file": "org/apache/commons/math/fraction/BigFraction.java",
    "snippet": "    /**\n     * <p>\n     * Gets the fraction as a <tt>double</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * </p>\n     *\n     * @return the fraction as a <tt>double</tt>\n     * @see java.lang.Number#doubleValue()\n     */\n    @Override\n    public double doubleValue() {\n        double result = numerator.doubleValue() / denominator.doubleValue();\n            // Numerator and/or denominator must be out of range:\n            // Calculate how far to shift them to put them in range.\n        return result;\n    }\n\n",
    "label": "buggy",
    "id": "d0c0a1ce-28c7-482a-8022-99651f726236"
  },
  {
    "project": "Math",
    "bug_id": "13",
    "file": "org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java",
    "snippet": "    /**\n     * Computes the square-root of the weight matrix.\n     *\n     * @param m Symmetric, positive-definite (weight) matrix.\n     * @return the square-root of the weight matrix.\n     */\n    private RealMatrix squareRoot(RealMatrix m) {\n        if (m instanceof DiagonalMatrix) {\n            final int dim = m.getRowDimension();\n            final RealMatrix sqrtM = new DiagonalMatrix(dim);\n            for (int i = 0; i < dim; i++) {\n               sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));\n            }\n",
    "label": "clean",
    "id": "cc4e65e5-7635-494f-a68d-9d52439703ff"
  },
  {
    "project": "Math",
    "bug_id": "21",
    "file": "org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
    "snippet": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.linear;\n\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n * Calculates the rectangular Cholesky decomposition of a matrix.\n * <p>The rectangular Cholesky decomposition of a real symmetric positive\n * semidefinite matrix A consists of a rectangular matrix B with the same\n * number of rows such that: A is almost equal to BB<sup>T</sup>, depending\n * on a user-defined tolerance. In a sense, this is the square root of A.</p>\n * <p>The difference with respect to the regular {@link CholeskyDecomposition}\n * is that rows/columns may be permuted (hence the rectangular shape instead\n * of the traditional triangular shape) and there is a threshold to ignore\n * small diagonal elements. This is used for example to generate {@link\n * org.apache.commons.math3.random.CorrelatedRandomVectorGenerator correlated\n * random n-dimensions vectors} in a p-dimension subspace (p < n).\n * In other words, it allows generating random vectors from a covariance\n * matrix that is only positive semidefinite, and not positive definite.</p>\n * <p>Rectangular Cholesky decomposition is <em>not</em> suited for solving\n * linear systems, so it does not provide any {@link DecompositionSolver\n * decomposition solver}.</p>\n *\n * @see <a href=\"http://mathworld.wolfram.com/CholeskyDecomposition.html\">MathWorld</a>\n * @see <a href=\"http://en.wikipedia.org/wiki/Cholesky_decomposition\">Wikipedia</a>\n * @version $Id$\n * @since 2.0 (changed to concrete class in 3.0)\n */\npublic class RectangularCholeskyDecomposition {\n\n    /** Permutated Cholesky root of the symmetric positive semidefinite matrix. */\n    private final RealMatrix root;\n\n    /** Rank of the symmetric positive semidefinite matrix. */\n    private int rank;\n\n    /**\n     * Decompose a symmetric positive semidefinite matrix.\n     *\n     * @param matrix Symmetric positive semidefinite matrix.\n     * @param small Diagonal elements threshold under which  column are\n     * considered to be dependent on previous ones and are discarded.\n     * @exception NonPositiveDefiniteMatrixException if the matrix is not\n     * positive semidefinite.\n     */\n    public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n        throws NonPositiveDefiniteMatrixException {\n\n        final int order = matrix.getRowDimension();\n        final double[][] c = matrix.getData();\n        final double[][] b = new double[order][order];\n\n        int[] swap  = new int[order];\n        int[] index = new int[order];\n        for (int i = 0; i < order; ++i) {\n            index[i] = i;\n        }\n\n",
    "label": "buggy",
    "id": "99558eba-403e-42d8-a909-c6d40ecdc8a8"
  },
  {
    "project": "Mockito",
    "bug_id": "10",
    "file": "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
    "snippet": "/*\n * Copyright (c) 2007 Mockito contributors\n * This program is made available under the terms of the MIT License.\n */\npackage org.mockito.internal.stubbing.defaultanswers;\n\nimport org.mockito.MockSettings;\nimport org.mockito.Mockito;\nimport org.mockito.internal.InternalMockHandler;\nimport org.mockito.internal.MockitoCore;\nimport org.mockito.internal.creation.settings.CreationSettings;\nimport org.mockito.internal.stubbing.InvocationContainerImpl;\nimport org.mockito.internal.stubbing.StubbedInvocationMatcher;\nimport org.mockito.internal.util.MockUtil;\nimport org.mockito.internal.util.reflection.GenericMetadataSupport;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.mock.MockCreationSettings;\nimport org.mockito.stubbing.Answer;\n\nimport java.io.IOException;\nimport java.io.Serializable;\n\n",
    "label": "clean",
    "id": "53511da2-aab5-43aa-9b3e-a56b77c790c8"
  },
  {
    "project": "Closure",
    "bug_id": "71",
    "file": "com/google/javascript/jscomp/CheckAccessControls.java",
    "snippet": "  /**\n   * Determines whether the given name is visible in the current context.\n   * @param t The current traversal.\n   * @param name The name node.\n   */\n  private void checkNameVisibility(NodeTraversal t, Node name, Node parent) {\n    Var var = t.getScope().getVar(name.getString());\n    if (var != null) {\n      JSDocInfo docInfo = var.getJSDocInfo();\n      if (docInfo != null) {\n        // If a name is private, make sure that we're in the same file.\n        Visibility visibility = docInfo.getVisibility();\n        if (visibility == Visibility.PRIVATE &&\n            !t.getInput().getName().equals(docInfo.getSourceName())) {\n          if (docInfo.isConstructor() &&\n              isValidPrivateConstructorAccess(parent)) {\n            return;\n          }\n\n          compiler.report(\n              t.makeError(name, BAD_PRIVATE_GLOBAL_ACCESS,\n                  name.getString(), docInfo.getSourceName()));\n        }\n      }\n    }\n  }\n\n  /**\n   * Determines whether the given property with @const tag got reassigned\n   * @param t The current traversal.\n   * @param getprop The getprop node.\n   */\n  private void checkConstantProperty(NodeTraversal t,\n      Node getprop) {\n    // Check whether the property is modified\n    Node parent = getprop.getParent();\n    if (!(NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == getprop)\n        && (parent.getType() != Token.INC) && (parent.getType() != Token.DEC)) {\n      return;\n    }\n\n    ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    // Check whether constant properties are reassigned\n    if (objectType != null) {\n      ObjectType oType = objectType;\n      while (oType != null) {\n        if (oType.hasReferenceName()) {\n          if (initializedConstantProperties.containsEntry(\n                  oType.getReferenceName(), propertyName)) {\n            compiler.report(\n                t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE,\n                    propertyName));\n            break;\n          }\n        }\n        oType = oType.getImplicitPrototype();\n      }\n\n      JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName);\n      if (info != null && info.isConstant()\n          && objectType.hasReferenceName()) {\n        initializedConstantProperties.put(objectType.getReferenceName(),\n            propertyName);\n      }\n\n      // Add the prototype when we're looking at an instance object\n      if (objectType.isInstanceType()) {\n        ObjectType prototype = objectType.getImplicitPrototype();\n        if (prototype != null) {\n          JSDocInfo prototypeInfo\n            = prototype.getOwnPropertyJSDocInfo(propertyName);\n          if (prototypeInfo != null && prototypeInfo.isConstant()\n              && prototype.hasReferenceName()) {\n            initializedConstantProperties.put(prototype.getReferenceName(),\n                propertyName);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Determines whether the given property is visible in the current context.\n   * @param t The current traversal.\n   * @param getprop The getprop node.\n   */\n  private void checkPropertyVisibility(NodeTraversal t,\n      Node getprop, Node parent) {\n    ObjectType objectType =\n        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n      // Is this a normal property access, or are we trying to override\n      // an existing property?\n      boolean isOverride = parent.getJSDocInfo() != null &&\n          parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() == getprop;\n\n      // Find the lowest property defined on a class with visibility\n      // information.\n",
    "label": "clean",
    "id": "14552c09-b28c-4910-a072-28013f5dd45f"
  },
  {
    "project": "Closure",
    "bug_id": "102",
    "file": "com/google/javascript/jscomp/Normalize.java",
    "snippet": "/**\n * The goal with this pass is to simplify the other passes,\n * by making less complex statements.\n *\n * Starting with statements like:\n *   var a = 0, b = foo();\n *\n * Which become:\n *   var a = 0;\n *   var b = foo();\n *\n * The key here is only to break down things that help the other passes\n * and can be put back together in a form that is at least as small when\n * all is said and done.\n *\n * This pass currently does the following:\n * 1) Splits var statements contains multiple declarations into individual\n * statements.\n * 2) Splits chained assign statements such as \"a = b = c = 0\" into individual\n * statements.  These are split as follows \"c = 0; b = c; a = b\". Unfortunately,\n * not all such statements can be broken up, for instance:\n *   \"a[next()] = a[next()] = 0\"\n * can not be made into\n *   \"a[next()] = 0; a[next()] = a[next()];\n * 3) init expressions in FOR statements are extracted and placed before the\n * statement. For example: \"for(var a=0;;);\" becomes \"var a=0;for(;;);\"\n * 4) WHILE statements are converted to FOR statements. For example:\n * \"while(true);\" becomes \"for(;true;);\"\n * 5) Renames constant variables, as marked with an IS_CONSTANT_NAME annotation,\n *   to include a suffix of NodeUtil.CONSTANT_MARKER which is used by constant\n *   inlining.\n *\n*\n */\n// public for ReplaceDebugStringsTest\nclass Normalize implements CompilerPass, Callback {\n\n  private final AbstractCompiler compiler;\n  private final boolean assertOnChange;\n  private static final boolean CONVERT_WHILE_TO_FOR = true;\n  static final boolean MAKE_LOCAL_NAMES_UNIQUE = true;\n\n  Normalize(AbstractCompiler compiler, boolean assertOnChange) {\n    this.compiler = compiler;\n    this.assertOnChange = assertOnChange;\n  }\n\n  private void reportCodeChange(String changeDescription) {\n    if (assertOnChange) {\n      throw new IllegalStateException(\n          \"Normalize constraints violated:\\n\" + changeDescription);\n    }\n    compiler.reportCodeChange();\n  }\n\n  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n    removeDuplicateDeclarations(root);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n",
    "label": "clean",
    "id": "ab771757-1e49-4639-8e6b-28f69a3b8057"
  },
  {
    "project": "Closure",
    "bug_id": "97",
    "file": "com/google/javascript/jscomp/PeepholeFoldConstants.java",
    "snippet": "  /**\n   * Try to fold shift operations\n   */\n  private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER) {\n\n      double result;\n      double lval = left.getDouble();\n      double rval = right.getDouble();\n\n      // check ranges.  We do not do anything that would clip the double to\n      // a 32-bit range, since the user likely does not intend that.\n      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n        return n;\n      }\n\n      // only the lower 5 bits are used when shifting, so don't do anything\n      // if the shift amount is outside [0,32)\n      if (!(rval >= 0 && rval < 32)) {\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      }\n\n      // Convert the numbers to ints\n      int lvalInt = (int) lval;\n      if (lvalInt != lval) {\n        error(FRACTIONAL_BITWISE_OPERAND, left);\n        return n;\n      }\n\n      int rvalInt = (int) rval;\n      if (rvalInt != rval) {\n        error(FRACTIONAL_BITWISE_OPERAND, right);\n        return n;\n      }\n\n      switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          // JavaScript handles zero shifts on signed numbers differently than\n          // Java as an Java int can not represent the unsigned 32-bit number\n          // where JavaScript can so use a long here.\n          result = lvalInt >>> rvalInt;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }\n",
    "label": "buggy",
    "id": "31e70dcc-f786-40ce-b784-7f6cf00f3473"
  },
  {
    "project": "Closure",
    "bug_id": "120",
    "file": "com/google/javascript/jscomp/ReferenceCollectingCallback.java",
    "snippet": "    /**\n     * @param index The index into the references array to look for an\n     * initialized assignment reference. That is, an assignment immediately\n     * follow a variable declaration that itself does not initialize the\n     * variable.\n     */\n    private boolean isInitializingAssignmentAt(int index) {\n      if (index < references.size() && index > 0) {\n        Reference maybeDecl = references.get(index - 1);\n        if (maybeDecl.isVarDeclaration()) {\n          Preconditions.checkState(!maybeDecl.isInitializingDeclaration());\n          Reference maybeInit = references.get(index);\n          if (maybeInit.isSimpleAssignmentToName()) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    /**\n     * @return The reference that provides the value for the variable at the\n     * time of the first read, if known, otherwise null.\n     *\n     * This is either the variable declaration (\"var a = ...\") or first\n     * reference following the declaration if it is an assignment.\n     */\n    Reference getInitializingReference() {\n      if (isInitializingDeclarationAt(0)) {\n        return references.get(0);\n      } else if (isInitializingAssignmentAt(1)) {\n        return references.get(1);\n      }\n      return null;\n    }\n\n    /**\n     * Constants are allowed to be defined after their first use.\n     */\n    Reference getInitializingReferenceForConstants() {\n      int size = references.size();\n      for (int i = 0; i < size; i++) {\n        if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n          return references.get(i);\n        }\n      }\n      return null;\n    }\n\n    /**\n     * @return Whether the variable is only assigned a value once for its\n     *     lifetime.\n     */\n    boolean isAssignedOnceInLifetime() {\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        return false;\n      }\n\n      // Make sure this assignment is not in a loop.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          if (ref.getSymbol().getScope() != ref.scope) {\n            return false;\n          }\n          break;\n        } else if (block.isLoop) {\n          return false;\n",
    "label": "clean",
    "id": "3b326d50-093f-47e7-8b75-22168faae5bf"
  },
  {
    "project": "Jsoup",
    "bug_id": "54",
    "file": "org/jsoup/helper/W3CDom.java",
    "snippet": "    /**\n     * Implements the conversion by walking the input.\n     */\n    protected static class W3CBuilder implements NodeVisitor {\n        private static final String xmlnsKey = \"xmlns\";\n        private static final String xmlnsPrefix = \"xmlns:\";\n\n        private final Document doc;\n        private final HashMap<String, String> namespaces = new HashMap<String, String>(); // prefix => urn\n        private Element dest;\n\n        public W3CBuilder(Document doc) {\n            this.doc = doc;\n        }\n\n        public void head(org.jsoup.nodes.Node source, int depth) {\n            if (source instanceof org.jsoup.nodes.Element) {\n                org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n\n                String prefix = updateNamespaces(sourceEl);\n                String namespace = namespaces.get(prefix);\n\n                Element el = doc.createElementNS(namespace, sourceEl.tagName());\n                copyAttributes(sourceEl, el);\n                if (dest == null) { // sets up the root\n                    doc.appendChild(el);\n                } else {\n                    dest.appendChild(el);\n                }\n                dest = el; // descend\n            } else if (source instanceof org.jsoup.nodes.TextNode) {\n                org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;\n                Text text = doc.createTextNode(sourceText.getWholeText());\n                dest.appendChild(text);\n            } else if (source instanceof org.jsoup.nodes.Comment) {\n                org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;\n                Comment comment = doc.createComment(sourceComment.getData());\n                dest.appendChild(comment);\n            } else if (source instanceof org.jsoup.nodes.DataNode) {\n                org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;\n                Text node = doc.createTextNode(sourceData.getWholeData());\n                dest.appendChild(node);\n            } else {\n                // unhandled\n            }\n        }\n\n        public void tail(org.jsoup.nodes.Node source, int depth) {\n            if (source instanceof org.jsoup.nodes.Element && dest.getParentNode() instanceof Element) {\n                dest = (Element) dest.getParentNode(); // undescend. cromulent.\n            }\n        }\n\n        private void copyAttributes(org.jsoup.nodes.Node source, Element el) {\n            for (Attribute attribute : source.attributes()) {\n                // valid xml attribute names are: ^[a-zA-Z_:][-a-zA-Z0-9_:.]\n                String key = attribute.getKey().replaceAll(\"[^-a-zA-Z0-9_:.]\", \"\");\n                if (key.matches(\"[a-zA-Z_:]{1}[-a-zA-Z0-9_:.]*\"))\n                    el.setAttribute(key, attribute.getValue());\n            }\n        }\n\n        /**\n",
    "label": "clean",
    "id": "8dde198c-066a-44c4-82d5-46735d9d4aa1"
  },
  {
    "project": "Math",
    "bug_id": "3",
    "file": "org/apache/commons/math3/util/MathArrays.java",
    "snippet": "    /**\n     * Creates a copy of the {@code source} array.\n     *\n     * @param source Array to be copied.\n     * @param len Number of entries to copy. If smaller then the source\n     * length, the copy will be truncated, if larger it will padded with\n     * zeroes.\n     * @return the copied array.\n     */\n    public static double[] copyOf(double[] source, int len) {\n         final double[] output = new double[len];\n         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));\n         return output;\n     }\n\n    /**\n     * Compute a linear combination accurately.\n     * This method computes the sum of the products\n     * <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.\n     * It does so by using specific multiplication and addition algorithms to\n     * preserve accuracy and reduce cancellation effects.\n     * <br/>\n     * It is based on the 2005 paper\n     * <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\">\n     * Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,\n     * and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n     *\n     * @param a Factors.\n     * @param b Factors.\n     * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n     * @throws DimensionMismatchException if arrays dimensions don't match\n     */\n    public static double linearCombination(final double[] a, final double[] b)\n        throws DimensionMismatchException {\n        final int len = a.length;\n        if (len != b.length) {\n            throw new DimensionMismatchException(len, b.length);\n        }\n\n        if (len == 1) {\n            // Revert to scalar multiplication.\n            return a[0] * b[0];\n        }\n\n        final double[] prodHigh = new double[len];\n",
    "label": "clean",
    "id": "a577da5d-9b51-4aa5-8bc0-59d63d2db818"
  },
  {
    "project": "Time",
    "bug_id": "17",
    "file": "org/joda/time/DateTimeZone.java",
    "snippet": "    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     * \n     * @param instant  the instant to adjust\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // a bit messy, but will work in all non-pathological cases\n        \n        // evaluate 3 hours before and after to work out if anything is happening\n        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        if (instantBefore == instantAfter) {\n            return instant;  // not an overlap (less than is a gap, equal is normal case)\n        }\n        \n",
    "label": "buggy",
    "id": "b1593103-0819-4d7e-ad63-28966b73d8ad"
  },
  {
    "project": "Closure",
    "bug_id": "62",
    "file": "com/google/javascript/jscomp/LightweightMessageFormatter.java",
    "snippet": "  /**\n   * A constructor for when the client doesn't care about source information.\n   */\n  private LightweightMessageFormatter() {\n    super(null);\n    this.excerpt = LINE;\n  }\n\n  public LightweightMessageFormatter(SourceExcerptProvider source) {\n    this(source, LINE);\n  }\n\n  public LightweightMessageFormatter(SourceExcerptProvider source,\n      SourceExcerpt excerpt) {\n    super(source);\n    Preconditions.checkNotNull(source);\n    this.excerpt = excerpt;\n  }\n\n  static LightweightMessageFormatter withoutSource() {\n    return new LightweightMessageFormatter();\n  }\n\n  public String formatError(JSError error) {\n    return format(error, false);\n  }\n\n  public String formatWarning(JSError warning) {\n    return format(warning, true);\n  }\n\n  private String format(JSError error, boolean warning) {\n    // extract source excerpt\n    SourceExcerptProvider source = getSource();\n    String sourceExcerpt = source == null ? null :\n        excerpt.get(\n            source, error.sourceName, error.lineNumber, excerptFormatter);\n\n    // formatting the message\n    StringBuilder b = new StringBuilder();\n    if (error.sourceName != null) {\n      b.append(error.sourceName);\n      if (error.lineNumber > 0) {\n        b.append(':');\n        b.append(error.lineNumber);\n      }\n      b.append(\": \");\n    }\n\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n\n    b.append(error.description);\n    b.append('\\n');\n    if (sourceExcerpt != null) {\n      b.append(sourceExcerpt);\n      b.append('\\n');\n      int charno = error.getCharno();\n\n      // padding equal to the excerpt and arrow at the end\n      // charno == sourceExpert.length() means something is missing\n      // at the end of the line\n      if (excerpt.equals(LINE)\n          && 0 <= charno && charno <= sourceExcerpt.length()) {\n        for (int i = 0; i < charno; i++) {\n          char c = sourceExcerpt.charAt(i);\n          if (Character.isWhitespace(c)) {\n            b.append(c);\n          } else {\n",
    "label": "clean",
    "id": "28ee056f-2d98-40d6-8085-25f90b7c58d0"
  },
  {
    "project": "Lang",
    "bug_id": "21",
    "file": "org/apache/commons/lang3/time/DateUtils.java",
    "snippet": "    /**\n     * <p>Checks if two calendar objects represent the same local time.</p>\n     *\n     * <p>This method compares the values of the fields of the two objects.\n     * In addition, both calendars must be the same of the same type.</p>\n     * \n     * @param cal1  the first calendar, not altered, not null\n     * @param cal2  the second calendar, not altered, not null\n     * @return true if they represent the same millisecond instant\n     * @throws IllegalArgumentException if either date is <code>null</code>\n     * @since 2.1\n     */\n    public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n        if (cal1 == null || cal2 == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n                cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.getClass() == cal2.getClass());\n    }\n",
    "label": "clean",
    "id": "bf5bf731-512b-4628-aad2-8559d5376074"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "47",
    "file": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "snippet": "    /**\n     * Method for finding possible widening type definition that a property\n     * value can have, to define less specific key type to use for serialization.\n     * It should be only used with structured types (arrays, collections, maps).\n     * \n     * @return Class specifying more general type to use instead of\n     *   declared type, if annotation found; null if not\n     *\n     * @deprecated Since 2.7 call {@link #refineSerializationType} instead\n     */\n    @Deprecated // since 2.7\n    public Class<?> findSerializationContentType(Annotated am, JavaType baseType) {\n        return null;\n    }\n\n    /**\n     * Method called to find out possible type refinements to use\n     * for deserialization.\n     *\n     * @since 2.7\n     */\n    public JavaType refineSerializationType(final MapperConfig<?> config,\n            final Annotated a, final JavaType baseType) throws JsonMappingException\n    {\n        JavaType type = baseType;\n        final TypeFactory tf = config.getTypeFactory();\n        \n        // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to\n        //    now-deprecated secondary methods; this because while\n        //    direct sub-class not yet retrofitted may only override\n        //    those methods. With 2.8 or later we may consider removal\n        //    of these methods\n\n        \n        // Ok: start by refining the main type itself; common to all types\n        Class<?> serClass = findSerializationType(a);\n        if (serClass != null) {\n            if (type.hasRawClass(serClass)) {\n                // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of\n                //    static typing this way\n                type = type.withStaticTyping();\n            } else {\n                try {\n                    // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,\n                    //   may be needed here too in future?\n                        type = tf.constructGeneralizedType(type, serClass);\n                } catch (IllegalArgumentException iae) {\n",
    "label": "buggy",
    "id": "ab5a95c5-39c2-4e6b-a64b-ab96ab6f6edf"
  },
  {
    "project": "Mockito",
    "bug_id": "26",
    "file": "org/mockito/internal/util/Primitives.java",
    "snippet": "    public static <T> T primitiveValueOrNullFor(Class<T> primitiveType) {\n        return (T) primitiveValues.get(primitiveType);\n    }\n    private static Map<Class<?>, Class<?>> wrapperTypes = new HashMap<Class<?>, Class<?>>();\n    private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();\n    private static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();\n    private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();\n\n    static {\n        primitiveTypes.put(Boolean.class, Boolean.TYPE);\n        primitiveTypes.put(Character.class, Character.TYPE);\n        primitiveTypes.put(Byte.class, Byte.TYPE);\n        primitiveTypes.put(Short.class, Short.TYPE);\n        primitiveTypes.put(Integer.class, Integer.TYPE);\n        primitiveTypes.put(Long.class, Long.TYPE);\n        primitiveTypes.put(Float.class, Float.TYPE);\n        primitiveTypes.put(Double.class, Double.TYPE);\n    }\n\n    static {\n        wrapperReturnValues.put(Boolean.class, false);\n        wrapperReturnValues.put(Character.class, '\\u0000');\n        wrapperReturnValues.put(Byte.class, (byte) 0);\n        wrapperReturnValues.put(Short.class, (short) 0);\n        wrapperReturnValues.put(Integer.class, 0);\n        wrapperReturnValues.put(Long.class, 0L);\n        wrapperReturnValues.put(Float.class, 0F);\n        wrapperReturnValues.put(Double.class, 0D);\n    }\n\n    static {\n        primitiveValues.put(boolean.class, false);\n        primitiveValues.put(char.class, '\\u0000');\n        primitiveValues.put(byte.class, (byte) 0);\n        primitiveValues.put(short.class, (short) 0);\n        primitiveValues.put(int.class, 0);\n        primitiveValues.put(long.class, 0L);\n        primitiveValues.put(float.class, 0F);\n        primitiveValues.put(double.class, 0D);\n    }\n}",
    "label": "clean",
    "id": "18ded09f-4b06-4beb-8ca1-2acc47fdc9c3"
  },
  {
    "project": "Lang",
    "bug_id": "40",
    "file": "org/apache/commons/lang/StringUtils.java",
    "snippet": "    /**\n     * <p>Checks if String contains a search String irrespective of case,\n     * handling <code>null</code>. Case-insensitivity is defined as by\n     * {@link String#equalsIgnoreCase(String)}.\n     *\n     * <p>A <code>null</code> String will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.contains(null, *) = false\n     * StringUtils.contains(*, null) = false\n     * StringUtils.contains(\"\", \"\") = true\n     * StringUtils.contains(\"abc\", \"\") = true\n     * StringUtils.contains(\"abc\", \"a\") = true\n     * StringUtils.contains(\"abc\", \"z\") = false\n     * StringUtils.contains(\"abc\", \"A\") = true\n     * StringUtils.contains(\"abc\", \"Z\") = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return true if the String contains the search String irrespective of\n     * case or false if not or <code>null</code> string input\n     */\n    public static boolean containsIgnoreCase(String str, String searchStr) {\n        if (str == null || searchStr == null) {\n            return false;\n        }\n        return contains(str.toUpperCase(), searchStr.toUpperCase());\n    }\n\n    // IndexOfAny chars\n    //-----------------------------------------------------------------------\n    /**\n",
    "label": "buggy",
    "id": "630ba757-2f1b-4c31-bf89-2a7bf28d83e6"
  },
  {
    "project": "Lang",
    "bug_id": "29",
    "file": "org/apache/commons/lang3/SystemUtils.java",
    "snippet": "    /**\n     * <p>\n     * Is the Java version at least the requested version.\n     * </p>\n     * \n     * <p>\n     * Example input:\n     * </p>\n     * <ul>\n     * <li><code>120</code> to test for Java 1.2 or greater</li>\n     * <li><code>131</code> to test for Java 1.3.1 or greater</li>\n     * </ul>\n     * \n     * @param requiredVersion\n     *            the required version, for example 131\n     * @return <code>true</code> if the actual version is equal or greater than the required version\n     * @since 2.0\n     */\n    public static boolean isJavaVersionAtLeast(int requiredVersion) {\n        return JAVA_VERSION_INT >= requiredVersion;\n    }\n\n    /**\n     * <p>\n     * Decides if the Java version matches.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @param version\n     *            the actual Java version\n     * @param versionPrefix\n     *            the prefix for the expected Java version\n     * @return true if matches, or false if not or can't determine\n     */\n    static boolean isJavaVersionMatch(String version, String versionPrefix) {\n        if (version == null) {\n            return false;\n        }\n        return version.startsWith(versionPrefix);\n    }\n\n    /**\n     * Decides if the operating system matches.\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @param osName\n     *            the actual OS name\n     * @param osVersion\n     *            the actual OS version\n     * @param osNamePrefix\n     *            the prefix for the expected OS name\n     * @param osVersionPrefix\n     *            the prefix for the expected OS version\n     * @return true if matches, or false if not or can't determine\n     */\n    static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix) {\n        if (osName == null || osVersion == null) {\n            return false;\n        }\n        return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);\n    }\n\n    /**\n     * Decides if the operating system matches.\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @param osName\n     *            the actual OS name\n     * @param osNamePrefix\n     *            the prefix for the expected OS name\n     * @return true if matches, or false if not or can't determine\n     */\n    static boolean isOSNameMatch(String osName, String osNamePrefix) {\n        if (osName == null) {\n            return false;\n        }\n        return osName.startsWith(osNamePrefix);\n    }\n\n    /**\n     * <p>\n     * Converts the given Java version string to a <code>float</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>1.2f</code> for Java 1.2</li>\n     * <li><code>1.31f</code> for Java 1.3.1</li>\n     * <li><code>1.6f</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @return the version, for example 1.31f for Java 1.3.1\n     */\n    static float toJavaVersionFloat(String version) {\n        return toVersionFloat(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n    }\n\n    /**\n     * <p>\n     * Converts the given Java version string to an <code>int</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>120</code> for Java 1.2</li>\n     * <li><code>131</code> for Java 1.3.1</li>\n     * <li><code>160</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @return the version, for example 131 for Java 1.3.1\n     */\n    static float toJavaVersionInt(String version) {\n        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n    }\n\n    /**\n     * <p>\n",
    "label": "buggy",
    "id": "28ca4003-7012-4137-a8df-55b6764da6b6"
  },
  {
    "project": "Math",
    "bug_id": "86",
    "file": "org/apache/commons/math/linear/CholeskyDecompositionImpl.java",
    "snippet": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math.linear;\n\nimport org.apache.commons.math.MathRuntimeException;\n\n\n/**\n * Calculates the Cholesky decomposition of a matrix.\n * <p>The Cholesky decomposition of a real symmetric positive-definite\n * matrix A consists of a lower triangular matrix L with same size that\n * satisfy: A = LL<sup>T</sup>Q = I). In a sense, this is the square root of A.</p>\n *\n * @see <a href=\"http://mathworld.wolfram.com/CholeskyDecomposition.html\">MathWorld</a>\n * @see <a href=\"http://en.wikipedia.org/wiki/Cholesky_decomposition\">Wikipedia</a>\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class CholeskyDecompositionImpl implements CholeskyDecomposition {\n\n    /** Default threshold above which off-diagonal elements are considered too different\n     * and matrix not symmetric. */\n    public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;\n\n    /** Default threshold below which diagonal elements are considered null\n     * and matrix not positive definite. */\n    public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;\n\n    /** Row-oriented storage for L<sup>T</sup> matrix data. */\n    private double[][] lTData;\n\n    /** Cached value of L. */\n    private RealMatrix cachedL;\n\n    /** Cached value of LT. */\n    private RealMatrix cachedLT;\n\n    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * <p>\n     * Calling this constructor is equivalent to call {@link\n     * #CholeskyDecompositionImpl(RealMatrix, double, double)} with the\n     * thresholds set to the default values {@link\n     * #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD} and {@link\n     * #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD}\n     * </p>\n     * @param matrix the matrix to decompose\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix, double, double)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n        this(matrix, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD,\n             DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD);\n    }\n\n    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * @param matrix the matrix to decompose\n     * @param relativeSymmetryThreshold threshold above which off-diagonal\n     * elements are considered too different and matrix not symmetric\n     * @param absolutePositivityThreshold threshold below which diagonal\n     * elements are considered null and matrix not positive definite\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        lTData   = matrix.getData();\n        cachedL  = null;\n        cachedLT = null;\n\n        // check the matrix before transformation\n        for (int i = 0; i < order; ++i) {\n\n            final double[] lI = lTData[i];\n\n            // check off-diagonal elements (and reset them to 0)\n            for (int j = i + 1; j < order; ++j) {\n                final double[] lJ = lTData[j];\n                final double lIJ = lI[j];\n                final double lJI = lJ[i];\n",
    "label": "clean",
    "id": "fe319df8-f01c-4ded-b711-4aba5950db8b"
  },
  {
    "project": "Lang",
    "bug_id": "59",
    "file": "org/apache/commons/lang/text/StrBuilder.java",
    "snippet": "    /**\n     * Appends an object to the builder padding on the right to a fixed length.\n     * The <code>toString</code> of the object is used.\n     * If the object is larger than the length, the right hand side is lost.\n     * If the object is null, null text value is used.\n     * \n     * @param obj  the object to append, null uses null text\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n        if (width > 0) {\n            ensureCapacity(size + width);\n            String str = (obj == null ? getNullText() : obj.toString());\n            int strLen = str.length();\n            if (strLen >= width) {\n                str.getChars(0, width, buffer, size);\n            } else {\n                int padLen = width - strLen;\n                str.getChars(0, strLen, buffer, size);\n                for (int i = 0; i < padLen; i++) {\n                    buffer[size + strLen + i] = padChar;\n",
    "label": "clean",
    "id": "5aca881e-2957-4ea7-b40b-10242dc1ec8a"
  },
  {
    "project": "JacksonCore",
    "bug_id": "26",
    "file": "com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java",
    "snippet": "    /**********************************************************************\n     */\n\n    @Override\n    public ByteArrayFeeder getNonBlockingInputFeeder() {\n        return this;\n    }\n\n    @Override\n    public final boolean needMoreInput() {\n        return (_inputPtr >=_inputEnd) && !_endOfInput;\n    }\n\n    @Override\n    public void feedInput(byte[] buf, int start, int end) throws IOException\n    {\n        // Must not have remaining input\n        if (_inputPtr < _inputEnd) {\n            _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n        }\n        if (end < start) {\n            _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n        }\n        // and shouldn't have been marked as end-of-input\n        if (_endOfInput) {\n            _reportError(\"Already closed, can not feed more input\");\n        }\n        // Time to update pointers first\n        _currInputProcessed += _origBufferLen;\n\n        // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n        _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n\n        // And then update buffer settings\n        _inputBuffer = buf;\n        _inputPtr = start;\n        _inputEnd = end;\n        _origBufferLen = end - start;\n    }\n",
    "label": "buggy",
    "id": "d8996612-64ad-48c7-8fd2-6a93a1aa2bf6"
  },
  {
    "project": "Codec",
    "bug_id": "2",
    "file": "org/apache/commons/codec/binary/Base64.java",
    "snippet": "    /** Doubles our buffer. */\n    private void resizeBuf() {\n        if (buf == null) {\n            buf = new byte[8192];\n            pos = 0;\n            readPos = 0;\n        } else {\n            byte[] b = new byte[buf.length * 2];\n            System.arraycopy(buf, 0, b, 0, buf.length);\n            buf = b;\n        }\n    }\n\n    /**\n     * Extracts buffered data into the provided byte[] array, starting\n     * at position bPos, up to a maximum of bAvail bytes.  Returns how\n     * many bytes were actually extracted.\n     *\n     * @param b      byte[] array to extract the buffered data into.\n     * @param bPos   position in byte[] array to start extraction at.\n     * @param bAvail amount of bytes we're allowed to extract.  We may extract\n     *               fewer (if fewer are available).\n     * @return The number of bytes successfully extracted into the provided\n     *         byte[] array.\n     */\n    int readResults(byte[] b, int bPos, int bAvail) {\n        if (buf != null) {\n            int len = Math.min(avail(), bAvail);\n            if (buf != b) {\n                System.arraycopy(buf, readPos, b, bPos, len);\n                readPos += len;\n                if (readPos >= pos) {\n                    buf = null;\n                }\n            } else {\n                // Re-using the original consumer's output array is only\n                // allowed for one round.\n                buf = null;\n            }\n            return len;\n        }\n        return eof ? -1 : 0;\n    }\n\n    /**\n     * Sets the streaming buffer. This is a small optimization where we try to buffer directly to the consumer's output\n     * array for one round (if the consumer calls this method first) instead of starting our own buffer.\n     * \n     * @param out byte[] array to buffer directly to.\n     * @param outPos Position to start buffering into.\n     * @param outAvail Amount of bytes available for direct buffering.\n     */\n    void setInitialBuffer(byte[] out, int outPos, int outAvail) {\n        // We can re-use consumer's original output array under\n        // special circumstances, saving on some System.arraycopy().\n        if (out != null && out.length == outAvail) {\n            buf = out;\n            pos = outPos;\n            readPos = outPos;\n        }\n    }\n\n    /**\n     * <p>\n     * Encodes all of the provided data, starting at inPos, for inAvail bytes.\n     * Must be called at least twice:  once with the data to encode, and once\n     * with inAvail set to \"-1\" to alert encoder that EOF has been reached,\n     * so flush last remaining bytes (if not multiple of 3).\n     * </p><p>\n     * Thanks to \"commons\" project in ws.apache.org for the bitwise operations,\n     * and general approach.\n     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     * </p>\n     *\n     * @param in byte[] array of binary data to base64 encode.\n     * @param inPos Position to start reading data from.\n     * @param inAvail Amount of bytes available from input for encoding.\n     */\n    void encode(byte[] in, int inPos, int inAvail) {\n        if (eof) {\n            return;\n        }\n        // inAvail < 0 is how we're informed of EOF in the underlying data we're\n        // encoding.\n        if (inAvail < 0) {\n            eof = true;\n            if (buf == null || buf.length - pos < encodeSize) {\n                resizeBuf();\n            }\n            switch (modulus) {\n                case 1:\n                    buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                    buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buf[pos++] = PAD;\n                        buf[pos++] = PAD;\n                    }\n                    break;\n\n                case 2:\n                    buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                    buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                    buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buf[pos++] = PAD;\n                    }\n                    break;\n            }\n            if (lineLength > 0 && pos > 0) {\n                System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n                pos += lineSeparator.length;\n            }\n        } else {\n            for (int i = 0; i < inAvail; i++) {\n",
    "label": "clean",
    "id": "cbdcf004-d019-458d-833f-777a394867ad"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "27",
    "file": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "snippet": "    /**\n     * Copy-constructor that can be used by sub-classes to allow\n     * copy-on-write style copying of settings of an existing instance.\n     */\n    protected BeanDeserializer(BeanDeserializerBase src) {\n        super(src, src._ignoreAllUnknown);\n    }\n\n    protected BeanDeserializer(BeanDeserializerBase src, boolean ignoreAllUnknown) {\n        super(src, ignoreAllUnknown);\n    }\n\n    protected BeanDeserializer(BeanDeserializerBase src, NameTransformer unwrapper) {\n        super(src, unwrapper);\n    }\n\n    public BeanDeserializer(BeanDeserializerBase src, ObjectIdReader oir) {\n        super(src, oir);\n    }\n\n    public BeanDeserializer(BeanDeserializerBase src, HashSet<String> ignorableProps) {\n        super(src, ignorableProps);\n    }\n\n    @Override\n    public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper)\n    {\n        /* bit kludgy but we don't want to accidentally change type; sub-classes\n         * MUST override this method to support unwrapped properties...\n         */\n        if (getClass() != BeanDeserializer.class) {\n            return this;\n        }\n        /* main thing really is to just enforce ignoring of unknown\n         * properties; since there may be multiple unwrapped values\n         * and properties for all may be interleaved...\n         */\n        return new BeanDeserializer(this, unwrapper);\n    }\n\n    @Override\n    public BeanDeserializer withObjectIdReader(ObjectIdReader oir) {\n        return new BeanDeserializer(this, oir);\n    }\n\n    @Override\n    public BeanDeserializer withIgnorableProperties(HashSet<String> ignorableProps) {\n        return new BeanDeserializer(this, ignorableProps);\n    }\n\n    @Override\n    protected BeanDeserializerBase asArrayDeserializer() {\n        SettableBeanProperty[] props = _beanProperties.getPropertiesInInsertionOrder();\n        return new BeanAsArrayDeserializer(this, props);\n    }\n    \n    /*\n    /**********************************************************\n    /* JsonDeserializer implementation\n    /**********************************************************\n     */\n\n    /**\n     * Main deserialization method for bean-based objects (POJOs).\n     *<p>\n     * NOTE: was declared 'final' in 2.2; should NOT be to let extensions\n     * like Afterburner change definition.\n     */\n    @Override\n    public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // common case first\n        if (p.isExpectedStartObjectToken()) {\n            if (_vanillaProcessing) {\n                return vanillaDeserialize(p, ctxt, p.nextToken());\n            }\n            p.nextToken();\n            if (_objectIdReader != null) {\n                return deserializeWithObjectId(p, ctxt);\n            }\n            return deserializeFromObject(p, ctxt);\n        }\n        JsonToken t = p.getCurrentToken();\n        return _deserializeOther(p, ctxt, t);\n    }\n\n    protected final Object _deserializeOther(JsonParser p, DeserializationContext ctxt,\n            JsonToken t) throws IOException\n    {\n        // and then others, generally requiring use of @JsonCreator\n        switch (t) {\n        case VALUE_STRING:\n            return deserializeFromString(p, ctxt);\n        case VALUE_NUMBER_INT:\n            return deserializeFromNumber(p, ctxt);\n        case VALUE_NUMBER_FLOAT:\n\t    return deserializeFromDouble(p, ctxt);\n        case VALUE_EMBEDDED_OBJECT:\n            return deserializeFromEmbedded(p, ctxt);\n        case VALUE_TRUE:\n        case VALUE_FALSE:\n            return deserializeFromBoolean(p, ctxt);\n        case START_ARRAY:\n            // these only work if there's a (delegating) creator...\n            return deserializeFromArray(p, ctxt);\n        case FIELD_NAME:\n        case END_OBJECT: // added to resolve [JACKSON-319], possible related issues\n            if (_vanillaProcessing) {\n                return vanillaDeserialize(p, ctxt, t);\n            }\n            if (_objectIdReader != null) {\n                return deserializeWithObjectId(p, ctxt);\n            }\n            return deserializeFromObject(p, ctxt);\n        default:\n            throw ctxt.mappingException(handledType());\n        }\n    }\n\n    protected Object _missingToken(JsonParser p, DeserializationContext ctxt) throws IOException {\n        throw ctxt.endOfInputException(handledType());\n    }\n\n    /**\n     * Secondary deserialization method, called in cases where POJO\n     * instance is created as part of deserialization, potentially\n     * after collecting some or all of the properties to set.\n     */\n    @Override\n    public Object deserialize(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException\n    {\n        // [databind#631]: Assign current value, to be accessible by custom serializers\n        p.setCurrentValue(bean);\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        if (_unwrappedPropertyHandler != null) {\n            return deserializeWithUnwrapped(p, ctxt, bean);\n        }\n        if (_externalTypeIdHandler != null) {\n            return deserializeWithExternalTypeId(p, ctxt, bean);\n        }\n        String propName;\n\n        // 23-Mar-2010, tatu: In some cases, we start with full JSON object too...\n        if (p.isExpectedStartObjectToken()) {\n            propName = p.nextFieldName();\n            if (propName == null) {\n                return bean;\n            }\n        } else {\n            if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n                propName = p.getCurrentName();\n            } else {\n                return bean;\n            }\n        }\n        if (_needViewProcesing) {\n            Class<?> view = ctxt.getActiveView();\n            if (view != null) {\n                return deserializeWithView(p, ctxt, bean, view);\n            }\n        }\n        do {\n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n\n            if (prop != null) { // normal case\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            handleUnknownVanilla(p, ctxt, bean, propName);\n        } while ((propName = p.nextFieldName()) != null);\n        return bean;\n    }\n\n    /*\n    /**********************************************************\n    /* Concrete deserialization methods\n    /**********************************************************\n     */\n\n    /**\n     * Streamlined version that is only used when no \"special\"\n     * features are enabled.\n     */\n    private final Object vanillaDeserialize(JsonParser p,\n    \t\tDeserializationContext ctxt, JsonToken t)\n        throws IOException\n    {\n        final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        // [databind#631]: Assign current value, to be accessible by custom serializers\n        p.setCurrentValue(bean);\n        if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n            String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                SettableBeanProperty prop = _beanProperties.find(propName);\n\n                if (prop != null) { // normal case\n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null);\n        }\n        return bean;\n    }\n\n    /**\n     * General version used when handling needs more advanced features.\n     */\n    @Override\n    public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        /* 09-Dec-2014, tatu: As per [#622], we need to allow Object Id references\n         *   to come in as JSON Objects as well; but for now assume they will\n         *   be simple, single-property references, which means that we can\n         *   recognize them without having to buffer anything.\n         *   Once again, if we must, we can do more complex handling with buffering,\n         *   but let's only do that if and when that becomes necessary.\n         */\n        if (_objectIdReader != null && _objectIdReader.maySerializeAsObject()) {\n            if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)\n                    && _objectIdReader.isValidReferencePropertyName(p.getCurrentName(), p)) {\n                return deserializeFromObjectId(p, ctxt);\n            }\n        }\n        if (_nonStandardCreation) {\n            if (_unwrappedPropertyHandler != null) {\n                return deserializeWithUnwrapped(p, ctxt);\n            }\n            if (_externalTypeIdHandler != null) {\n                return deserializeWithExternalTypeId(p, ctxt);\n            }\n            Object bean = deserializeFromObjectUsingNonDefault(p, ctxt);\n            if (_injectables != null) {\n                injectValues(ctxt, bean);\n            }\n            /* 27-May-2014, tatu: I don't think view processing would work\n             *   at this point, so commenting it out; but leaving in place\n             *   just in case I forgot something fundamental...\n             */\n            /*\n            if (_needViewProcesing) {\n                Class<?> view = ctxt.getActiveView();\n                if (view != null) {\n                    return deserializeWithView(p, ctxt, bean, view);\n                }\n            }\n            */\n            return bean;\n        }\n        final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        // [databind#631]: Assign current value, to be accessible by custom deserializers\n        p.setCurrentValue(bean);\n        if (p.canReadObjectId()) {\n            Object id = p.getObjectId();\n            if (id != null) {\n                _handleTypedObjectId(p, ctxt, bean, id);\n            }\n        }\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        if (_needViewProcesing) {\n            Class<?> view = ctxt.getActiveView();\n            if (view != null) {\n                return deserializeWithView(p, ctxt, bean, view);\n            }\n        }\n        if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n            String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                SettableBeanProperty prop = _beanProperties.find(propName);\n                if (prop != null) { // normal case\n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null);\n        }\n        return bean;\n    }\n\n    /**\n     * Method called to deserialize bean using \"property-based creator\":\n     * this means that a non-default constructor or factory method is\n     * called, and then possibly other setters. The trick is that\n     * values for creator method need to be buffered, first; and\n     * due to non-guaranteed ordering possibly some other properties\n     * as well.\n     */\n    @Override\n    @SuppressWarnings(\"resource\")\n    protected Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt)\n        throws IOException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        // 04-Jan-2010, tatu: May need to collect unknown properties for polymorphic cases\n        TokenBuffer unknown = null;\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                // Last creator property to set?\n                if (buffer.assignParameter(creatorProp,\n                        _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    p.nextToken(); // to move to following FIELD_NAME/END_OBJECT\n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapInstantiationProblem(e, ctxt);\n                        bean = null; // never gets here\n                    }\n                    if (bean == null) {\n                        throw ctxt.instantiationException(_beanType.getRawClass(), \"JSON Creator returned null\");\n                    }\n                    // [databind#631]: Assign current value, to be accessible by custom serializers\n                    p.setCurrentValue(bean);\n\n                    //  polymorphic?\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        return handlePolymorphic(p, ctxt, bean, unknown);\n                    }\n                    if (unknown != null) { // nope, just extra unknown stuff...\n                        bean = handleUnknownProperties(ctxt, bean, unknown);\n                    }\n                    // or just clean?\n                    return deserialize(p, ctxt, bean);\n                }\n                continue;\n            }\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            // regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n                continue;\n            }\n            // As per [JACKSON-313], things marked as ignorable should not be\n            // passed to any setter\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            // \"any property\"?\n            if (_anySetter != null) {\n                try {\n                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n                continue;\n            }\n            // Ok then, let's collect the whole field; name and value\n            if (unknown == null) {\n                unknown = new TokenBuffer(p);\n            }\n            unknown.writeFieldName(propName);\n            unknown.copyCurrentStructure(p);\n        }\n\n        // We hit END_OBJECT, so:\n        Object bean;\n        try {\n            bean =  creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            bean = null; // never gets here\n        }\n        if (unknown != null) {\n            // polymorphic?\n            if (bean.getClass() != _beanType.getRawClass()) {\n                return handlePolymorphic(null, ctxt, bean, unknown);\n            }\n            // no, just some extra unknown properties\n            return handleUnknownProperties(ctxt, bean, unknown);\n        }\n        return bean;\n    }\n\n    protected final Object _deserializeWithErrorWrapping(JsonParser p,\n            DeserializationContext ctxt, SettableBeanProperty prop)\n        throws IOException\n    {\n        try {\n            return prop.deserialize(p, ctxt);\n        } catch (Exception e) {\n            wrapAndThrow(e, _beanType.getRawClass(), prop.getName(), ctxt);\n            // never gets here, unless caller declines to throw an exception\n            return null;\n        }\n    }\n\n    /*\n    /**********************************************************\n    /* Deserializing when we have to consider an active View\n    /**********************************************************\n     */\n\n    protected final Object deserializeWithView(JsonParser p, DeserializationContext ctxt,\n            Object bean, Class<?> activeView)\n        throws IOException\n    {\n        if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n            String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                // TODO: 06-Jan-2015, tatu: try streamlining call sequences here as well\n                SettableBeanProperty prop = _beanProperties.find(propName);\n                if (prop != null) {\n                    if (!prop.visibleInView(activeView)) {\n                        p.skipChildren();\n                        continue;\n                    }\n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null);\n        }\n        return bean;\n    }\n    \n    /*\n    /**********************************************************\n    /* Handling for cases where we have \"unwrapped\" values\n    /**********************************************************\n     */\n\n    /**\n     * Method called when there are declared \"unwrapped\" properties\n     * which need special handling\n     */\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt)\n        throws IOException\n    {\n        if (_delegateDeserializer != null) {\n            return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n        }\n        if (_propertyBasedCreator != null) {\n            return deserializeUsingPropertyBasedWithUnwrapped(p, ctxt);\n        }\n        TokenBuffer tokens = new TokenBuffer(p);\n        tokens.writeStartObject();\n        final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n\n        // [databind#631]: Assign current value, to be accessible by custom serializers\n        p.setCurrentValue(bean);\n\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n        String propName = p.hasTokenId(JsonTokenId.ID_FIELD_NAME) ? p.getCurrentName() : null;\n\n        for (; propName != null; propName = p.nextFieldName()) {\n            p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) { // normal case\n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            // ignorable things should be ignored\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            // but... others should be passed to unwrapped property deserializers\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            // how about any setter? We'll get copies but...\n            if (_anySetter != null) {\n                try {\n                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n        }\n        tokens.writeEndObject();\n        _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext ctxt, Object bean)\n        throws IOException\n    {\n        JsonToken t = p.getCurrentToken();\n        if (t == JsonToken.START_OBJECT) {\n            t = p.nextToken();\n        }\n        TokenBuffer tokens = new TokenBuffer(p);\n        tokens.writeStartObject();\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            p.nextToken();\n            if (prop != null) { // normal case\n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            // but... others should be passed to unwrapped property deserializers\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            // how about any setter? We'll get copies but...\n            if (_anySetter != null) {\n                _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n            }\n        }\n        tokens.writeEndObject();\n        _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n        return bean;\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)\n        throws IOException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                // Last creator property to set?\n                if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT\n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapInstantiationProblem(e, ctxt);\n                        continue; // never gets here\n                    }\n                    // [databind#631]: Assign current value, to be accessible by custom serializers\n                    p.setCurrentValue(bean);\n                    // if so, need to copy all remaining tokens into buffer\n                    while (t == JsonToken.FIELD_NAME) {\n                        p.nextToken(); // to skip name\n                        tokens.copyCurrentStructure(p);\n                        t = p.nextToken();\n                    }\n                    tokens.writeEndObject();\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        // !!! 08-Jul-2011, tatu: Could probably support; but for now\n                        //   it's too complicated, so bail out\n                        tokens.close();\n                        throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    }\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                }\n                continue;\n            }\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            // regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n                continue;\n            }\n\n            /* As per [JACKSON-313], things marked as ignorable should not be\n             * passed to any setter\n             */\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            // \"any property\"?\n            if (_anySetter != null) {\n                try {\n                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n            }\n        }\n\n        // We hit END_OBJECT, so:\n        Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            return null; // never gets here\n        }\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }\n\n    /*\n    /**********************************************************\n    /* Handling for cases where we have property/-ies with\n    /* external type id\n    /**********************************************************\n     */\n\n    protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n        throws IOException\n    {\n        if (_propertyBasedCreator != null) {\n            return deserializeUsingPropertyBasedWithExternalTypeId(p, ctxt);\n        }\n        return deserializeWithExternalTypeId(p, ctxt, _valueInstantiator.createUsingDefault(ctxt));\n    }\n\n    protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt,\n            Object bean)\n        throws IOException\n    {\n        final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n        final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n\n        for (JsonToken t = p.getCurrentToken(); t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            t = p.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) { // normal case\n                // [JACKSON-831]: may have property AND be used as external type id:\n                if (t.isScalarValue()) {\n                    ext.handleTypePropertyValue(p, ctxt, propName, bean);\n                }\n                if (activeView != null && !prop.visibleInView(activeView)) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            // ignorable things should be ignored\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            // but others are likely to be part of external type id thingy...\n            if (ext.handlePropertyValue(p, ctxt, propName, bean)) {\n                continue;\n            }\n            // if not, the usual fallback handling:\n            if (_anySetter != null) {\n                try {\n                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            // Unknown: let's call handler method\n            handleUnknownProperty(p, ctxt, bean, propName);\n        }\n        // and when we get this far, let's try finalizing the deal:\n        return ext.complete(p, ctxt, bean);\n    }\n\n    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n        throws IOException\n    {\n        final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                // first: let's check to see if this might be part of value with external type id:\n                // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,\n                //   since it is not the bean\n                if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                    ;\n                } else {\n                    // Last creator property to set?\n                    if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                        t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT\n",
    "label": "clean",
    "id": "0e88cfcd-4a7e-4dd3-bdf0-c38e178ec57c"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "36",
    "file": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "snippet": "    /**********************************************************\n     */\n\n    @Override // since 2.6\n    public TimeZone getTimeZone() {\n        return _timezone;\n    }\n\n    @Override\n    public void setTimeZone(TimeZone tz)\n    {\n        /* DateFormats are timezone-specific (via Calendar contained),\n         * so need to reset instances if timezone changes:\n         */\n        if (!tz.equals(_timezone)) {\n            _clearFormats();\n            _timezone = tz;\n        }\n    }\n\n    /**\n     * Need to override since we need to keep track of leniency locally,\n     * and not via underlying {@link Calendar} instance like base class\n     * does.\n     */\n            // and since leniency settings may have been used:\n\n    @Override // since 2.7\n    public boolean isLenient() {\n        if (_lenient == null) {\n",
    "label": "buggy",
    "id": "00481ca9-086d-4411-be42-42186f2af326"
  },
  {
    "project": "Chart",
    "bug_id": "13",
    "file": "org/jfree/chart/block/BorderArrangement.java",
    "snippet": "    /**\n     * Performs an arrangement without constraints.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     *\n     * @return The container size after the arrangement.\n     */\n    protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        if (this.topBlock != null) {\n            Size2D size = this.topBlock.arrange(g2, RectangleConstraint.NONE);\n            w[0] = size.width;\n            h[0] = size.height;\n        }\n        if (this.bottomBlock != null) {\n            Size2D size = this.bottomBlock.arrange(g2,\n                    RectangleConstraint.NONE);\n            w[1] = size.width;\n            h[1] = size.height;\n        }\n        if (this.leftBlock != null) {\n            Size2D size = this.leftBlock.arrange(g2, RectangleConstraint.NONE);\n            w[2] = size.width;\n            h[2] = size.height;\n       }\n        if (this.rightBlock != null) {\n            Size2D size = this.rightBlock.arrange(g2, RectangleConstraint.NONE);\n            w[3] = size.width;\n            h[3] = size.height;\n        }\n\n        h[2] = Math.max(h[2], h[3]);\n        h[3] = h[2];\n\n        if (this.centerBlock != null) {\n            Size2D size = this.centerBlock.arrange(g2,\n                    RectangleConstraint.NONE);\n            w[4] = size.width;\n            h[4] = size.height;\n        }\n        double width = Math.max(w[0], Math.max(w[1], w[2] + w[4] + w[3]));\n        double centerHeight = Math.max(h[2], Math.max(h[3], h[4]));\n        double height = h[0] + h[1] + centerHeight;\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, width,\n                    h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0,\n                    height - h[1], width, h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                    centerHeight));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(width - w[3],\n                    h[0], w[3], centerHeight));\n        }\n\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0],\n                    width - w[2] - w[3], centerHeight));\n        }\n        return new Size2D(width, height);\n    }\n\n    /**\n     * Performs an arrangement with a fixed width and a range for the height.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The container size after the arrangement.\n     */\n    protected Size2D arrangeFR(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n        Size2D size1 = arrangeFN(container, g2, constraint.getWidth());\n        if (constraint.getHeightRange().contains(size1.getHeight())) {\n            return size1;\n        }\n        else {\n            double h = constraint.getHeightRange().constrain(size1.getHeight());\n            RectangleConstraint c2 = constraint.toFixedHeight(h);\n            return arrange(container, g2, c2);\n        }\n    }\n\n    /**\n     * Arranges the container width a fixed width and no constraint on the\n     * height.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param width  the fixed width.\n     *\n     * @return The container size after arranging the contents.\n     */\n    protected Size2D arrangeFN(BlockContainer container, Graphics2D g2,\n                               double width) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        RectangleConstraint c1 = new RectangleConstraint(width, null,\n                LengthConstraintType.FIXED, 0.0, null,\n                LengthConstraintType.NONE);\n        if (this.topBlock != null) {\n            Size2D size = this.topBlock.arrange(g2, c1);\n            w[0] = size.width;\n            h[0] = size.height;\n        }\n        if (this.bottomBlock != null) {\n            Size2D size = this.bottomBlock.arrange(g2, c1);\n            w[1] = size.width;\n            h[1] = size.height;\n        }\n        RectangleConstraint c2 = new RectangleConstraint(0.0,\n                new Range(0.0, width), LengthConstraintType.RANGE,\n                0.0, null, LengthConstraintType.NONE);\n        if (this.leftBlock != null) {\n            Size2D size = this.leftBlock.arrange(g2, c2);\n            w[2] = size.width;\n            h[2] = size.height;\n        }\n        if (this.rightBlock != null) {\n            double maxW = Math.max(width - w[2], 0.0);\n            RectangleConstraint c3 = new RectangleConstraint(0.0,\n                    new Range(Math.min(w[2], maxW), maxW),\n                    LengthConstraintType.RANGE, 0.0, null,\n                    LengthConstraintType.NONE);\n            Size2D size = this.rightBlock.arrange(g2, c3);\n            w[3] = size.width;\n            h[3] = size.height;\n        }\n\n        h[2] = Math.max(h[2], h[3]);\n        h[3] = h[2];\n\n        if (this.centerBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(width - w[2]\n                    - w[3], null, LengthConstraintType.FIXED, 0.0, null,\n                    LengthConstraintType.NONE);\n            Size2D size = this.centerBlock.arrange(g2, c4);\n            w[4] = size.width;\n            h[4] = size.height;\n        }\n        double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));\n        return arrange(container, g2, new RectangleConstraint(width, height));\n    }\n\n    /**\n     * Performs an arrangement with range constraints on both the vertical\n     * and horizontal sides.\n     *\n     * @param container  the container.\n     * @param widthRange  the allowable range for the container width.\n     * @param heightRange  the allowable range for the container height.\n     * @param g2  the graphics device.\n     *\n     * @return The container size.\n     */\n    protected Size2D arrangeRR(BlockContainer container,\n                               Range widthRange, Range heightRange,\n                               Graphics2D g2) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(widthRange,\n                    heightRange);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            w[0] = size.width;\n            h[0] = size.height;\n        }\n        if (this.bottomBlock != null) {\n            Range heightRange2 = Range.shift(heightRange, -h[0], false);\n            RectangleConstraint c2 = new RectangleConstraint(widthRange,\n                    heightRange2);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            w[1] = size.width;\n            h[1] = size.height;\n        }\n        Range heightRange3 = Range.shift(heightRange, -(h[0] + h[1]));\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(widthRange,\n                    heightRange3);\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.width;\n            h[2] = size.height;\n        }\n        Range widthRange2 = Range.shift(widthRange, -w[2], false);\n        if (this.rightBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(widthRange2,\n                    heightRange3);\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.width;\n            h[3] = size.height;\n        }\n\n        h[2] = Math.max(h[2], h[3]);\n        h[3] = h[2];\n        Range widthRange3 = Range.shift(widthRange, -(w[2] + w[3]), false);\n        if (this.centerBlock != null) {\n            RectangleConstraint c5 = new RectangleConstraint(widthRange3,\n                    heightRange3);\n            // TODO:  the width and height ranges should be reduced by the\n            // height required for the top and bottom, and the width required\n            // by the left and right\n            Size2D size = this.centerBlock.arrange(g2, c5);\n            w[4] = size.width;\n            h[4] = size.height;\n        }\n        double width = Math.max(w[0], Math.max(w[1], w[2] + w[4] + w[3]));\n        double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, width,\n                    h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0,\n                    height - h[1], width, h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                    h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(width - w[3],\n                    h[0], w[3], h[3]));\n        }\n\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0],\n                    width - w[2] - w[3], height - h[0] - h[1]));\n        }\n        return new Size2D(width, height);\n    }\n\n    /**\n     * Arranges the items within a container.\n     *\n     * @param container  the container.\n     * @param constraint  the constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The container size after the arrangement.\n     */\n    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        w[0] = constraint.getWidth();\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0,\n                    new Range(0.0, constraint.getHeight()),\n                    LengthConstraintType.RANGE);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.height;\n        }\n        w[1] = w[0];\n        if (this.bottomBlock != null) {\n            RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.height;\n        }\n        h[2] = constraint.getHeight() - h[1] - h[0];\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth()),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.width;\n        }\n        h[3] = h[2];\n        if (this.rightBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth() - w[2]),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.width;\n        }\n",
    "label": "buggy",
    "id": "29d99e26-d6d0-46c5-a048-ec92b50f0750"
  },
  {
    "project": "Lang",
    "bug_id": "38",
    "file": "org/apache/commons/lang3/time/FastDateFormat.java",
    "snippet": "    /**\n     * <p>Formats a <code>Calendar</code> object into the\n     * supplied <code>StringBuffer</code>.</p>\n     * \n     * @param calendar  the calendar to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     */\n    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        if (mTimeZoneForced) {\n            calendar.getTime(); /// LANG-538\n            calendar = (Calendar) calendar.clone();\n            calendar.setTimeZone(mTimeZone);\n        }\n        return applyRules(calendar, buf);\n    }\n",
    "label": "clean",
    "id": "a2f08aa1-cfd9-436c-b247-90310b3f56ea"
  },
  {
    "project": "Closure",
    "bug_id": "40",
    "file": "com/google/javascript/jscomp/NameAnalyzer.java",
    "snippet": "  /**\n   * Identifies all declarations of global names and setter statements\n   * affecting global symbols (assignments to global names).\n   *\n   * All declarations and setters must be gathered in a single\n   * traversal and stored in traversal order so \"removeUnreferenced\"\n   * can perform modifications in traversal order.\n   */\n  private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n\n      // Record global variable and function declarations\n      if (t.inGlobalScope()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          Preconditions.checkNotNull(ns);\n          recordSet(ns.name, n);\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n          Node nameNode = n.getFirstChild();\n          NameInformation ns = createNameInformation(t, nameNode, n);\n          if (ns != null) {\n            JsName nameInfo = getName(nameNode.getString(), true);\n            recordSet(nameInfo.name, nameNode);\n          }\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          if (ns != null) {\n            recordSet(ns.name, n);\n          }\n        }\n      }\n\n      // Record assignments and call sites\n      if (n.isAssign()) {\n        Node nameNode = n.getFirstChild();\n\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            recordSet(ns.name, nameNode);\n          }\n        }\n      } else if (n.isCall()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null && ns.onlyAffectsClassDef) {\n          JsName name = getName(ns.name, false);\n          if (name != null) {\n          refNodes.add(new ClassDefiningFunctionNode(\n              name, n, parent, parent.getParent()));\n          }\n        }\n",
    "label": "buggy",
    "id": "a0926e76-add2-4119-8513-ea82e1f50ebd"
  },
  {
    "project": "Csv",
    "bug_id": "1",
    "file": "org/apache/commons/csv/ExtendedBufferedReader.java",
    "snippet": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.csv;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.Reader;\n\n/**\n * ExtendedBufferedReader\n *\n * A special reader decorator which supports more\n * sophisticated access to the underlying reader object.\n *\n * In particular the reader supports a look-ahead option,\n * which allows you to see the next char returned by\n * next().\n */\nclass ExtendedBufferedReader extends BufferedReader {\n\n    /** The end of stream symbol */\n    static final int END_OF_STREAM = -1;\n\n    /** Undefined state for the lookahead char */\n    static final int UNDEFINED = -2;\n\n    /** The last char returned */\n    private int lastChar = UNDEFINED;\n\n    /** The line counter */\n    private int lineCounter = 0;\n\n    /**\n     * Created extended buffered reader using default buffer-size\n     */\n    ExtendedBufferedReader(Reader r) {\n        super(r);\n    }\n\n    @Override\n    public int read() throws IOException {\n        int current = super.read();\n        if (current == '\\n') {\n            lineCounter++;\n        }\n        lastChar = current;\n        return lastChar;\n    }\n",
    "label": "buggy",
    "id": "59bf9138-f329-4425-b72e-7654b4063bbf"
  },
  {
    "project": "Math",
    "bug_id": "50",
    "file": "org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
    "snippet": "    /** {@inheritDoc} */\n    protected final double doSolve() {\n        // Get initial solution\n        double x0 = getMin();\n        double x1 = getMax();\n        double f0 = computeObjectiveValue(x0);\n        double f1 = computeObjectiveValue(x1);\n\n        // If one of the bounds is the exact root, return it. Since these are\n        // not under-approximations or over-approximations, we can return them\n        // regardless of the allowed solutions.\n        if (f0 == 0.0) {\n            return x0;\n        }\n        if (f1 == 0.0) {\n            return x1;\n        }\n\n        // Verify bracketing of initial solution.\n        verifyBracketing(x0, x1);\n\n        // Get accuracies.\n        final double ftol = getFunctionValueAccuracy();\n        final double atol = getAbsoluteAccuracy();\n        final double rtol = getRelativeAccuracy();\n\n        // Keep track of inverted intervals, meaning that the left bound is\n        // larger than the right bound.\n        boolean inverted = false;\n\n        // Keep finding better approximations.\n        while (true) {\n            // Calculate the next approximation.\n            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n            final double fx = computeObjectiveValue(x);\n\n            // If the new approximation is the exact root, return it. Since\n            // this is not an under-approximation or an over-approximation,\n            // we can return it regardless of the allowed solutions.\n            if (fx == 0.0) {\n                return x;\n            }\n\n            // Update the bounds with the new approximation.\n            if (f1 * fx < 0) {\n                // The value of x1 has switched to the other bound, thus inverting\n                // the interval.\n                x0 = x1;\n                f0 = f1;\n                inverted = !inverted;\n            } else {\n                switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                case REGULA_FALSI:\n                    // Nothing.\n                    if (x == x1) {\n                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                        f0 = computeObjectiveValue(x0);\n                    }\n                    break;\n                default:\n",
    "label": "buggy",
    "id": "13274c11-02d4-4c32-891c-5b7fb7e445de"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "12",
    "file": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "snippet": "    /**\n     * Turns out that these are expensive enough to create so that caching\n     * does make sense.\n     *<p>\n     * IMPORTANT: but, note, that instances CAN NOT BE CACHED if there is\n     * a value type deserializer; this caused an issue with 2.4.4 of\n     * JAXB Annotations (failing a test).\n     * It is also possible that some other settings could make deserializers\n     * un-cacheable; but on the other hand, caching can make a big positive\n     * difference with performance... so it's a hard choice.\n     * \n     * @since 2.4.4\n     */\n    @Override\n    public boolean isCachable() {\n        /* As per [databind#735], existence of value or key deserializer (only passed\n         * if annotated to use non-standard one) should also prevent caching.\n         */\n        return (_valueTypeDeserializer == null)\n                && (_ignorableProperties == null);\n    }\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n",
    "label": "buggy",
    "id": "529fb519-91a7-45aa-906c-6220a30a442f"
  },
  {
    "project": "Math",
    "bug_id": "32",
    "file": "org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java",
    "snippet": "    /** {@inheritDoc} */\n    @Override\n    protected void computeGeometricalProperties() {\n\n        final Vector2D[][] v = getVertices();\n\n        if (v.length == 0) {\n            final BSPTree<Euclidean2D> tree = getTree(false);\n            if ((Boolean) tree.getAttribute()) {\n                // the instance covers the whole space\n                setSize(Double.POSITIVE_INFINITY);\n                setBarycenter(Vector2D.NaN);\n            } else {\n                setSize(0);\n",
    "label": "buggy",
    "id": "c1bf9850-db55-44dc-8f8a-283bfcd1cc48"
  },
  {
    "project": "Math",
    "bug_id": "57",
    "file": "org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java",
    "snippet": "    /** Build a clusterer.\n     * @param random random generator to use for choosing initial centers\n     * @param emptyStrategy strategy to use for handling empty clusters that\n     * may appear during algorithm iterations\n     * @since 2.2\n     */\n    public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy emptyStrategy) {\n        this.random        = random;\n        this.emptyStrategy = emptyStrategy;\n    }\n\n    /**\n     * Runs the K-means++ clustering algorithm.\n     *\n     * @param points the points to cluster\n     * @param k the number of clusters to split the data into\n     * @param maxIterations the maximum number of iterations to run the algorithm\n     *     for.  If negative, no maximum will be used\n     * @return a list of clusters containing the points\n     */\n    public List<Cluster<T>> cluster(final Collection<T> points,\n                                    final int k, final int maxIterations) {\n        // create the initial clusters\n        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n        assignPointsToClusters(clusters, points);\n\n        // iterate through updating the centers until we're done\n        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n        for (int count = 0; count < max; count++) {\n            boolean clusteringChanged = false;\n            List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n            for (final Cluster<T> cluster : clusters) {\n                final T newCenter;\n                if (cluster.getPoints().isEmpty()) {\n                    switch (emptyStrategy) {\n                        case LARGEST_VARIANCE :\n                            newCenter = getPointFromLargestVarianceCluster(clusters);\n                            break;\n                        case LARGEST_POINTS_NUMBER :\n                            newCenter = getPointFromLargestNumberCluster(clusters);\n                            break;\n                        case FARTHEST_POINT :\n                            newCenter = getFarthestPoint(clusters);\n                            break;\n                        default :\n                            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n                    }\n                    clusteringChanged = true;\n                } else {\n                    newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n                    if (!newCenter.equals(cluster.getCenter())) {\n                        clusteringChanged = true;\n                    }\n                }\n                newClusters.add(new Cluster<T>(newCenter));\n            }\n            if (!clusteringChanged) {\n                return clusters;\n            }\n            assignPointsToClusters(newClusters, points);\n            clusters = newClusters;\n        }\n        return clusters;\n    }\n\n    /**\n     * Adds the given points to the closest {@link Cluster}.\n     *\n     * @param <T> type of the points to cluster\n     * @param clusters the {@link Cluster}s to add the points to\n     * @param points the points to add to the given {@link Cluster}s\n     */\n    private static <T extends Clusterable<T>> void\n        assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) {\n        for (final T p : points) {\n            Cluster<T> cluster = getNearestCluster(clusters, p);\n            cluster.addPoint(p);\n        }\n    }\n\n    /**\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     */\n    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        // Choose one center uniformly at random from among the data points.\n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        final double[] dx2 = new double[pointSet.size()];\n        while (resultSet.size() < k) {\n            // For each data point x, compute D(x), the distance between x and\n            // the nearest center that has already been chosen.\n            int sum = 0;\n            for (int i = 0; i < pointSet.size(); i++) {\n                final T p = pointSet.get(i);\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                final double d = p.distanceFrom(nearest.getCenter());\n                sum += d * d;\n",
    "label": "buggy",
    "id": "9ed6c68f-002f-4681-94b5-83465c771508"
  },
  {
    "project": "Cli",
    "bug_id": "18",
    "file": "org/apache/commons/cli/PosixParser.java",
    "snippet": "/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.cli;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\n\n/**\n * The class PosixParser provides an implementation of the \n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic class PosixParser extends Parser {\n\n    /** holder for flattened tokens */\n    private List tokens = new ArrayList();\n\n    /** specifies if bursting should continue */\n    private boolean eatTheRest;\n\n    /** holder for the current option */\n    private Option currentOption;\n\n    /** the command line Options */\n    private Options options;\n\n    /**\n     * Resets the members to their original state i.e. remove\n     * all of <code>tokens</code> entries, set <code>eatTheRest</code>\n     * to false and set <code>currentOption</code> to null.\n     */\n    private void init()\n    {\n        eatTheRest = false;\n        tokens.clear();\n        currentOption = null;\n    }\n\n    /**\n     * <p>An implementation of {@link Parser}'s abstract\n     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n     *\n     * <p>The following are the rules used by this flatten method.\n     * <ol>\n     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n     *  burst anymore of <code>arguments</code> entries, just add each\n     *  successive entry without further processing.  Otherwise, ignore\n     *  <code>stopAtNonOption</code>.</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is two characters\n     *  in length and the first character is \"<b>-</b>\" then check if this\n     *  is a valid {@link Option} id.  If it is a valid id, then add the\n     *  entry to the list of processed tokens and set the current {@link Option}\n     *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n     *  is true, then the remaining entries are copied to the list of \n     *  processed tokens.  Otherwise, the current entry is ignored.</li>\n     *  <li>if the current <code>arguments</code> entry is more than two\n     *  characters in length and the first character is \"<b>-</b>\" then\n     *  we need to burst the entry to determine its constituents.  For more\n     *  information on the bursting algorithm see \n     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n     *  <li>if the current <code>arguments</code> entry is not handled \n     *  by any of the previous rules, then the entry is added to the list\n     *  of processed tokens.</li>\n     * </ol>\n     * </p>\n     *\n     * @param options The command line {@link Options}\n     * @param arguments The command line arguments to be parsed\n     * @param stopAtNonOption Specifies whether to stop flattening\n     * when an non option is found.\n     * @return The flattened <code>arguments</code> String array.\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        init();\n        this.options = options;\n\n        // an iterator for the command line tokens\n        Iterator iter = Arrays.asList(arguments).iterator();\n\n        // process each command line token\n        while (iter.hasNext())\n        {\n            // get the next command line token\n            String token = (String) iter.next();\n\n            // handle SPECIAL TOKEN\n            if (token.startsWith(\"--\"))\n            {\n                if (token.indexOf('=') != -1)\n                {\n                    tokens.add(token.substring(0, token.indexOf('=')));\n                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n\n            // single hyphen\n            else if (\"-\".equals(token))\n            {\n                processSingleHyphen(token);\n            }\n            else if (token.startsWith(\"-\"))\n            {\n                if (token.length() == 2)\n                {\n",
    "label": "buggy",
    "id": "20dd0a0d-14e5-44f9-ba29-6343972a6d5b"
  },
  {
    "project": "Jsoup",
    "bug_id": "75",
    "file": "org/jsoup/nodes/Attributes.java",
    "snippet": "    /**\n     Get the HTML representation of these attributes.\n     @return HTML\n     @throws SerializationException if the HTML representation of the attributes cannot be constructed.\n     */\n    public String html() {\n        StringBuilder accum = new StringBuilder();\n        try {\n            html(accum, (new Document(\"\")).outputSettings()); // output settings a bit funky, but this html() seldom used\n        } catch (IOException e) { // ought never happen\n            throw new SerializationException(e);\n        }\n        return accum.toString();\n    }\n\n    final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n        final int sz = size;\n        for (int i = 0; i < sz; i++) {\n            // inlined from Attribute.html()\n            final String key = keys[i];\n            final String val = vals[i];\n            accum.append(' ').append(key);\n\n            // collapse checked=null, checked=\"\", checked=checked; write out others\n            if (!Attribute.shouldCollapseAttribute(key, val, out)) {\n                accum.append(\"=\\\"\");\n                Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n                accum.append('\"');\n            }\n        }\n",
    "label": "clean",
    "id": "caa11a06-1798-4494-ae77-a8762fccfc50"
  },
  {
    "project": "Lang",
    "bug_id": "1",
    "file": "org/apache/commons/lang3/math/NumberUtils.java",
    "snippet": "    /**\n     * <p>Convert a <code>String</code> to an <code>short</code>, returning a\n     * default value if the conversion fails.</p>\n     *\n     * <p>If the string is <code>null</code>, the default value is returned.</p>\n     *\n     * <pre>\n     *   NumberUtils.toShort(null, 1) = 1\n     *   NumberUtils.toShort(\"\", 1)   = 1\n     *   NumberUtils.toShort(\"1\", 0)  = 1\n     * </pre>\n     *\n     * @param str  the string to convert, may be null\n     * @param defaultValue  the default value\n     * @return the short represented by the string, or the default if conversion fails\n     * @since 2.5\n     */\n    public static short toShort(final String str, final short defaultValue) {\n        if(str == null) {\n            return defaultValue;\n        }\n        try {\n            return Short.parseShort(str);\n        } catch (final NumberFormatException nfe) {\n            return defaultValue;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    // must handle Long, Float, Integer, Float, Short,\n    //                  BigDecimal, BigInteger and Byte\n    // useful methods:\n    // Byte.decode(String)\n    // Byte.valueOf(String,int radix)\n    // Byte.valueOf(String)\n    // Double.valueOf(String)\n    // Float.valueOf(String)\n    // Float.valueOf(String)\n    // Integer.valueOf(String,int radix)\n    // Integer.valueOf(String)\n    // Integer.decode(String)\n    // Integer.getInteger(String)\n    // Integer.getInteger(String,int val)\n    // Integer.getInteger(String,Integer val)\n    // Integer.valueOf(String)\n    // Double.valueOf(String)\n    // new Byte(String)\n    // Long.valueOf(String)\n    // Long.getLong(String)\n    // Long.getLong(String,int)\n    // Long.getLong(String,Integer)\n    // Long.valueOf(String,int)\n    // Long.valueOf(String)\n    // Short.valueOf(String)\n    // Short.decode(String)\n    // Short.valueOf(String,int)\n    // Short.valueOf(String)\n    // new BigDecimal(String)\n    // new BigInteger(String)\n    // new BigInteger(String,int radix)\n    // Possible inputs:\n    // 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd\n    // plus minus everything. Prolly more. A lot are not separable.\n\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it\n     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the\n     * prefix is more than 8 - or BigInteger if there are more than 16 digits.\n     * </p>\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n    * <code>BigDecimal</code>.</p>\n    * \n     * <p>\n     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will\n     * be Integer, Long or BigDecimal as appropriate.\n     * </p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        // Need to deal with all possible hex prefixes here\n        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n        int pfxLen = 0;\n        for(final String pfx : hex_prefixes) {\n            if (str.startsWith(pfx)) {\n                pfxLen += pfx.length();\n                break;\n            }\n        }\n        if (pfxLen > 0) { // we have a hex number\n            char firstSigDigit = 0; // strip leading zeroes\n            for(int i = pfxLen; i < str.length(); i++) {\n                firstSigDigit = str.charAt(i);\n                if (firstSigDigit == '0') { // count leading zeroes\n                    pfxLen++;\n                } else {\n",
    "label": "clean",
    "id": "dee6e474-de07-48b9-902d-92a009ecdcd9"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "17",
    "file": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "snippet": "        /**\n         * Definition of what types is this default typer valid for.\n         */\n        protected final DefaultTyping _appliesFor;\n\n        public DefaultTypeResolverBuilder(DefaultTyping t) {\n            _appliesFor = t;\n        }\n\n        @Override\n        public TypeDeserializer buildTypeDeserializer(DeserializationConfig config,\n                JavaType baseType, Collection<NamedType> subtypes)\n        {\n            return useForType(baseType) ? super.buildTypeDeserializer(config, baseType, subtypes) : null;\n        }\n\n        @Override\n        public TypeSerializer buildTypeSerializer(SerializationConfig config,\n                JavaType baseType, Collection<NamedType> subtypes)\n        {\n            return useForType(baseType) ? super.buildTypeSerializer(config, baseType, subtypes) : null;            \n        }\n\n        /**\n         * Method called to check if the default type handler should be\n         * used for given type.\n         * Note: \"natural types\" (String, Boolean, Integer, Double) will never\n         * use typing; that is both due to them being concrete and final,\n         * and since actual serializers and deserializers will also ignore any\n         * attempts to enforce typing.\n         */\n        public boolean useForType(JavaType t)\n        {\n            switch (_appliesFor) {\n            case NON_CONCRETE_AND_ARRAYS:\n                while (t.isArrayType()) {\n                    t = t.getContentType();\n                }\n                // fall through\n            case OBJECT_AND_NON_CONCRETE:\n//                return t.isJavaLangObject() || \n                return (t.getRawClass() == Object.class)\n                        || (!t.isConcrete()\n                                // [databind#88] Should not apply to JSON tree models:\n                        || TreeNode.class.isAssignableFrom(t.getRawClass()));\n\n            case NON_FINAL:\n                while (t.isArrayType()) {\n                    t = t.getContentType();\n                }\n",
    "label": "buggy",
    "id": "14b89183-8194-4858-9801-05a345a9026c"
  },
  {
    "project": "Collections",
    "bug_id": "19",
    "file": "org/apache/commons/collections/list/SetUniqueList.java",
    "snippet": "    /**\n     * Sets the value at the specified index avoiding duplicates.\n     * <p>\n     * The object is set into the specified index. Afterwards, any previous\n     * duplicate is removed If the object is not already in the list then a\n     * normal set occurs. If it is present, then the old version is removed.\n     * \n     * @param index\n     *            the index to insert at\n     * @param object\n     *            the object to set\n     * @return the previous object\n     */\n    @Override\n    public E set(final int index, final E object) {\n        final int pos = indexOf(object);\n        final E removed = super.set(index, object);\n\n        if (pos != -1 && pos != index) {\n            // the object is already in the uniq list\n            // (and it hasn't been swapped with itself)\n            super.remove(pos); // remove the duplicate by index\n            set.remove(removed); // remove the item deleted by the set\n        } else if (pos == -1) {\n            set.add(object); // add the new item to the unique set\n            set.remove(removed); // remove the item deleted by the set\n        }\n        \n",
    "label": "clean",
    "id": "dbd8cbe5-686f-45ee-8fe9-8f687f0223f7"
  },
  {
    "project": "Lang",
    "bug_id": "65",
    "file": "org/apache/commons/lang/time/DateUtils.java",
    "snippet": "    /**\n     * <p>Internal calculation method.</p>\n     * \n     * @param val  the calendar\n     * @param field  the field constant\n     * @param round  true to round, false to truncate\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n",
    "label": "buggy",
    "id": "bc1aa584-cb07-426d-9351-fa37a36a9bf2"
  },
  {
    "project": "Cli",
    "bug_id": "14",
    "file": "org/apache/commons/cli2/option/GroupImpl.java",
    "snippet": "    /**\n     * Creates a new GroupImpl using the specified parameters.\n     *\n     * @param options the Options and Arguments that make up the Group\n     * @param name the name of this Group, or null\n     * @param description a description of this Group\n     * @param minimum the minimum number of Options for a valid CommandLine\n     * @param maximum the maximum number of Options for a valid CommandLine\n     */\n    public GroupImpl(final List options,\n                     final String name,\n                     final String description,\n                     final int minimum,\n                     final int maximum) {\n        super(0, false);\n\n        this.name = name;\n        this.description = description;\n        this.minimum = minimum;\n        this.maximum = maximum;\n\n        // store a copy of the options to be used by the\n        // help methods\n        this.options = Collections.unmodifiableList(options);\n\n        // anonymous Argument temporary storage\n        final List newAnonymous = new ArrayList();\n\n        // map (key=trigger & value=Option) temporary storage\n        final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance());\n\n        // prefixes temporary storage\n        final Set newPrefixes = new HashSet();\n\n        // process the options\n        for (final Iterator i = options.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n\n            if (option instanceof Argument) {\n                i.remove();\n                newAnonymous.add(option);\n            } else {\n                final Set triggers = option.getTriggers();\n\n                for (Iterator j = triggers.iterator(); j.hasNext();) {\n                    newOptionMap.put(j.next(), option);\n                }\n\n                // store the prefixes\n                newPrefixes.addAll(option.getPrefixes());\n            }\n        }\n\n        this.anonymous = Collections.unmodifiableList(newAnonymous);\n        this.optionMap = Collections.unmodifiableSortedMap(newOptionMap);\n        this.prefixes = Collections.unmodifiableSet(newPrefixes);\n    }\n\n    public boolean canProcess(final WriteableCommandLine commandLine,\n                              final String arg) {\n        if (arg == null) {\n            return false;\n        }\n\n        // if arg does not require bursting\n        if (optionMap.containsKey(arg)) {\n            return true;\n        }\n\n        // filter\n        final Map tailMap = optionMap.tailMap(arg);\n\n        // check if bursting is required\n        for (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) {\n            final Option option = (Option) iter.next();\n\n            if (option.canProcess(commandLine, arg)) {\n                return true;\n            }\n        }\n\n        if (commandLine.looksLikeOption(arg)) {\n            return false;\n        }\n\n        // anonymous argument(s) means we can process it\n        if (anonymous.size() > 0) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public Set getPrefixes() {\n        return prefixes;\n    }\n\n    public Set getTriggers() {\n        return optionMap.keySet();\n    }\n\n    public void process(final WriteableCommandLine commandLine,\n                        final ListIterator arguments)\n        throws OptionException {\n        String previous = null;\n\n        // [START process each command line token\n        while (arguments.hasNext()) {\n            // grab the next argument\n            final String arg = (String) arguments.next();\n\n            // if we have just tried to process this instance\n            if (arg == previous) {\n                // rollback and abort\n                arguments.previous();\n\n                break;\n            }\n\n            // remember last processed instance\n            previous = arg;\n\n            final Option opt = (Option) optionMap.get(arg);\n\n            // option found\n            if (opt != null) {\n                arguments.previous();\n                opt.process(commandLine, arguments);\n            }\n            // [START option NOT found\n            else {\n                // it might be an anonymous argument continue search\n                // [START argument may be anonymous\n                if (commandLine.looksLikeOption(arg)) {\n                    // narrow the search\n                    final Collection values = optionMap.tailMap(arg).values();\n\n                    boolean foundMemberOption = false;\n\n                    for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) {\n                        final Option option = (Option) i.next();\n\n                        if (option.canProcess(commandLine, arg)) {\n                            foundMemberOption = true;\n                            arguments.previous();\n                            option.process(commandLine, arguments);\n                        }\n                    }\n\n                    // back track and abort this group if necessary\n                    if (!foundMemberOption) {\n                        arguments.previous();\n\n                        return;\n                    }\n                } // [END argument may be anonymous\n\n                // [START argument is NOT anonymous\n                else {\n                    // move iterator back, current value not used\n                    arguments.previous();\n\n                    // if there are no anonymous arguments then this group can't\n                    // process the argument\n                    if (anonymous.isEmpty()) {\n                        break;\n                    }\n\n                    // TODO: why do we iterate over all anonymous arguments?\n                    // canProcess will always return true?\n                    for (final Iterator i = anonymous.iterator(); i.hasNext();) {\n                        final Argument argument = (Argument) i.next();\n\n                        if (argument.canProcess(commandLine, arguments)) {\n                            argument.process(commandLine, arguments);\n                        }\n                    }\n                } // [END argument is NOT anonymous\n            } // [END option NOT found\n        } // [END process each command line token\n    }\n\n    public void validate(final WriteableCommandLine commandLine)\n        throws OptionException {\n        // number of options found\n        int present = 0;\n\n        // reference to first unexpected option\n        Option unexpected = null;\n\n        for (final Iterator i = options.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n\n            // needs validation?\n            boolean validate = option.isRequired() || option instanceof Group;\n\n            // if the child option is present then validate it\n            if (commandLine.hasOption(option)) {\n                if (++present > maximum) {\n                    unexpected = option;\n",
    "label": "clean",
    "id": "19b0a254-58ae-470a-afc8-4f21342b43c9"
  },
  {
    "project": "Closure",
    "bug_id": "58",
    "file": "com/google/javascript/jscomp/LiveVariablesAnalysis.java",
    "snippet": "    /**\n     * @param numVars Number of all local variables.\n     */\n    private LiveVariableLattice(int numVars) {\n      this.liveSet = new BitSet(numVars);\n    }\n\n    private LiveVariableLattice(LiveVariableLattice other) {\n      Preconditions.checkNotNull(other);\n      this.liveSet = (BitSet) other.liveSet.clone();\n    }\n\n    @Override\n    public boolean equals(Object other) {\n      Preconditions.checkNotNull(other);\n      return (other instanceof LiveVariableLattice) &&\n          this.liveSet.equals(((LiveVariableLattice) other).liveSet);\n    }\n\n    public boolean isLive(Var v) {\n      Preconditions.checkNotNull(v);\n      return liveSet.get(v.index);\n    }\n\n    public boolean isLive(int index) {\n      return liveSet.get(index);\n    }\n\n    @Override\n    public String toString() {\n      return liveSet.toString();\n    }\n\n    @Override\n    public int hashCode() {\n      return liveSet.hashCode();\n    }\n  }\n\n  // The scope of the function that we are analyzing.\n  private final Scope jsScope;\n  private final Set<Var> escaped;\n\n  LiveVariablesAnalysis(ControlFlowGraph<Node> cfg, Scope jsScope,\n      AbstractCompiler compiler) {\n    super(cfg, new LiveVariableJoinOp());\n    this.jsScope = jsScope;\n    this.escaped = Sets.newHashSet();\n    computeEscaped(jsScope, escaped, compiler);\n  }\n\n  public Set<Var> getEscapedLocals() {\n    return escaped;\n  }\n\n  public int getVarIndex(String var) {\n    return jsScope.getVar(var).index;\n  }\n\n  @Override\n  boolean isForward() {\n    return false;\n  }\n\n  @Override\n  LiveVariableLattice createEntryLattice() {\n    return new LiveVariableLattice(jsScope.getVarCount());\n  }\n\n  @Override\n  LiveVariableLattice createInitialEstimateLattice() {\n    return new LiveVariableLattice(jsScope.getVarCount());\n  }\n\n  @Override\n  LiveVariableLattice flowThrough(Node node, LiveVariableLattice input) {\n    final BitSet gen = new BitSet(input.liveSet.size());\n    final BitSet kill = new BitSet(input.liveSet.size());\n\n    // Make kills conditional if the node can end abruptly by an exception.\n    boolean conditional = false;\n    List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node);\n    for (DiGraphEdge<Node, Branch> edge : edgeList) {\n      if (Branch.ON_EX.equals(edge.getValue())) {\n        conditional = true;\n      }\n    }\n    computeGenKill(node, gen, kill, conditional);\n    LiveVariableLattice result = new LiveVariableLattice(input);\n    // L_in = L_out - Kill + Gen\n    result.liveSet.andNot(kill);\n    result.liveSet.or(gen);\n    return result;\n  }\n\n  /**\n   * Computes the GEN and KILL set.\n   *\n   * @param n Root node.\n   * @param gen Local variables that are live because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param kill Local variables that are killed because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param conditional {@code true} if any assignments encountered are\n   *        conditionally executed. These assignments might not kill a variable.\n   */\n  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n              conditional);\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (NodeUtil.isVar(lhs)) {\n            // for(var x in y) {...}\n            lhs = lhs.getLastChild();\n          }\n            addToSetIfLocal(lhs, kill);\n            addToSetIfLocal(lhs, gen);\n          computeGenKill(rhs, gen, kill, conditional);\n        }\n        return;\n",
    "label": "buggy",
    "id": "04668a8b-425c-4b31-a5ac-1bb5d1d717fb"
  },
  {
    "project": "Math",
    "bug_id": "43",
    "file": "org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
    "snippet": "    /**\n     * Add a value to the data\n     * @param value the value to add\n     */\n    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n        if (!(meanImpl instanceof Mean)) {\n            meanImpl.increment(value);\n        }\n        if (!(varianceImpl instanceof Variance)) {\n            varianceImpl.increment(value);\n        }\n",
    "label": "buggy",
    "id": "1cf29a80-58e7-46c7-9abe-5f42ff699c90"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "3",
    "file": "com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
    "snippet": "    /**\n     * Value serializer to use, if not the standard one (which is inlined)\n     */\n    protected JsonDeserializer<String> _elementDeserializer;\n\n    public StringArrayDeserializer() {\n        super(String[].class);\n        _elementDeserializer = null;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    protected StringArrayDeserializer(JsonDeserializer<?> deser) {\n        super(String[].class);\n        _elementDeserializer = (JsonDeserializer<String>) deser;\n    }\n   \n    @Override\n    public String[] deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt);\n        }\n        if (_elementDeserializer != null) {\n            return _deserializeCustom(jp, ctxt);\n        }\n\n        final ObjectBuffer buffer = ctxt.leaseObjectBuffer();\n        Object[] chunk = buffer.resetAndStart();\n        \n        int ix = 0;\n        JsonToken t;\n        \n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            // Ok: no need to convert Strings, but must recognize nulls\n            String value;\n            if (t == JsonToken.VALUE_STRING) {\n                value = jp.getText();\n            } else if (t == JsonToken.VALUE_NULL) {\n                value = _elementDeserializer.getNullValue();\n            } else {\n                value = _parseString(jp, ctxt);\n            }\n            if (ix >= chunk.length) {\n                chunk = buffer.appendCompletedChunk(chunk);\n",
    "label": "buggy",
    "id": "306369a8-5da1-4157-8e07-4c93d7506745"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "62",
    "file": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "snippet": "    /**\n     * @deprecated Since 2.7 as it does not pass `unwrapSingle`\n     */\n    @Deprecated // since 2.7 -- will not retain \"unwrapSingle\" setting\n    protected CollectionDeserializer withResolved(JsonDeserializer<?> dd,\n            JsonDeserializer<?> vd, TypeDeserializer vtd)\n    {\n        return withResolved(dd, vd, vtd, _unwrapSingle);\n    }\n\n    // Important: do NOT cache if polymorphic values\n    @Override // since 2.5\n    public boolean isCachable() {\n        // 26-Mar-2015, tatu: As per [databind#735], need to be careful\n        return (_valueDeserializer == null)\n                && (_valueTypeDeserializer == null)\n                && (_delegateDeserializer == null)\n                ;\n    }\n\n    /*\n    /**********************************************************\n    /* Validation, post-processing (ResolvableDeserializer)\n    /**********************************************************\n     */\n\n    /**\n     * Method called to finalize setup of this deserializer,\n     * when it is known for which property deserializer is needed\n     * for.\n     */\n    @Override\n    public CollectionDeserializer createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n    {\n        // May need to resolve types for delegate-based creators:\n        JsonDeserializer<Object> delegateDeser = null;\n        if (_valueInstantiator != null) {\n            if (_valueInstantiator.canCreateUsingDelegate()) {\n                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n                if (delegateType == null) {\n                    throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                            +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                            +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n                }\n                delegateDeser = findDeserializer(ctxt, delegateType, property);\n            }\n        }\n        // [databind#1043]: allow per-property allow-wrapping of single overrides:\n        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\n        //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\n",
    "label": "buggy",
    "id": "da102856-3b8b-42b4-9f87-64727d66c14e"
  },
  {
    "project": "Math",
    "bug_id": "61",
    "file": "org/apache/commons/math/distribution/PoissonDistributionImpl.java",
    "snippet": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math.distribution;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math.MathException;\nimport org.apache.commons.math.exception.NotStrictlyPositiveException;\nimport org.apache.commons.math.exception.util.LocalizedFormats;\nimport org.apache.commons.math.special.Gamma;\nimport org.apache.commons.math.util.MathUtils;\nimport org.apache.commons.math.util.FastMath;\n\n",
    "label": "clean",
    "id": "a0a0c7cd-e63f-4172-ba02-21606e1327ce"
  },
  {
    "project": "Mockito",
    "bug_id": "11",
    "file": "org/mockito/internal/creation/DelegatingMethod.java",
    "snippet": "    /**\n     * @return True if the input object is a DelegatingMethod which has an internal Method which is equal to the internal Method of this DelegatingMethod,\n     * or if the input object is a Method which is equal to the internal Method of this DelegatingMethod.\n     */\n    @Override\n    public boolean equals(Object o) {\n            return method.equals(o);\n    }\n\n    @Override\n    public int hashCode() {\n",
    "label": "buggy",
    "id": "3543add8-68c7-4c6b-843c-f0a1e2601a9b"
  },
  {
    "project": "Chart",
    "bug_id": "22",
    "file": "org/jfree/data/KeyedObjects2D.java",
    "snippet": "    /**\n     * Returns the object for the given row and column keys.\n     *\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     *\n     * @return The object (possibly <code>null</code>).\n     * \n     * @throws IllegalArgumentException if <code>rowKey<code> or \n     *         <code>columnKey</code> is <code>null</code>.\n     * @throws UnknownKeyException if <code>rowKey</code> or \n     *         <code>columnKey</code> is not recognised.\n     */\n    public Object getObject(Comparable rowKey, Comparable columnKey) {\n        if (rowKey == null) {\n            throw new IllegalArgumentException(\"Null 'rowKey' argument.\");\n        }\n        if (columnKey == null) {\n            throw new IllegalArgumentException(\"Null 'columnKey' argument.\");\n        }\n        int row = this.rowKeys.indexOf(rowKey);\n        if (row < 0) {\n            throw new UnknownKeyException(\"Row key (\" + rowKey \n                    + \") not recognised.\");\n        }\n        int column = this.columnKeys.indexOf(columnKey);\n        if (column < 0) {\n            throw new UnknownKeyException(\"Column key (\" + columnKey \n                    + \") not recognised.\");\n        }\n        if (row >= 0) {\n        KeyedObjects rowData = (KeyedObjects) this.rows.get(row);\n            return rowData.getObject(columnKey);\n        }\n        else {\n            return null;\n",
    "label": "buggy",
    "id": "57828b9b-6a58-463b-8c7e-1aeacd7ec294"
  },
  {
    "project": "Closure",
    "bug_id": "140",
    "file": "com/google/javascript/jscomp/Compiler.java",
    "snippet": "  /**\n   * Initialize the compiler options. Only necessary if you're not doing\n   * a normal compile() job.\n   */\n  public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n  }\n\n  /**\n   * Initializes the instance state needed for a compile job.\n   */\n  public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options) {\n    initOptions(options);\n    \n    this.externs = makeCompilerInput(externs, true);\n    this.modules = null;\n    this.moduleGraph = null;\n    this.inputs = makeCompilerInput(inputs, false);\n    initBasedOnOptions();\n\n    initInputsByNameMap();\n  }\n\n  static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");\n\n  /**\n   * Initializes the instance state needed for a compile job.\n   */\n  public void init(JSSourceFile[] externs, JSModule[] modules,\n      CompilerOptions options) {\n    initOptions(options);\n\n    checkFirstModule(modules);\n    fillEmptyModules(modules);\n\n    this.externs = makeCompilerInput(externs, true);\n    this.modules = modules;\n    // Generate the module graph, and report any errors in the module\n    // specification as errors.\n",
    "label": "clean",
    "id": "7e11b50c-8990-416f-9caf-198a10a1a157"
  },
  {
    "project": "Closure",
    "bug_id": "151",
    "file": "com/google/javascript/jscomp/CommandLineRunner.java",
    "snippet": "/*\n * Copyright 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.javascript.jscomp;\n\nimport com.google.common.base.Preconditions;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport com.google.common.collect.Sets;\nimport com.google.common.io.LimitInputStream;\n\nimport org.kohsuke.args4j.CmdLineException;\nimport org.kohsuke.args4j.CmdLineParser;\nimport org.kohsuke.args4j.Option;\nimport org.kohsuke.args4j.OptionDef;\nimport org.kohsuke.args4j.spi.OptionHandler;\nimport org.kohsuke.args4j.spi.Parameters;\nimport org.kohsuke.args4j.spi.Setter;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintStream;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.ResourceBundle;\nimport java.util.Set;\nimport java.util.logging.Level;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\n\n/**\n * CommandLineRunner translates flags into Java API calls on the Compiler.\n *\n * This class may be extended and used to create other Java classes\n * that behave the same as running the Compiler from the command line. If you\n * want to run the compiler in-process in Java, you should look at this class\n * for hints on what API calls to make, but you should not use this class directly.\n *\n * Example:\n * <pre>\n * class MyCommandLineRunner extends CommandLineRunner {\n *   MyCommandLineRunner(String[] args) {\n *     super(args);\n *   }\n *\n *   {@code @Override} protected CompilerOptions createOptions() {\n *     CompilerOptions options = super.createOptions();\n *     addMyCrazyCompilerPassThatOutputsAnExtraFile(options);\n *     return options;\n *   }\n *\n *   public static void main(String[] args) {\n *     MyCommandLineRunner runner = new MyCommandLineRunner(args);\n *     if (runner.shouldRunCompiler()) {\n *       runner.run();\n *     } else {\n *       System.exit(-1);\n *     }\n *   }\n * }\n * </pre>\n * @author bolinfest@google.com (Michael Bolin)\n */\npublic class CommandLineRunner extends\n    AbstractCommandLineRunner<Compiler, CompilerOptions> {\n\n  private static class Flags {\n    @Option(name = \"--help\",\n        usage = \"Displays this message\")\n    private boolean display_help = false;\n\n    @Option(name = \"--print_tree\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints out the parse tree and exits\")\n    private boolean print_tree = false;\n\n    @Option(name = \"--compute_phase_ordering\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Runs the compile job many times, then prints out the \" +\n        \"best phase ordering from this run\")\n    private boolean compute_phase_ordering = false;\n\n    @Option(name = \"--print_ast\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints a dot file describing the internal abstract syntax\"\n        + \" tree and exits\")\n    private boolean print_ast = false;\n\n    @Option(name = \"--print_pass_graph\",\n        usage = \"Prints a dot file describing the passes that will get run\"\n        + \" and exits\")\n    private boolean print_pass_graph = false;\n\n    @Option(name = \"--jscomp_dev_mode\",\n        usage = \"Turns on extra sanity checks\",\n        aliases = {\"--dev_mode\"})\n    private CompilerOptions.DevMode jscomp_dev_mode =\n        CompilerOptions.DevMode.OFF;\n\n    // TODO(nicksantos): Make the next 2 flags package-private.\n    @Option(name = \"--logging_level\",\n        usage = \"The logging level (standard java.util.logging.Level\"\n        + \" values) for Compiler progress. Does not control errors or\"\n        + \" warnings for the JavaScript code under compilation\")\n    private String logging_level = Level.WARNING.getName();\n\n    @Option(name = \"--externs\",\n        usage = \"The file containing javascript externs. You may specify\"\n        + \" multiple\")\n    private List<String> externs = Lists.newArrayList();\n\n    @Option(name = \"--js\",\n        usage = \"The javascript filename. You may specify multiple\")\n    private List<String> js = Lists.newArrayList();\n\n    @Option(name = \"--js_output_file\",\n        usage = \"Primary output filename. If not specified, output is \" +\n        \"written to stdout\")\n    private String js_output_file = \"\";\n\n    @Option(name = \"--module\",\n        usage = \"A javascript module specification. The format is \"\n        + \"<name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be \"\n        + \"unique. Each dep is the name of a module that this module \"\n        + \"depends on. Modules must be listed in dependency order, and js \"\n        + \"source files must be listed in the corresponding order. Where \"\n        + \"--module flags occur in relation to --js flags is unimportant\")\n    private List<String> module = Lists.newArrayList();\n\n    @Option(name = \"--variable_map_input_file\",\n        usage = \"File containing the serialized version of the variable \"\n        + \"renaming map produced by a previous compilation\")\n    private String variable_map_input_file = \"\";\n\n    @Option(name = \"--property_map_input_file\",\n        usage = \"File containing the serialized version of the property \"\n        + \"renaming map produced by a previous compilation\")\n    private String property_map_input_file = \"\";\n\n    @Option(name = \"--variable_map_output_file\",\n        usage = \"File where the serialized version of the variable \"\n        + \"renaming map produced should be saved\")\n    private String variable_map_output_file = \"\";\n\n    @Option(name = \"--create_name_map_files\",\n        handler = BooleanOptionHandler.class,\n        usage = \"If true, variable renaming and property renaming map \"\n        + \"files will be produced as {binary name}_vars_map.out and \"\n        + \"{binary name}_props_map.out. Note that this flag cannot be used \"\n        + \"in conjunction with either variable_map_output_file or \"\n        + \"property_map_output_file\")\n    private boolean create_name_map_files = false;\n\n    @Option(name = \"--property_map_output_file\",\n        usage = \"File where the serialized version of the property \"\n        + \"renaming map produced should be saved\")\n    private String property_map_output_file = \"\";\n\n    @Option(name = \"--third_party\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Check source validity but do not enforce Closure style \"\n        + \"rules and conventions\")\n    private boolean third_party = false;\n\n\n    @Option(name = \"--summary_detail_level\",\n        usage = \"Controls how detailed the compilation summary is. Values:\"\n        + \" 0 (never print summary), 1 (print summary only if there are \"\n        + \"errors or warnings), 2 (print summary if type checking is on, \"\n        + \"see --check_types), 3 (always print summary). The default level \"\n        + \"is 1\")\n    private int summary_detail_level = 1;\n\n    @Option(name = \"--output_wrapper\",\n        usage = \"Interpolate output into this string at the place denoted\"\n        + \" by the marker token %output%. See --output_wrapper_marker\")\n    private String output_wrapper = \"\";\n\n    @Option(name = \"--output_wrapper_marker\",\n        usage = \"Use this token as output marker in the value of\"\n        + \" --output_wrapper\")\n    private String output_wrapper_marker = \"%output%\";\n\n    @Option(name = \"--module_wrapper\",\n        usage = \"An output wrapper for a javascript module (optional). \"\n        + \"The format is <name>:<wrapper>. The module name must correspond \"\n        + \"with a module specified using --module. The wrapper must \"\n        + \"contain %s as the code placeholder\")\n    private List<String> module_wrapper = Lists.newArrayList();\n\n    @Option(name = \"--module_output_path_prefix\",\n        usage = \"Prefix for filenames of compiled js modules. \"\n        + \"<module-name>.js will be appended to this prefix. Directories \"\n        + \"will be created as needed. Use with --module\")\n    private String module_output_path_prefix = \"./\";\n\n    @Option(name = \"--create_source_map\",\n        usage = \"If specified, a source map file mapping the generated \" +\n        \"source files back to the original source file will be \" +\n        \"output to the specified path. The %outname% placeholder will \" +\n        \"expand to the name of the output file that the source map \" +\n        \"corresponds to.\")\n    private String create_source_map = \"\";\n\n    @Option(name = \"--jscomp_error\",\n        usage = \"Make the named class of warnings an error. Options:\" +\n        DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_error = Lists.newArrayList();\n\n    @Option(name = \"--jscomp_warning\",\n        usage = \"Make the named class of warnings a normal warning. \" +\n        \"Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_warning =  Lists.newArrayList();\n\n    @Option(name = \"--jscomp_off\",\n        usage = \"Turn off the named class of warnings. Options:\" +\n        DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_off = Lists.newArrayList();\n\n    @Option(name = \"--define\",\n        aliases = {\"--D\", \"-D\"},\n        usage = \"Override the value of a variable annotated @define. \" +\n        \"The format is <name>[=<val>], where <name> is the name of a @define \" +\n        \"variable and <val> is a boolean, number, or a single-quoted string \" +\n        \"that contains no single quotes. If [=<val>] is omitted, \" +\n        \"the variable is marked true\")\n    private List<String> define = Lists.newArrayList();\n\n    @Option(name = \"--charset\",\n        usage = \"Input and output charset for all files. By default, we \" +\n                \"accept UTF-8 as input and output US_ASCII\")\n    private String charset = \"\";\n\n    @Option(name = \"--compilation_level\",\n        usage = \"Specifies the compilation level to use. Options: \" +\n        \"WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS\")\n    private CompilationLevel compilation_level =\n        CompilationLevel.SIMPLE_OPTIMIZATIONS;\n\n    @Option(name = \"--warning_level\",\n        usage = \"Specifies the warning level to use. Options: \" +\n        \"QUIET, DEFAULT, VERBOSE\")\n    private WarningLevel warning_level = WarningLevel.DEFAULT;\n\n    @Option(name = \"--use_only_custom_externs\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Specifies whether the default externs should be excluded\")\n    private boolean use_only_custom_externs = false;\n\n    @Option(name = \"--debug\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Enable debugging options\")\n    private boolean debug = false;\n\n    @Option(name = \"--formatting\",\n        usage = \"Specifies which formatting options, if any, should be \"\n        + \"applied to the output JS. Options: \"\n        + \"PRETTY_PRINT, PRINT_INPUT_DELIMITER\")\n    private List<FormattingOption> formatting = Lists.newArrayList();\n\n    @Option(name = \"--process_closure_primitives\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Processes built-ins from the Closure library, such as \"\n        + \"goog.require(), goog.provide(), and goog.exportSymbol()\")\n    private boolean process_closure_primitives = true;\n\n    @Option(name = \"--manage_closure_dependencies\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Automatically sort dependencies so that a file that \"\n        + \"goog.provides symbol X will always come before a file that \"\n        + \"goog.requires symbol X. If an input provides symbols, and \"\n        + \"those symbols are never required, then that input will not \"\n        + \"be included in the compilation.\")\n    private boolean manage_closure_dependencies = false;\n\n    @Option(name = \"--output_manifest\",\n        usage = \"Prints out a list of all the files in the compilation. \"\n        + \"If --manage_closure_dependencies is on, this will not include \"\n        + \"files that got dropped because they were not required. \"\n        + \"The %outname% placeholder expands to the js output file. \"\n        + \"If you're using modularization, using %outname% will create \"\n        + \"a manifest for each module.\")\n    private String output_manifest = \"\";\n\n\n    // Our own option parser to be backwards-compatible.\n    // It needs to be public because of the crazy reflection that args4j does.\n    public static class BooleanOptionHandler extends OptionHandler<Boolean> {\n      private static final Set<String> TRUES =\n",
    "label": "buggy",
    "id": "1aa145ff-20c4-4914-9445-d796ad58b662"
  },
  {
    "project": "Jsoup",
    "bug_id": "50",
    "file": "org/jsoup/helper/DataUtil.java",
    "snippet": "/**\n * Internal static utilities for handling data.\n *\n */\npublic final class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");\n    static final String defaultCharset = \"UTF-8\"; // used if not found in header or meta charset\n    private static final int bufferSize = 0x20000; // ~130K.\n    private static final int UNICODE_BOM = 0xFEFF;\n    private static final char[] mimeBoundaryChars =\n            \"-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();\n    static final int boundaryLength = 32;\n\n    private DataUtil() {}\n\n    /**\n     * Loads a file to a Document.\n     * @param in file to load\n     * @param charsetName character set of input\n     * @param baseUri base URI of document, to resolve relative links against\n     * @return Document\n     * @throws IOException on IO error\n     */\n    public static Document load(File in, String charsetName, String baseUri) throws IOException {\n        ByteBuffer byteData = readFileToByteBuffer(in);\n        return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());\n    }\n\n    /**\n     * Parses a Document from an input steam.\n     * @param in input stream to parse. You will need to close it.\n     * @param charsetName character set of input\n     * @param baseUri base URI of document, to resolve relative links against\n     * @return Document\n     * @throws IOException on IO error\n     */\n    public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {\n        ByteBuffer byteData = readToByteBuffer(in);\n        return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());\n    }\n\n    /**\n     * Parses a Document from an input steam, using the provided Parser.\n     * @param in input stream to parse. You will need to close it.\n     * @param charsetName character set of input\n     * @param baseUri base URI of document, to resolve relative links against\n     * @param parser alternate {@link Parser#xmlParser() parser} to use.\n     * @return Document\n     * @throws IOException on IO error\n     */\n    public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {\n        ByteBuffer byteData = readToByteBuffer(in);\n        return parseByteData(byteData, charsetName, baseUri, parser);\n    }\n\n    /**\n     * Writes the input stream to the output stream. Doesn't close them.\n     * @param in input stream to read from\n     * @param out output stream to write to\n     * @throws IOException on IO error\n     */\n    static void crossStreams(final InputStream in, final OutputStream out) throws IOException {\n        final byte[] buffer = new byte[bufferSize];\n        int len;\n        while ((len = in.read(buffer)) != -1) {\n            out.write(buffer, 0, len);\n        }\n    }\n\n    // reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\n    // switching the chartset midstream when a meta http-equiv tag defines the charset.\n    // todo - this is getting gnarly. needs a rewrite.\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n\n        // look for BOM - overrides any other header or input\n\n        if (charsetName == null) { // determine from meta. safe parse as UTF-8\n            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n",
    "label": "buggy",
    "id": "5d0ff1e5-2396-4192-9ec5-42093ed39fc4"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "110",
    "file": "com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java",
    "snippet": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.util.*;\n\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.JsonDeserializer;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;\nimport com.fasterxml.jackson.databind.type.TypeFactory;\nimport com.fasterxml.jackson.databind.util.Converter;\n\n/**\n * Helper class used to contain logic for deserializing \"special\" containers\n * from {@code java.util.Collections} and {@code java.util.Arrays}. This is needed\n * because they do not have usable no-arguments constructor: however, are easy enough\n * to deserialize using delegating deserializer.\n *\n * @since 2.9.4\n */\npublic abstract class JavaUtilCollectionsDeserializers\n{\n    private final static int TYPE_SINGLETON_SET = 1;\n    private final static int TYPE_SINGLETON_LIST = 2;\n    private final static int TYPE_SINGLETON_MAP = 3;\n\n    private final static int TYPE_UNMODIFIABLE_SET = 4;\n    private final static int TYPE_UNMODIFIABLE_LIST = 5;\n    private final static int TYPE_UNMODIFIABLE_MAP = 6;\n\n    public final static int TYPE_AS_LIST = 7;\n\n    // 10-Jan-2018, tatu: There are a few \"well-known\" special containers in JDK too:\n\n    private final static Class<?> CLASS_AS_ARRAYS_LIST = Arrays.asList(null, null).getClass();\n\n    private final static Class<?> CLASS_SINGLETON_SET;\n    private final static Class<?> CLASS_SINGLETON_LIST;\n    private final static Class<?> CLASS_SINGLETON_MAP;\n\n    private final static Class<?> CLASS_UNMODIFIABLE_SET;\n    private final static Class<?> CLASS_UNMODIFIABLE_LIST;\n\n    /* 02-Mar-2019, tatu: for [databind#2265], need to consider possible alternate type...\n     *    which we essentially coerce into the other one\n     */\n    private final static Class<?> CLASS_UNMODIFIABLE_LIST_ALIAS;\n    private final static Class<?> CLASS_UNMODIFIABLE_MAP;\n\n    static {\n        Set<?> set = Collections.singleton(Boolean.TRUE);\n        CLASS_SINGLETON_SET = set.getClass();\n",
    "label": "clean",
    "id": "6fc0cd07-7a16-425a-ae0c-d413a92fc239"
  },
  {
    "project": "Time",
    "bug_id": "17",
    "file": "org/joda/time/DateTimeZone.java",
    "snippet": "    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     * \n     * @param instant  the instant to adjust\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // a bit messy, but will work in all non-pathological cases\n        \n        // evaluate 3 hours before and after to work out if anything is happening\n        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;\n        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;\n        long offsetBefore = getOffset(instantBefore);\n        long offsetAfter = getOffset(instantAfter);\n        if (offsetBefore <= offsetAfter) {\n            return instant;  // not an overlap (less than is a gap, equal is normal case)\n",
    "label": "clean",
    "id": "5ed57287-6485-4105-b64b-5a19f5869155"
  },
  {
    "project": "JxPath",
    "bug_id": "18",
    "file": "org/apache/commons/jxpath/ri/axes/AttributeContext.java",
    "snippet": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.jxpath.ri.axes;\n\nimport org.apache.commons.jxpath.ri.Compiler;\nimport org.apache.commons.jxpath.ri.EvalContext;\nimport org.apache.commons.jxpath.ri.QName;\nimport org.apache.commons.jxpath.ri.compiler.NodeNameTest;\nimport org.apache.commons.jxpath.ri.compiler.NodeTest;\nimport org.apache.commons.jxpath.ri.compiler.NodeTypeTest;\n",
    "label": "clean",
    "id": "f0a268e8-966f-4f04-94bf-c5daba2ed7d7"
  },
  {
    "project": "JacksonCore",
    "bug_id": "20",
    "file": "com/fasterxml/jackson/core/JsonGenerator.java",
    "snippet": "    /**\n     * Introspection method to call to check whether it is possible\n     * to write numbers using {@link #writeNumber(java.lang.String)}\n     * using possible custom format, or not. Typically textual formats\n     * allow this (and JSON specifically does), whereas binary formats\n     * do not allow this (except by writing them as Strings).\n     * Usual reason for calling this method is to check whether custom\n     * formatting of numbers may be applied by higher-level code (databinding)\n     * or not.\n     *\n     * @since 2.8\n     */\n    public boolean canWriteFormattedNumbers() { return false; }\n    \n    /*\n    /**********************************************************\n    /* Public API, write methods, structural\n    /**********************************************************\n     */\n\n    /**\n     * Method for writing starting marker of a Array value\n     * (for JSON this is character '['; plus possible white space decoration\n     * if pretty-printing is enabled).\n     *<p>\n     * Array values can be written in any context where values\n     * are allowed: meaning everywhere except for when\n     * a field name is expected.\n     */\n    public abstract void writeStartArray() throws IOException;\n\n    /**\n     * Method for writing start marker of an Array value, similar\n     * to {@link #writeStartArray()}, but also specifying how many\n     * elements will be written for the array before calling\n     * {@link #writeEndArray()}.\n     *<p>\n     * Default implementation simply calls {@link #writeStartArray()}.\n     * \n     * @param size Number of elements this array will have: actual\n     *   number of values written (before matching call to\n     *   {@link #writeEndArray()} MUST match; generator MAY verify\n     *   this is the case.\n     *   \n     * @since 2.4\n     */\n    public void writeStartArray(int size) throws IOException {\n        writeStartArray();\n    }\n    \n    /**\n     * Method for writing closing marker of a JSON Array value\n     * (character ']'; plus possible white space decoration\n     * if pretty-printing is enabled).\n     *<p>\n     * Marker can be written if the innermost structured type\n     * is Array.\n     */\n    public abstract void writeEndArray() throws IOException;\n\n    /**\n     * Method for writing starting marker of a JSON Object value\n     * (character '{'; plus possible white space decoration\n     * if pretty-printing is enabled).\n     *<p>\n     * Object values can be written in any context where values\n     * are allowed: meaning everywhere except for when\n     * a field name is expected.\n     */\n    public abstract void writeStartObject() throws IOException;\n\n    /**\n     * Method for writing starting marker of a JSON Object value\n     * (character '{'; plus possible white space decoration\n     * if pretty-printing is enabled), to represent Java given\n     * as the argument. Argument is offered as metadata, but more\n     * importantly it should be assigned as the \"current value\"\n     * for the Object content that gets constructed and initialized.\n     *<p>\n     * Object values can be written in any context where values\n     * are allowed: meaning everywhere except for when\n     * a field name is expected.\n     *\n     * @since 2.8.\n     */\n    public void writeStartObject(Object forValue) throws IOException\n    {\n        writeStartObject();\n        setCurrentValue(forValue);\n    }\n\n    /**\n     * Method for writing closing marker of a JSON Object value\n     * (character '}'; plus possible white space decoration\n     * if pretty-printing is enabled).\n     *<p>\n     * Marker can be written if the innermost structured type\n     * is Object, and the last written event was either a\n     * complete value, or START-OBJECT marker (see JSON specification\n     * for more details).\n     */\n    public abstract void writeEndObject() throws IOException;\n\n    /**\n     * Method for writing a field name (JSON String surrounded by\n     * double quotes: syntactically identical to a JSON String value),\n     * possibly decorated by white space if pretty-printing is enabled.\n     *<p>\n     * Field names can only be written in Object context (check out\n     * JSON specification for details), when field name is expected\n     * (field names alternate with values).\n     */\n    public abstract void writeFieldName(String name) throws IOException;\n\n    /**\n     * Method similar to {@link #writeFieldName(String)}, main difference\n     * being that it may perform better as some of processing (such as\n     * quoting of certain characters, or encoding into external encoding\n     * if supported by generator) can be done just once and reused for\n     * later calls.\n     *<p>\n     * Default implementation simple uses unprocessed name container in\n     * serialized String; implementations are strongly encouraged to make\n     * use of more efficient methods argument object has.\n     */\n    public abstract void writeFieldName(SerializableString name) throws IOException;\n\n    /**\n     * Alternative to {@link #writeFieldName(String)} that may be used\n     * in cases where property key is of numeric type; either where\n     * underlying format supports such notion (some binary formats do,\n     * unlike JSON), or for convenient conversion into String presentation.\n     * Default implementation will simply convert id into <code>String</code>\n     * and call {@link #writeFieldName(String)}.\n     *\n     * @since 2.8\n     */\n    public void writeFieldId(long id) throws IOException {\n        writeFieldName(Long.toString(id));\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, write methods, scalar arrays (2.8)\n    /**********************************************************\n     */\n\n    /**\n     * Value write method that can be called to write a single\n     * array (sequence of {@link JsonToken#START_ARRAY}, zero or\n     * more {@link JsonToken#VALUE_NUMBER_INT}, {@link JsonToken#END_ARRAY})\n     *\n     * @since 2.8\n     *\n     * @param array Array that contains values to write\n     * @param offset Offset of the first element to write, within array\n     * @param length Number of elements in array to write, from `offset` to `offset + len - 1`\n     */\n    public void writeArray(int[] array, int offset, int length) throws IOException\n    {\n        if (array == null) {\n            throw new IllegalArgumentException(\"null array\");\n        }\n        _verifyOffsets(array.length, offset, length);\n        writeStartArray();\n        for (int i = offset, end = offset+length; i < end; ++i) {\n            writeNumber(array[i]);\n        }\n        writeEndArray();\n    }\n\n    /**\n     * Value write method that can be called to write a single\n     * array (sequence of {@link JsonToken#START_ARRAY}, zero or\n     * more {@link JsonToken#VALUE_NUMBER_INT}, {@link JsonToken#END_ARRAY})\n     *\n     * @since 2.8\n     *\n     * @param array Array that contains values to write\n     * @param offset Offset of the first element to write, within array\n     * @param length Number of elements in array to write, from `offset` to `offset + len - 1`\n     */\n    public void writeArray(long[] array, int offset, int length) throws IOException\n    {\n        if (array == null) {\n            throw new IllegalArgumentException(\"null array\");\n        }\n        _verifyOffsets(array.length, offset, length);\n        writeStartArray();\n        for (int i = offset, end = offset+length; i < end; ++i) {\n            writeNumber(array[i]);\n        }\n        writeEndArray();\n    }\n\n    /**\n     * Value write method that can be called to write a single\n     * array (sequence of {@link JsonToken#START_ARRAY}, zero or\n     * more {@link JsonToken#VALUE_NUMBER_FLOAT}, {@link JsonToken#END_ARRAY})\n     *\n     * @since 2.8\n     *\n     * @param array Array that contains values to write\n     * @param offset Offset of the first element to write, within array\n     * @param length Number of elements in array to write, from `offset` to `offset + len - 1`\n     */\n    public void writeArray(double[] array, int offset, int length) throws IOException\n    {\n        if (array == null) {\n            throw new IllegalArgumentException(\"null array\");\n        }\n        _verifyOffsets(array.length, offset, length);\n        writeStartArray();\n        for (int i = offset, end = offset+length; i < end; ++i) {\n            writeNumber(array[i]);\n        }\n        writeEndArray();\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, write methods, text/String values\n    /**********************************************************\n     */\n\n    /**\n     * Method for outputting a String value. Depending on context\n     * this means either array element, (object) field value or\n     * a stand alone String; but in all cases, String will be\n     * surrounded in double quotes, and contents will be properly\n     * escaped as required by JSON specification.\n     */\n    public abstract void writeString(String text) throws IOException;\n\n    /**\n     * Method for outputting a String value. Depending on context\n     * this means either array element, (object) field value or\n     * a stand alone String; but in all cases, String will be\n     * surrounded in double quotes, and contents will be properly\n     * escaped as required by JSON specification.\n     */\n    public abstract void writeString(char[] text, int offset, int len) throws IOException;\n\n    /**\n     * Method similar to {@link #writeString(String)}, but that takes\n     * {@link SerializableString} which can make this potentially\n     * more efficient to call as generator may be able to reuse\n     * quoted and/or encoded representation.\n     *<p>\n     * Default implementation just calls {@link #writeString(String)};\n     * sub-classes should override it with more efficient implementation\n     * if possible.\n     */\n    public abstract void writeString(SerializableString text) throws IOException;\n\n    /**\n     * Method similar to {@link #writeString(String)} but that takes as\n     * its input a UTF-8 encoded String that is to be output as-is, without additional\n     * escaping (type of which depends on data format; backslashes for JSON).\n     * However, quoting that data format requires (like double-quotes for JSON) will be added\n     * around the value if and as necessary.\n     *<p>\n     * Note that some backends may choose not to support this method: for\n     * example, if underlying destination is a {@link java.io.Writer}\n     * using this method would require UTF-8 decoding.\n     * If so, implementation may instead choose to throw a\n     * {@link UnsupportedOperationException} due to ineffectiveness\n     * of having to decode input.\n     */\n    public abstract void writeRawUTF8String(byte[] text, int offset, int length)\n        throws IOException;\n\n    /**\n     * Method similar to {@link #writeString(String)} but that takes as its input\n     * a UTF-8 encoded String which has <b>not</b> been escaped using whatever\n     * escaping scheme data format requires (for JSON that is backslash-escaping\n     * for control characters and double-quotes; for other formats something else).\n     * This means that textual JSON backends need to check if value needs\n     * JSON escaping, but otherwise can just be copied as is to output.\n     * Also, quoting that data format requires (like double-quotes for JSON) will be added\n     * around the value if and as necessary.\n     *<p>\n     * Note that some backends may choose not to support this method: for\n     * example, if underlying destination is a {@link java.io.Writer}\n     * using this method would require UTF-8 decoding.\n     * In this case\n     * generator implementation may instead choose to throw a\n     * {@link UnsupportedOperationException} due to ineffectiveness\n     * of having to decode input.\n     */\n    public abstract void writeUTF8String(byte[] text, int offset, int length)\n        throws IOException;\n\n    /*\n    /**********************************************************\n    /* Public API, write methods, binary/raw content\n    /**********************************************************\n     */\n\n    /**\n     * Method that will force generator to copy\n     * input text verbatim with <b>no</b> modifications (including\n     * that no escaping is done and no separators are added even\n     * if context [array, object] would otherwise require such).\n     * If such separators are desired, use\n     * {@link #writeRawValue(String)} instead.\n     *<p>\n     * Note that not all generator implementations necessarily support\n     * such by-pass methods: those that do not will throw\n     * {@link UnsupportedOperationException}.\n     */\n    public abstract void writeRaw(String text) throws IOException;\n\n    /**\n     * Method that will force generator to copy\n     * input text verbatim with <b>no</b> modifications (including\n     * that no escaping is done and no separators are added even\n     * if context [array, object] would otherwise require such).\n     * If such separators are desired, use\n     * {@link #writeRawValue(String)} instead.\n     *<p>\n     * Note that not all generator implementations necessarily support\n     * such by-pass methods: those that do not will throw\n     * {@link UnsupportedOperationException}.\n     */\n    public abstract void writeRaw(String text, int offset, int len) throws IOException;\n\n    /**\n     * Method that will force generator to copy\n     * input text verbatim with <b>no</b> modifications (including\n     * that no escaping is done and no separators are added even\n     * if context [array, object] would otherwise require such).\n     * If such separators are desired, use\n     * {@link #writeRawValue(String)} instead.\n     *<p>\n     * Note that not all generator implementations necessarily support\n     * such by-pass methods: those that do not will throw\n     * {@link UnsupportedOperationException}.\n     */\n    public abstract void writeRaw(char[] text, int offset, int len) throws IOException;\n\n    /**\n     * Method that will force generator to copy\n     * input text verbatim with <b>no</b> modifications (including\n     * that no escaping is done and no separators are added even\n     * if context [array, object] would otherwise require such).\n     * If such separators are desired, use\n     * {@link #writeRawValue(String)} instead.\n     *<p>\n     * Note that not all generator implementations necessarily support\n     * such by-pass methods: those that do not will throw\n     * {@link UnsupportedOperationException}.\n     */\n    public abstract void writeRaw(char c) throws IOException;\n\n    /**\n     * Method that will force generator to copy\n     * input text verbatim with <b>no</b> modifications (including\n     * that no escaping is done and no separators are added even\n     * if context [array, object] would otherwise require such).\n     * If such separators are desired, use\n     * {@link #writeRawValue(String)} instead.\n     *<p>\n     * Note that not all generator implementations necessarily support\n     * such by-pass methods: those that do not will throw\n     * {@link UnsupportedOperationException}.\n     *<p>\n     * The default implementation delegates to {@link #writeRaw(String)};\n     * other backends that support raw inclusion of text are encouraged\n     * to implement it in more efficient manner (especially if they\n     * use UTF-8 encoding).\n     * \n     * @since 2.1\n     */\n    public void writeRaw(SerializableString raw) throws IOException {\n        writeRaw(raw.getValue());\n    }\n\n    /**\n     * Method that will force generator to copy\n     * input text verbatim without any modifications, but assuming\n     * it must constitute a single legal JSON value (number, string,\n     * boolean, null, Array or List). Assuming this, proper separators\n     * are added if and as needed (comma or colon), and generator\n     * state updated to reflect this.\n     */\n    public abstract void writeRawValue(String text) throws IOException;\n\n    public abstract void writeRawValue(String text, int offset, int len) throws IOException;\n\n    public abstract void writeRawValue(char[] text, int offset, int len) throws IOException;\n\n    /**\n     * Method similar to {@link #writeRawValue(String)}, but potentially more\n     * efficient as it may be able to use pre-encoded content (similar to\n     * {@link #writeRaw(SerializableString)}.\n     * \n     * @since 2.5\n     */\n    public void writeRawValue(SerializableString raw) throws IOException {\n        writeRawValue(raw.getValue());\n    }\n\n    /**\n     * Method that will output given chunk of binary data as base64\n     * encoded, as a complete String value (surrounded by double quotes).\n     * This method defaults\n     *<p>\n     * Note: because JSON Strings can not contain unescaped linefeeds,\n     * if linefeeds are included (as per last argument), they must be\n     * escaped. This adds overhead for decoding without improving\n     * readability.\n     * Alternatively if linefeeds are not included,\n     * resulting String value may violate the requirement of base64\n     * RFC which mandates line-length of 76 characters and use of\n     * linefeeds. However, all {@link JsonParser} implementations\n     * are required to accept such \"long line base64\"; as do\n     * typical production-level base64 decoders.\n     *\n     * @param bv Base64 variant to use: defines details such as\n     *   whether padding is used (and if so, using which character);\n     *   what is the maximum line length before adding linefeed,\n     *   and also the underlying alphabet to use.\n     */\n    public abstract void writeBinary(Base64Variant bv,\n            byte[] data, int offset, int len) throws IOException;\n\n    /**\n     * Similar to {@link #writeBinary(Base64Variant,byte[],int,int)},\n     * but default to using the Jackson default Base64 variant \n     * (which is {@link Base64Variants#MIME_NO_LINEFEEDS}).\n     */\n    public void writeBinary(byte[] data, int offset, int len) throws IOException {\n        writeBinary(Base64Variants.getDefaultVariant(), data, offset, len);\n    }\n\n    /**\n     * Similar to {@link #writeBinary(Base64Variant,byte[],int,int)},\n     * but assumes default to using the Jackson default Base64 variant \n     * (which is {@link Base64Variants#MIME_NO_LINEFEEDS}). Also\n     * assumes that whole byte array is to be output.\n     */\n    public void writeBinary(byte[] data) throws IOException {\n        writeBinary(Base64Variants.getDefaultVariant(), data, 0, data.length);\n    }\n\n    /**\n     * Similar to {@link #writeBinary(Base64Variant,InputStream,int)},\n     * but assumes default to using the Jackson default Base64 variant \n     * (which is {@link Base64Variants#MIME_NO_LINEFEEDS}).\n     * \n     * @param data InputStream to use for reading binary data to write.\n     *    Will not be closed after successful write operation\n     * @param dataLength (optional) number of bytes that will be available;\n     *    or -1 to be indicate it is not known. Note that implementations\n     *    need not support cases where length is not known in advance; this\n     *    depends on underlying data format: JSON output does NOT require length,\n     *    other formats may\n     */\n    public int writeBinary(InputStream data, int dataLength)\n        throws IOException {\n        return writeBinary(Base64Variants.getDefaultVariant(), data, dataLength);\n    }\n    \n    /**\n     * Method similar to {@link #writeBinary(Base64Variant,byte[],int,int)},\n     * but where input is provided through a stream, allowing for incremental\n     * writes without holding the whole input in memory.\n     * \n     * @param bv Base64 variant to use\n     * @param data InputStream to use for reading binary data to write.\n     *    Will not be closed after successful write operation\n     * @param dataLength (optional) number of bytes that will be available;\n     *    or -1 to be indicate it is not known.\n     *    If a positive length is given, <code>data</code> MUST provide at least\n     *    that many bytes: if not, an exception will be thrown.\n     *    Note that implementations\n     *    need not support cases where length is not known in advance; this\n     *    depends on underlying data format: JSON output does NOT require length,\n     *    other formats may.\n     * \n     * @return Number of bytes read from <code>data</code> and written as binary payload\n     * \n     * @since 2.1\n     */\n    public abstract int writeBinary(Base64Variant bv,\n            InputStream data, int dataLength) throws IOException;\n\n    /*\n    /**********************************************************\n    /* Public API, write methods, numeric\n    /**********************************************************\n     */\n\n    /**\n     * Method for outputting given value as JSON number.\n     * Can be called in any context where a value is expected\n     * (Array value, Object field value, root-level value).\n     * Additional white space may be added around the value\n     * if pretty-printing is enabled.\n     *\n     * @param v Number value to write\n     *\n     * @since 2.2\n     */\n    public void writeNumber(short v) throws IOException { writeNumber((int) v); }\n\n    /**\n     * Method for outputting given value as JSON number.\n     * Can be called in any context where a value is expected\n     * (Array value, Object field value, root-level value).\n     * Additional white space may be added around the value\n     * if pretty-printing is enabled.\n     *\n     * @param v Number value to write\n     */\n    public abstract void writeNumber(int v) throws IOException;\n\n    /**\n     * Method for outputting given value as JSON number.\n     * Can be called in any context where a value is expected\n     * (Array value, Object field value, root-level value).\n     * Additional white space may be added around the value\n     * if pretty-printing is enabled.\n     *\n     * @param v Number value to write\n     */\n    public abstract void writeNumber(long v) throws IOException;\n\n    /**\n     * Method for outputting given value as JSON number.\n     * Can be called in any context where a value is expected\n     * (Array value, Object field value, root-level value).\n     * Additional white space may be added around the value\n     * if pretty-printing is enabled.\n     *\n     * @param v Number value to write\n     */\n    public abstract void writeNumber(BigInteger v) throws IOException;\n\n    /**\n     * Method for outputting indicate JSON numeric value.\n     * Can be called in any context where a value is expected\n     * (Array value, Object field value, root-level value).\n     * Additional white space may be added around the value\n     * if pretty-printing is enabled.\n     *\n     * @param v Number value to write\n     */\n    public abstract void writeNumber(double v) throws IOException;\n\n    /**\n     * Method for outputting indicate JSON numeric value.\n     * Can be called in any context where a value is expected\n     * (Array value, Object field value, root-level value).\n     * Additional white space may be added around the value\n     * if pretty-printing is enabled.\n     *\n     * @param v Number value to write\n     */\n    public abstract void writeNumber(float v) throws IOException;\n\n    /**\n     * Method for outputting indicate JSON numeric value.\n     * Can be called in any context where a value is expected\n     * (Array value, Object field value, root-level value).\n     * Additional white space may be added around the value\n     * if pretty-printing is enabled.\n     *\n     * @param v Number value to write\n     */\n    public abstract void writeNumber(BigDecimal v) throws IOException;\n\n    /**\n     * Write method that can be used for custom numeric types that can\n     * not be (easily?) converted to \"standard\" Java number types.\n     * Because numbers are not surrounded by double quotes, regular\n     * {@link #writeString} method can not be used; nor\n     * {@link #writeRaw} because that does not properly handle\n     * value separators needed in Array or Object contexts.\n     *<p>\n     * Note: because of lack of type safety, some generator\n     * implementations may not be able to implement this\n     * method. For example, if a binary JSON format is used,\n     * it may require type information for encoding; similarly\n     * for generator-wrappers around Java objects or JSON nodes.\n     * If implementation does not implement this method,\n     * it needs to throw {@link UnsupportedOperationException}.\n     * \n     * @throws UnsupportedOperationException If underlying data format does not\n     *   support numbers serialized textually AND if generator is not allowed\n     *   to just output a String instead (Schema-based formats may require actual\n     *   number, for example)\n     */\n    public abstract void writeNumber(String encodedValue) throws IOException;\n\n    /*\n    /**********************************************************\n    /* Public API, write methods, other value types\n    /**********************************************************\n     */\n    \n    /**\n     * Method for outputting literal JSON boolean value (one of\n     * Strings 'true' and 'false').\n     * Can be called in any context where a value is expected\n     * (Array value, Object field value, root-level value).\n     * Additional white space may be added around the value\n     * if pretty-printing is enabled.\n     */\n    public abstract void writeBoolean(boolean state) throws IOException;\n\n    /**\n     * Method for outputting literal JSON null value.\n     * Can be called in any context where a value is expected\n     * (Array value, Object field value, root-level value).\n     * Additional white space may be added around the value\n     * if pretty-printing is enabled.\n     */\n    public abstract void writeNull() throws IOException;\n\n    /**\n     * Method that can be called on backends that support passing opaque datatypes of\n     * non-JSON formats\n     *\n     * @since 2.8\n     */\n    public void writeEmbeddedObject(Object object) throws IOException {\n        // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n        throw new JsonGenerationException(\"No native support for writing embedded objects\",\n                this);\n    }\n    \n    /*\n    /**********************************************************\n",
    "label": "buggy",
    "id": "ddc453d3-ae60-4ce5-8ab8-94ce4de17504"
  },
  {
    "project": "Closure",
    "bug_id": "101",
    "file": "com/google/javascript/jscomp/CommandLineRunner.java",
    "snippet": "  /**\n   * Create a new command-line runner. You should only need to call\n   * the constructor if you're extending this class. Otherwise, the main\n   * method should instantiate it.\n   */\n  protected CommandLineRunner(String[] args)\n      throws CmdLineException {\n    super();\n    initConfigFromFlags(args, System.err);\n  }\n\n  protected CommandLineRunner(String[] args, PrintStream out, PrintStream err)\n      throws CmdLineException {\n    super(out, err);\n    initConfigFromFlags(args, err);\n  }\n\n  private void initConfigFromFlags(\n      String[] args, PrintStream err)\n      throws CmdLineException {\n    // Args4j has a different format that the old command-line parser.\n    // So we use some voodoo to get the args into the format that args4j\n    // expects.\n    Pattern argPattern = Pattern.compile(\"(--[a-zA-Z_]+)=(.*)\");\n    Pattern quotesPattern = Pattern.compile(\"^['\\\"](.*)['\\\"]$\");\n    List<String> processedArgs = Lists.newArrayList();\n    for (String arg : args) {\n      Matcher matcher = argPattern.matcher(arg);\n      if (matcher.matches()) {\n        processedArgs.add(matcher.group(1));\n\n        String value = matcher.group(2);\n        Matcher quotesMatcher = quotesPattern.matcher(value);\n        if (quotesMatcher.matches()) {\n          processedArgs.add(quotesMatcher.group(1));\n        } else {\n          processedArgs.add(value);\n        }\n      } else {\n        processedArgs.add(arg);\n      }\n    }\n\n    CmdLineParser parser = new CmdLineParser(flags);\n    try {\n      parser.parseArgument(processedArgs.toArray(new String[] {}));\n    } catch (CmdLineException e) {\n      err.println(e.getMessage());\n      parser.printUsage(err);\n      throw e;\n    }\n    getCommandLineConfig()\n        .setPrintTree(flags.print_tree)\n        .setComputePhaseOrdering(flags.compute_phase_ordering)\n        .setPrintAst(flags.print_ast)\n        .setPrintPassGraph(flags.print_pass_graph)\n        .setJscompDevMode(flags.jscomp_dev_mode)\n        .setLoggingLevel(flags.logging_level)\n        .setExterns(flags.externs)\n        .setJs(flags.js)\n        .setJsOutputFile(flags.js_output_file)\n        .setModule(flags.module)\n        .setVariableMapInputFile(flags.variable_map_input_file)\n        .setPropertyMapInputFile(flags.property_map_input_file)\n        .setVariableMapOutputFile(flags.variable_map_output_file)\n        .setCreateNameMapFiles(flags.create_name_map_files)\n        .setPropertyMapOutputFile(flags.property_map_output_file)\n        .setThirdParty(flags.third_party)\n        .setSummaryDetailLevel(flags.summary_detail_level)\n        .setOutputWrapper(flags.output_wrapper)\n        .setOutputWrapperMarker(flags.output_wrapper_marker)\n        .setModuleWrapper(flags.module_wrapper)\n        .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n        .setCreateSourceMap(flags.create_source_map)\n        .setJscompError(flags.jscomp_error)\n        .setJscompWarning(flags.jscomp_warning)\n        .setJscompOff(flags.jscomp_off)\n        .setDefine(flags.define)\n        .setCharset(flags.charset);\n  }\n\n  @Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n\n    options.closurePass = flags.process_closure_primitives;\n    initOptionsFromFlags(options);\n    return options;\n  }\n",
    "label": "clean",
    "id": "e8331392-8498-4bcb-97a6-8147a06d206a"
  },
  {
    "project": "Lang",
    "bug_id": "41",
    "file": "org/apache/commons/lang/ClassUtils.java",
    "snippet": "    /**\n     * <p>Gets the class name minus the package name from a String.</p>\n     *\n     * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n     *\n     * @param className  the className to get the short name for\n     * @return the class name of the class without the package name or an empty string\n     */\n    public static String getShortClassName(String className) {\n        if (className == null) {\n            return StringUtils.EMPTY;\n        }\n        if (className.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        StringBuffer arrayPrefix = new StringBuffer();\n\n        // Handle array encoding\n        if (className.startsWith(\"[\")) {\n            while (className.charAt(0) == '[') {\n                className = className.substring(1);\n",
    "label": "clean",
    "id": "a2b8f9c1-658f-4b13-b6ca-fe1fa1247c0d"
  },
  {
    "project": "Chart",
    "bug_id": "19",
    "file": "org/jfree/chart/plot/CategoryPlot.java",
    "snippet": "    /**\n     * Returns the index of the specified axis, or <code>-1</code> if the axis\n     * is not assigned to the plot.\n     * \n     * @param axis  the axis (<code>null</code> not permitted).\n     * \n     * @return The axis index.\n     * \n     * @see #getDomainAxis(int)\n     * @see #getRangeAxisIndex(ValueAxis)\n     * \n     * @since 1.0.3\n     */\n    public int getDomainAxisIndex(CategoryAxis axis) {\n        if (axis == null) {\n            throw new IllegalArgumentException(\"Null 'axis' argument.\");\n        }\n        return this.domainAxes.indexOf(axis);\n    }\n    \n",
    "label": "clean",
    "id": "c14d596b-bab9-4d9c-8b36-08537f4f8159"
  },
  {
    "project": "Jsoup",
    "bug_id": "64",
    "file": "org/jsoup/parser/HtmlTreeBuilderState.java",
    "snippet": "/**\n * The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.\n */\nenum HtmlTreeBuilderState {\n    Initial {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                return true; // ignore whitespace\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype()) {\n                // todo: parse error check on expected doctypes\n                // todo: quirk state check on doctype ids\n                Token.Doctype d = t.asDoctype();\n                DocumentType doctype = new DocumentType(\n                    tb.settings.normalizeTag(d.getName()), d.getPubSysKey(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());\n                tb.getDocument().appendChild(doctype);\n                if (d.isForceQuirks())\n                    tb.getDocument().quirksMode(Document.QuirksMode.quirks);\n                tb.transition(BeforeHtml);\n            } else {\n                // todo: check not iframe srcdoc\n                tb.transition(BeforeHtml);\n                return tb.process(t); // re-process token\n            }\n            return true;\n        }\n    },\n    BeforeHtml {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (isWhitespace(t)) {\n                return true; // ignore whitespace\n            } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {\n                tb.insert(t.asStartTag());\n                tb.transition(BeforeHead);\n            } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {\n                return anythingElse(t, tb);\n            } else if (t.isEndTag()) {\n                tb.error(this);\n                return false;\n            } else {\n                return anythingElse(t, tb);\n            }\n            return true;\n        }\n\n        private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            tb.insertStartTag(\"html\");\n            tb.transition(BeforeHead);\n            return tb.process(t);\n        }\n    },\n    BeforeHead {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                return true;\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {\n                return InBody.process(t, tb); // does not transition\n            } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) {\n                Element head = tb.insert(t.asStartTag());\n                tb.setHeadElement(head);\n                tb.transition(InHead);\n            } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {\n                tb.processStartTag(\"head\");\n                return tb.process(t);\n            } else if (t.isEndTag()) {\n                tb.error(this);\n                return false;\n            } else {\n                tb.processStartTag(\"head\");\n                return tb.process(t);\n            }\n            return true;\n        }\n    },\n    InHead {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                tb.insert(t.asCharacter());\n                return true;\n            }\n            switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                        tb.insert(start);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }\n            return true;\n        }\n\n        private boolean anythingElse(Token t, TreeBuilder tb) {\n            tb.processEndTag(\"head\");\n            return tb.process(t);\n        }\n    },\n    InHeadNoscript {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isDoctype()) {\n                tb.error(this);\n            } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {\n                return tb.process(t, InBody);\n            } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) {\n                tb.pop();\n                tb.transition(InHead);\n            } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) {\n                return tb.process(t, InHead);\n            } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) {\n                return anythingElse(t, tb);\n            } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) {\n                tb.error(this);\n                return false;\n            } else {\n                return anythingElse(t, tb);\n            }\n            return true;\n        }\n\n        private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            tb.error(this);\n            tb.insert(new Token.Character().data(t.toString()));\n            return true;\n        }\n    },\n    AfterHead {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                tb.insert(t.asCharacter());\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype()) {\n                tb.error(this);\n            } else if (t.isStartTag()) {\n                Token.StartTag startTag = t.asStartTag();\n                String name = startTag.normalName();\n                if (name.equals(\"html\")) {\n                    return tb.process(t, InBody);\n                } else if (name.equals(\"body\")) {\n                    tb.insert(startTag);\n                    tb.framesetOk(false);\n                    tb.transition(InBody);\n                } else if (name.equals(\"frameset\")) {\n                    tb.insert(startTag);\n                    tb.transition(InFrameset);\n                } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {\n                    tb.error(this);\n                    Element head = tb.getHeadElement();\n                    tb.push(head);\n                    tb.process(t, InHead);\n                    tb.removeFromStack(head);\n                } else if (name.equals(\"head\")) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    anythingElse(t, tb);\n                }\n            } else if (t.isEndTag()) {\n                if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) {\n                    anythingElse(t, tb);\n                } else {\n                    tb.error(this);\n                    return false;\n                }\n            } else {\n                anythingElse(t, tb);\n            }\n            return true;\n        }\n\n        private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            tb.processStartTag(\"body\");\n            tb.framesetOk(true);\n            return tb.process(t);\n        }\n    },\n    InBody {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    // todo - refactor to a switch statement\n                    String name = startTag.normalName();\n                    if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.processEndTag(\"a\");\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"span\")) {\n                        // same as final else, but short circuits lots of checks\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.processEndTag(\"li\");\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().get(0);\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.remove(stack.size()-1);\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {\n                                tb.processEndTag(el.nodeName());\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.processEndTag(\"button\");\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Formatters)) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.processEndTag(\"nobr\");\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        if (tb.getFromStack(\"svg\") == null)\n                            return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n                        else\n                            tb.insert(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.processStartTag(\"form\");\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.processStartTag(\"hr\");\n                        tb.processStartTag(\"label\");\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character().data(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.processStartTag(\"input\", inputAttribs);\n                        tb.processEndTag(\"label\");\n                        tb.processStartTag(\"hr\");\n                        tb.processEndTag(\"form\");\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                        // Adoption Agency Algorithm.\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            ArrayList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize = stack.size();\n                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue;\n                                } else if (node == formatEl)\n                                    break;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());\n                                // case will follow the original node (so honours ParseSettings)\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"span\")) {\n                        // same as final fall through, but saves short circuit\n                        return anyOtherEndTag(t, tb);\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.processEndTag(\"body\");\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.processStartTag(name); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (!tb.inScope(Constants.Headings)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(Constants.Headings);\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"br\");\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }\n            return true;\n        }\n\n        boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n            String name = t.asEndTag().name(); // matches with case sensitivity if enabled\n            ArrayList<Element> stack = tb.getStack();\n            for (int pos = stack.size() -1; pos >= 0; pos--) {\n                Element node = stack.get(pos);\n                if (node.nodeName().equals(name)) {\n                    tb.generateImpliedEndTags(name);\n                    if (!name.equals(tb.currentElement().nodeName()))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                    break;\n                } else {\n                    if (tb.isSpecial(node)) {\n                        tb.error(this);\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n    },\n    Text {\n        // in script, style etc. normally treated as data tags\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isCharacter()) {\n                tb.insert(t.asCharacter());\n            } else if (t.isEOF()) {\n                tb.error(this);\n                // if current node is script: already started\n                tb.pop();\n                tb.transition(tb.originalState());\n                return tb.process(t);\n            } else if (t.isEndTag()) {\n                // if: An end tag whose tag name is \"script\" -- scripting nesting level, if evaluating scripts\n                tb.pop();\n                tb.transition(tb.originalState());\n            }\n            return true;\n        }\n    },\n    InTable {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isCharacter()) {\n                tb.newPendingTableCharacters();\n                tb.markInsertionMode();\n                tb.transition(InTableText);\n                return tb.process(t);\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n                return true;\n            } else if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isStartTag()) {\n                Token.StartTag startTag = t.asStartTag();\n                String name = startTag.normalName();\n                if (name.equals(\"caption\")) {\n                    tb.clearStackToTableContext();\n                    tb.insertMarkerToFormattingElements();\n                    tb.insert(startTag);\n                    tb.transition(InCaption);\n                } else if (name.equals(\"colgroup\")) {\n                    tb.clearStackToTableContext();\n                    tb.insert(startTag);\n                    tb.transition(InColumnGroup);\n                } else if (name.equals(\"col\")) {\n                    tb.processStartTag(\"colgroup\");\n                    return tb.process(t);\n                } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                    tb.clearStackToTableContext();\n                    tb.insert(startTag);\n                    tb.transition(InTableBody);\n                } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) {\n                    tb.processStartTag(\"tbody\");\n                    return tb.process(t);\n                } else if (name.equals(\"table\")) {\n                    tb.error(this);\n                    boolean processed = tb.processEndTag(\"table\");\n                    if (processed) // only ignored if in fragment\n                        return tb.process(t);\n                } else if (StringUtil.in(name, \"style\", \"script\")) {\n                    return tb.process(t, InHead);\n                } else if (name.equals(\"input\")) {\n                    if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.insertEmpty(startTag);\n                    }\n                } else if (name.equals(\"form\")) {\n                    tb.error(this);\n                    if (tb.getFormElement() != null)\n                        return false;\n                    else {\n                        tb.insertForm(startTag, false);\n                    }\n                } else {\n                    return anythingElse(t, tb);\n                }\n                return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable\n            } else if (t.isEndTag()) {\n                Token.EndTag endTag = t.asEndTag();\n                String name = endTag.normalName();\n\n                if (name.equals(\"table\")) {\n                    if (!tb.inTableScope(name)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.popStackToClose(\"table\");\n                    }\n                    tb.resetInsertionMode();\n                } else if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    return anythingElse(t, tb);\n                }\n                return true; // todo: as above todo\n            } else if (t.isEOF()) {\n                if (tb.currentElement().nodeName().equals(\"html\"))\n                    tb.error(this);\n                return true; // stops parsing\n            }\n            return anythingElse(t, tb);\n        }\n\n        boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            tb.error(this);\n            boolean processed;\n            if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                tb.setFosterInserts(true);\n                processed = tb.process(t, InBody);\n                tb.setFosterInserts(false);\n            } else {\n                processed = tb.process(t, InBody);\n            }\n            return processed;\n        }\n    },\n    InTableText {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c.getData());\n                    }\n                    break;\n                default:\n                    // todo - don't really like the way these table character data lists are built\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (String character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(new Token.Character().data(character), InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(new Token.Character().data(character), InBody);\n                                }\n                            } else\n                                tb.insert(new Token.Character().data(character));\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }\n            return true;\n        }\n    },\n    InCaption {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) {\n                Token.EndTag endTag = t.asEndTag();\n                String name = endTag.normalName();\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(\"caption\"))\n                        tb.error(this);\n                    tb.popStackToClose(\"caption\");\n                    tb.clearFormattingElementsToLastMarker();\n                    tb.transition(InTable);\n                }\n            } else if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().normalName().equals(\"table\"))\n                    ) {\n                tb.error(this);\n                boolean processed = tb.processEndTag(\"caption\");\n                if (processed)\n                    return tb.process(t);\n            } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else {\n                return tb.process(t, InBody);\n            }\n            return true;\n        }\n    },\n    InColumnGroup {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                tb.insert(t.asCharacter());\n                return true;\n            }\n            switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    switch (startTag.normalName()) {\n                        case \"html\":\n                            return tb.process(t, InBody);\n                        case \"col\":\n                            tb.insertEmpty(startTag);\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    if (endTag.normalName.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }\n            return true;\n        }\n\n        private boolean anythingElse(Token t, TreeBuilder tb) {\n            boolean processed = tb.processEndTag(\"colgroup\");\n            if (processed) // only ignored in frag case\n                return tb.process(t);\n            return true;\n        }\n    },\n    InTableBody {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"tr\");\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }\n            return true;\n        }\n\n        private boolean exitTableBody(Token t, HtmlTreeBuilder tb) {\n            if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) {\n                // frag case\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableBodyContext();\n            tb.processEndTag(tb.currentElement().nodeName()); // tbody, tfoot, thead\n            return tb.process(t);\n        }\n\n        private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            return tb.process(t, InTable);\n        }\n    },\n    InRow {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isStartTag()) {\n                Token.StartTag startTag = t.asStartTag();\n                String name = startTag.normalName();\n\n                if (StringUtil.in(name, \"th\", \"td\")) {\n                    tb.clearStackToTableRowContext();\n                    tb.insert(startTag);\n                    tb.transition(InCell);\n                    tb.insertMarkerToFormattingElements();\n                } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                    return handleMissingTr(t, tb);\n                } else {\n                    return anythingElse(t, tb);\n                }\n            } else if (t.isEndTag()) {\n                Token.EndTag endTag = t.asEndTag();\n                String name = endTag.normalName();\n\n                if (name.equals(\"tr\")) {\n                    if (!tb.inTableScope(name)) {\n                        tb.error(this); // frag\n                        return false;\n                    }\n                    tb.clearStackToTableRowContext();\n                    tb.pop(); // tr\n                    tb.transition(InTableBody);\n                } else if (name.equals(\"table\")) {\n                    return handleMissingTr(t, tb);\n                } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                    if (!tb.inTableScope(name)) {\n                        tb.error(this);\n                        return false;\n                    }\n                    tb.processEndTag(\"tr\");\n                    return tb.process(t);\n                } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    return anythingElse(t, tb);\n                }\n            } else {\n                return anythingElse(t, tb);\n            }\n            return true;\n        }\n\n        private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            return tb.process(t, InTable);\n        }\n\n        private boolean handleMissingTr(Token t, TreeBuilder tb) {\n            boolean processed = tb.processEndTag(\"tr\");\n            if (processed)\n                return tb.process(t);\n            else\n                return false;\n        }\n    },\n    InCell {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isEndTag()) {\n                Token.EndTag endTag = t.asEndTag();\n                String name = endTag.normalName();\n\n                if (StringUtil.in(name, \"td\", \"th\")) {\n                    if (!tb.inTableScope(name)) {\n                        tb.error(this);\n                        tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag\n                        return false;\n                    }\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                    tb.clearFormattingElementsToLastMarker();\n                    tb.transition(InRow);\n                } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\")) {\n                    tb.error(this);\n                    return false;\n                } else if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                    if (!tb.inTableScope(name)) {\n                        tb.error(this);\n                        return false;\n                    }\n                    closeCell(tb);\n                    return tb.process(t);\n                } else {\n                    return anythingElse(t, tb);\n                }\n            } else if (t.isStartTag() &&\n                    StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) {\n                    tb.error(this);\n                    return false;\n                }\n                closeCell(tb);\n                return tb.process(t);\n            } else {\n                return anythingElse(t, tb);\n            }\n            return true;\n        }\n\n        private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            return tb.process(t, InBody);\n        }\n\n        private void closeCell(HtmlTreeBuilder tb) {\n            if (tb.inTableScope(\"td\"))\n                tb.processEndTag(\"td\");\n            else\n                tb.processEndTag(\"th\"); // only here if th or td in scope\n        }\n    },\n    InSelect {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.processEndTag(\"optgroup\");\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.processEndTag(\"select\");\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.processEndTag(\"select\");\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    switch (name) {\n                        case \"optgroup\":\n                            if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                                tb.processEndTag(\"option\");\n                            if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"option\":\n                            if (tb.currentElement().nodeName().equals(\"option\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"select\":\n                            if (!tb.inSelectScope(name)) {\n                                tb.error(this);\n                                return false;\n                            } else {\n                                tb.popStackToClose(name);\n                                tb.resetInsertionMode();\n                            }\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }\n            return true;\n        }\n\n        private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n            tb.error(this);\n            return false;\n        }\n    },\n    InSelectInTable {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {\n                tb.error(this);\n                tb.processEndTag(\"select\");\n                return tb.process(t);\n            } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {\n                tb.error(this);\n                if (tb.inTableScope(t.asEndTag().normalName())) {\n                    tb.processEndTag(\"select\");\n                    return (tb.process(t));\n                } else\n                    return false;\n            } else {\n                return tb.process(t, InSelect);\n            }\n        }\n    },\n    AfterBody {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                return tb.process(t, InBody);\n            } else if (t.isComment()) {\n                tb.insert(t.asComment()); // into html node\n            } else if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {\n                return tb.process(t, InBody);\n            } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) {\n                if (tb.isFragmentParsing()) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.transition(AfterAfterBody);\n                }\n            } else if (t.isEOF()) {\n                // chillax! we're done\n            } else {\n                tb.error(this);\n                tb.transition(InBody);\n                return tb.process(t);\n            }\n            return true;\n        }\n    },\n    InFrameset {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                tb.insert(t.asCharacter());\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isStartTag()) {\n                Token.StartTag start = t.asStartTag();\n                switch (start.normalName()) {\n                    case \"html\":\n                        return tb.process(start, InBody);\n                    case \"frameset\":\n                        tb.insert(start);\n                        break;\n                    case \"frame\":\n                        tb.insertEmpty(start);\n                        break;\n                    case \"noframes\":\n                        return tb.process(start, InHead);\n                    default:\n                        tb.error(this);\n                        return false;\n                }\n            } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) {\n                if (tb.currentElement().nodeName().equals(\"html\")) { // frag\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.pop();\n                    if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) {\n                        tb.transition(AfterFrameset);\n                    }\n                }\n            } else if (t.isEOF()) {\n                if (!tb.currentElement().nodeName().equals(\"html\")) {\n                    tb.error(this);\n                    return true;\n                }\n            } else {\n                tb.error(this);\n                return false;\n            }\n            return true;\n        }\n    },\n    AfterFrameset {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (isWhitespace(t)) {\n                tb.insert(t.asCharacter());\n            } else if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype()) {\n                tb.error(this);\n                return false;\n            } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {\n                return tb.process(t, InBody);\n            } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) {\n                tb.transition(AfterAfterFrameset);\n            } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) {\n                return tb.process(t, InHead);\n            } else if (t.isEOF()) {\n                // cool your heels, we're complete\n            } else {\n                tb.error(this);\n                return false;\n            }\n            return true;\n        }\n    },\n    AfterAfterBody {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) {\n                return tb.process(t, InBody);\n            } else if (t.isEOF()) {\n                // nice work chuck\n            } else {\n                tb.error(this);\n                tb.transition(InBody);\n                return tb.process(t);\n            }\n            return true;\n        }\n    },\n    AfterAfterFrameset {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            if (t.isComment()) {\n                tb.insert(t.asComment());\n            } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) {\n                return tb.process(t, InBody);\n            } else if (t.isEOF()) {\n                // nice work chuck\n            } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) {\n                return tb.process(t, InHead);\n            } else {\n                tb.error(this);\n                return false;\n            }\n            return true;\n        }\n    },\n    ForeignContent {\n        boolean process(Token t, HtmlTreeBuilder tb) {\n            return true;\n            // todo: implement. Also; how do we get here?\n        }\n    };\n\n    private static String nullString = String.valueOf('\\u0000');\n\n    abstract boolean process(Token t, HtmlTreeBuilder tb);\n\n    private static boolean isWhitespace(Token t) {\n        if (t.isCharacter()) {\n            String data = t.asCharacter().getData();\n            return isWhitespace(data);\n        }\n        return false;\n    }\n\n    private static boolean isWhitespace(String data) {\n        // todo: this checks more than spec - \"\\t\", \"\\n\", \"\\f\", \"\\r\", \" \"\n        for (int i = 0; i < data.length(); i++) {\n            char c = data.charAt(i);\n            if (!StringUtil.isWhitespace(c))\n                return false;\n        }\n        return true;\n    }\n\n    private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) {\n        tb.tokeniser.transition(TokeniserState.Rcdata);\n        tb.markInsertionMode();\n        tb.transition(Text);\n        tb.insert(startTag);\n    }\n\n    private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) {\n        tb.insert(startTag);\n        tb.tokeniser.transition(TokeniserState.Rawtext);\n        tb.markInsertionMode();\n        tb.transition(Text);\n    }\n\n",
    "label": "buggy",
    "id": "1ba3b8cc-54be-4170-aa61-8b6163f64d7e"
  },
  {
    "project": "Compress",
    "bug_id": "7",
    "file": "org/apache/commons/compress/archivers/tar/TarUtils.java",
    "snippet": "    /**\n     * Parse an entry name from a buffer.\n     * Parsing stops when a NUL is found\n     * or the buffer length is reached.\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse.\n     * @return The entry name.\n     */\n    public static String parseName(byte[] buffer, final int offset, final int length) {\n        StringBuffer result = new StringBuffer(length);\n        int          end = offset + length;\n\n        for (int i = offset; i < end; ++i) {\n            byte b = buffer[i];\n            if (b == 0) { // Trailing null\n                break;\n            }\n            result.append((char) (b & 0xFF)); // Allow for sign-extension\n        }\n",
    "label": "clean",
    "id": "6f7a99f4-464a-410d-97d0-43020ce27396"
  },
  {
    "project": "Collections",
    "bug_id": "10",
    "file": "org/apache/commons/collections/map/MultiValueMap.java",
    "snippet": "/*\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage org.apache.commons.collections.map;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\n\nimport java.util.AbstractCollection;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.commons.collections.Factory;\nimport org.apache.commons.collections.FunctorException;\nimport org.apache.commons.collections.MultiMap;\nimport org.apache.commons.collections.iterators.EmptyIterator;\nimport org.apache.commons.collections.iterators.IteratorChain;\n\n/**\n * A MultiValueMap decorates another map, allowing it to have\n * more than one value for a key.\n * <p>\n * A <code>MultiMap</code> is a Map with slightly different semantics.\n * Putting a value into the map will add the value to a Collection at that key.\n * Getting a value will return a Collection, holding all the values put to that key.\n * <p>\n * This implementation is a decorator, allowing any Map implementation\n * to be used as the base.\n * <p>\n * In addition, this implementation allows the type of collection used\n * for the values to be controlled. By default, an <code>ArrayList</code>\n * is used, however a <code>Class</code> to instantiate may be specified,\n * or a factory that returns a <code>Collection</code> instance.\n * <p>\n * <strong>Note that MultiValueMap is not synchronized and is not thread-safe.</strong>\n * If you wish to use this map from multiple threads concurrently, you must use\n * appropriate synchronization. This class may throw exceptions when accessed\n * by concurrent threads without synchronization.\n *\n * @author James Carman\n * @author Christopher Berry\n * @author James Strachan\n * @author Steve Downey\n * @author Stephen Colebourne\n * @author Julien Buret\n * @author Serhiy Yevtushenko\n * @version $Revision$ $Date$\n * @since Commons Collections 3.2\n */\npublic class MultiValueMap extends AbstractMapDecorator implements MultiMap, Serializable {\n\n    /** Serialization version */\n    private static final long serialVersionUID = -2214159910087182007L;\n\n    /** The factory for creating value collections. */\n",
    "label": "clean",
    "id": "21669e4c-eab8-4d4e-8367-360637a181db"
  },
  {
    "project": "Mockito",
    "bug_id": "32",
    "file": "org/mockito/internal/configuration/SpyAnnotationEngine.java",
    "snippet": "/*\n * Copyright (c) 2007 Mockito contributors\n * This program is made available under the terms of the MIT License.\n */\npackage org.mockito.internal.configuration;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\n\nimport org.mockito.Captor;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.Spy;\nimport org.mockito.configuration.AnnotationEngine;\nimport org.mockito.exceptions.Reporter;\nimport org.mockito.exceptions.base.MockitoException;\nimport org.mockito.internal.util.MockUtil;\n\nimport static org.mockito.Mockito.withSettings;\n\n@SuppressWarnings({\"unchecked\"})\npublic class SpyAnnotationEngine implements AnnotationEngine {\n\n    public Object createMockFor(Annotation annotation, Field field) {\n",
    "label": "clean",
    "id": "6ad4e95e-3e48-486c-8abf-7396aadb944e"
  },
  {
    "project": "Math",
    "bug_id": "78",
    "file": "org/apache/commons/math/ode/events/EventState.java",
    "snippet": "    /** Get the upper limit in the iteration count for event localization.\n     * @return upper limit in the iteration count for event localization\n     */\n    public int getMaxIterationCount() {\n        return maxIterationCount;\n    }\n\n    /** Reinitialize the beginning of the step.\n     * @param tStart value of the independent <i>time</i> variable at the\n     * beginning of the step\n     * @param yStart array containing the current value of the state vector\n     * at the beginning of the step\n     * @exception EventException if the event handler\n     * value cannot be evaluated at the beginning of the step\n     */\n    public void reinitializeBegin(final double tStart, final double[] yStart)\n        throws EventException {\n        t0 = tStart;\n        g0 = handler.g(tStart, yStart);\n        g0Positive = g0 >= 0;\n    }\n\n    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step (this implies the step should be\n     * rejected)\n     * @exception DerivativeException if the interpolator fails to\n     * compute the switching function somewhere within the step\n     * @exception EventException if the switching function\n     * cannot be evaluated\n     * @exception ConvergenceException if an event cannot be located\n     */\n    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n        try {\n\n            forward = interpolator.isForward();\n            final double t1 = interpolator.getCurrentTime();\n            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n            final double h  = (t1 - t0) / n;\n\n            double ta = t0;\n            double ga = g0;\n            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n            for (int i = 0; i < n; ++i) {\n\n                // evaluate handler value at the end of the substep\n                tb += h;\n                interpolator.setInterpolatedTime(tb);\n                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n                // check events occurrence\n                if (g0Positive ^ (gb >= 0)) {\n                    // there is a sign change: an event is expected during this step\n\n                    if (ga * gb > 0) {\n                        // this is a corner case:\n                        // - there was an event near ta,\n                        // - there is another event between ta and tb\n                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n",
    "label": "clean",
    "id": "cda716d6-b012-4351-a1bb-31ef95cae8f7"
  },
  {
    "project": "Math",
    "bug_id": "72",
    "file": "org/apache/commons/math/analysis/solvers/BrentSolver.java",
    "snippet": "    /**\n     * Construct a solver.\n     */\n    public BrentSolver() {\n        super(100, 1E-6);\n    }\n\n    /** {@inheritDoc} */\n    @Deprecated\n    public double solve(double min, double max)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n        return solve(f, min, max);\n    }\n\n    /** {@inheritDoc} */\n    @Deprecated\n    public double solve(double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n        return solve(f, min, max, initial);\n    }\n\n    /**\n     * Find a zero in the given interval with an initial guess.\n     * <p>Throws <code>IllegalArgumentException</code> if the values of the\n     * function at the three points have the same sign (note that it is\n     * allowed to have endpoints with the same sign if the initial point has\n     * opposite sign function-wise).</p>\n     *\n     * @param f function to solve.\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param initial the start value to use (must be set to min if no\n     * initial point is known).\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if initial is not between min and max\n     * (even if it <em>is</em> a root)\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifySequence(min, initial, max);\n\n        // return the initial guess if it is good enough\n        double yInitial = f.value(initial);\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        // return the first endpoint if it is good enough\n        double yMin = f.value(min);\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0);\n            return result;\n        }\n\n        // reduce interval if min and initial bracket the root\n        if (yInitial * yMin < 0) {\n",
    "label": "clean",
    "id": "70b8ec44-badd-44fe-9db6-3bf826402a45"
  },
  {
    "project": "Collections",
    "bug_id": "3",
    "file": "org/apache/commons/collections/CollectionUtils.java",
    "snippet": "    /**\n     * Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n     * method returns a collection containing all the elements in <code>c</code>\n     * that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n     * \n     * @param collection  the collection from which items are removed (in the returned collection)\n     * @param remove  the items to be removed from the returned <code>collection</code>\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code> except\n     * any elements that also occur in <code>remove</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since Commons Collections 3.3 (method existed in 3.2 but was completely broken)\n     */\n    public static Collection removeAll(Collection collection, Collection remove) {\n        return ListUtils.retainAll(collection, remove);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a synchronized collection backed by the given collection.\n",
    "label": "buggy",
    "id": "c96f3256-6c63-40c1-9a4c-4a0cd22bf273"
  },
  {
    "project": "Math",
    "bug_id": "53",
    "file": "org/apache/commons/math/complex/Complex.java",
    "snippet": "    /**\n     * Return the absolute value of this complex number.\n     * <p>\n     * Returns <code>NaN</code> if either real or imaginary part is\n     * <code>NaN</code> and <code>Double.POSITIVE_INFINITY</code> if\n     * neither part is <code>NaN</code>, but at least one part takes an infinite\n     * value.</p>\n     *\n     * @return the absolute value\n     */\n    public double abs() {\n        if (isNaN) {\n            return Double.NaN;\n        }\n\n        if (isInfinite()) {\n            return Double.POSITIVE_INFINITY;\n        }\n\n        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n            if (imaginary == 0.0) {\n                return FastMath.abs(real);\n            }\n            double q = real / imaginary;\n            return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);\n        } else {\n            if (real == 0.0) {\n                return FastMath.abs(imaginary);\n            }\n            double q = imaginary / real;\n            return FastMath.abs(real) * FastMath.sqrt(1 + q * q);\n        }\n    }\n\n    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(rhs);\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }\n\n    /**\n",
    "label": "buggy",
    "id": "7c465112-761e-4296-91c8-cde6f53dbcc6"
  },
  {
    "project": "Codec",
    "bug_id": "3",
    "file": "org/apache/commons/codec/language/DoubleMetaphone.java",
    "snippet": "    /**\n     * Sets the maxCodeLen.\n     * @param maxCodeLen The maxCodeLen to set\n     */\n    public void setMaxCodeLen(int maxCodeLen) {\n        this.maxCodeLen = maxCodeLen;\n    }\n\n    //-- BEGIN HANDLERS --//\n\n    /**\n     * Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases\n     */\n    private int handleAEIOUY(String value, DoubleMetaphoneResult result, int \n                             index) {\n        if (index == 0) {\n            result.append('A');\n        }\n        return index + 1;\n    }\n    \n    /**\n     * Handles 'C' cases\n     */\n    private int handleC(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (conditionC0(value, index)) {  // very confusing, moved out\n            result.append('K');\n            index += 2;\n        } else if (index == 0 && contains(value, index, 6, \"CAESAR\")) {\n            result.append('S');\n            index += 2;\n        } else if (contains(value, index, 2, \"CH\")) {\n            index = handleCH(value, result, index);\n        } else if (contains(value, index, 2, \"CZ\") && \n                   !contains(value, index - 2, 4, \"WICZ\")) {\n            //-- \"Czerny\" --//\n            result.append('S', 'X');\n            index += 2;\n        } else if (contains(value, index + 1, 3, \"CIA\")) {\n            //-- \"focaccia\" --//\n            result.append('X');\n            index += 3;\n        } else if (contains(value, index, 2, \"CC\") && \n                   !(index == 1 && charAt(value, 0) == 'M')) {\n            //-- double \"cc\" but not \"McClelland\" --//\n            return handleCC(value, result, index);\n        } else if (contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n            result.append('K');\n            index += 2;\n        } else if (contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n            //-- Italian vs. English --//\n            if (contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n                result.append('S', 'X');\n            } else {\n                result.append('S');\n            }\n            index += 2;\n        } else {\n            result.append('K');\n            if (contains(value, index + 1, 2, \" C\", \" Q\", \" G\")) { \n                //-- Mac Caffrey, Mac Gregor --//\n                index += 3;\n            } else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && \n                       !contains(value, index + 1, 2, \"CE\", \"CI\")) {\n                index += 2;\n            } else {\n                index++;\n            }\n        }\n        \n        return index;\n    }\n\n    /**\n     * Handles 'CC' cases\n     */\n    private int handleCC(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n        if (contains(value, index + 2, 1, \"I\", \"E\", \"H\") && \n            !contains(value, index + 2, 2, \"HU\")) {\n            //-- \"bellocchio\" but not \"bacchus\" --//\n            if ((index == 1 && charAt(value, index - 1) == 'A') || \n                contains(value, index - 1, 5, \"UCCEE\", \"UCCES\")) {\n                //-- \"accident\", \"accede\", \"succeed\" --//\n                result.append(\"KS\");\n            } else {\n                //-- \"bacci\", \"bertucci\", other Italian --//\n                result.append('X');\n            }\n            index += 3;\n        } else {    // Pierce's rule\n            result.append('K');\n            index += 2;\n        }\n        \n        return index;\n    }\n    \n    /**\n     * Handles 'CH' cases\n     */\n    private int handleCH(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n        if (index > 0 && contains(value, index, 4, \"CHAE\")) {   // Michael\n            result.append('K', 'X');\n            return index + 2;\n        } else if (conditionCH0(value, index)) {\n            //-- Greek roots (\"chemistry\", \"chorus\", etc.) --//\n            result.append('K');\n            return index + 2;\n        } else if (conditionCH1(value, index)) {\n            //-- Germanic, Greek, or otherwise 'ch' for 'kh' sound --//\n            result.append('K');\n            return index + 2;\n        } else {\n            if (index > 0) {\n                if (contains(value, 0, 2, \"MC\")) {\n                    result.append('K');\n                } else {\n                    result.append('X', 'K');\n                }\n            } else {\n                result.append('X');\n            }\n            return index + 2;\n        }\n    }\n\n    /**\n     * Handles 'D' cases\n     */\n    private int handleD(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (contains(value, index, 2, \"DG\")) {\n            //-- \"Edge\" --//\n            if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\")) {\n                result.append('J');\n                index += 3;\n                //-- \"Edgar\" --//\n            } else {\n                result.append(\"TK\");\n                index += 2;\n            }\n        } else if (contains(value, index, 2, \"DT\", \"DD\")) {\n            result.append('T');\n            index += 2;\n        } else {\n            result.append('T');\n            index++;\n        }\n        return index;\n    }\n\n    /**\n     * Handles 'G' cases\n     */\n    private int handleG(String value, \n                        DoubleMetaphoneResult result, \n                        int index, \n                        boolean slavoGermanic) {\n        if (charAt(value, index + 1) == 'H') {\n            index = handleGH(value, result, index);\n        } else if (charAt(value, index + 1) == 'N') {\n            if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic) {\n                result.append(\"KN\", \"N\");\n            } else if (!contains(value, index + 2, 2, \"EY\") && \n                       charAt(value, index + 1) != 'Y' && !slavoGermanic) {\n                result.append(\"N\", \"KN\");\n            } else {\n                result.append(\"KN\");\n            }\n            index = index + 2;\n        } else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) {\n            result.append(\"KL\", \"L\");\n            index += 2;\n        } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n            //-- -ges-, -gep-, -gel-, -gie- at beginning --//\n            result.append('K', 'J');\n            index += 2;\n        } else if ((contains(value, index + 1, 2, \"ER\") || \n                    charAt(value, index + 1) == 'Y') &&\n                   !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") &&\n                   !contains(value, index - 1, 1, \"E\", \"I\") && \n                   !contains(value, index - 1, 3, \"RGY\", \"OGY\")) {\n            //-- -ger-, -gy- --//\n            result.append('K', 'J');\n            index += 2;\n        } else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") || \n                   contains(value, index - 1, 4, \"AGGI\", \"OGGI\")) {\n            //-- Italian \"biaggi\" --//\n            if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) {\n                //-- obvious germanic --//\n                result.append('K');\n            } else if (contains(value, index + 1, 3, \"IER\")) {\n                result.append('J');\n            } else {\n                result.append('J', 'K');\n            }\n            index += 2;\n",
    "label": "clean",
    "id": "d769e90f-0efa-443e-aa9a-18c84737b158"
  },
  {
    "project": "Math",
    "bug_id": "89",
    "file": "org/apache/commons/math/stat/Frequency.java",
    "snippet": "    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n     *         or is not comparable with previous entries\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n            addValue((Comparable<?>) v);            \n    }\n    \n    /**\n     * Adds 1 to the frequency count for v.\n",
    "label": "buggy",
    "id": "2897e896-168d-4e3c-89e6-5ea40b5618f8"
  },
  {
    "project": "Jsoup",
    "bug_id": "43",
    "file": "org/jsoup/nodes/Element.java",
    "snippet": "    /**\n     * Gets the last element sibling of this element\n     * @return the last sibling that is an element (aka the parent's last element child) \n     */\n    public Element lastElementSibling() {\n        List<Element> siblings = parent().children();\n        return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;\n    }\n    \n    private static <E extends Element> Integer indexInList(Element search, List<E> elements) {\n        Validate.notNull(search);\n        Validate.notNull(elements);\n\n        for (int i = 0; i < elements.size(); i++) {\n            E element = elements.get(i);\n            if (element == search)\n                return i;\n        }\n        return null;\n    }\n\n",
    "label": "clean",
    "id": "99966805-d9c2-4890-ac61-9264d7c4d1ff"
  },
  {
    "project": "Jsoup",
    "bug_id": "75",
    "file": "org/jsoup/nodes/Attributes.java",
    "snippet": "    /**\n     Get the HTML representation of these attributes.\n     @return HTML\n     @throws SerializationException if the HTML representation of the attributes cannot be constructed.\n     */\n    public String html() {\n        StringBuilder accum = new StringBuilder();\n        try {\n            html(accum, (new Document(\"\")).outputSettings()); // output settings a bit funky, but this html() seldom used\n        } catch (IOException e) { // ought never happen\n            throw new SerializationException(e);\n        }\n        return accum.toString();\n    }\n\n    final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n        final int sz = size;\n        for (int i = 0; i < sz; i++) {\n            // inlined from Attribute.html()\n            final String key = keys[i];\n            final String val = vals[i];\n            accum.append(' ').append(key);\n\n            // collapse checked=null, checked=\"\", checked=checked; write out others\n            if (!(out.syntax() == Document.OutputSettings.Syntax.html\n                && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n                accum.append(\"=\\\"\");\n                Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n                accum.append('\"');\n            }\n",
    "label": "buggy",
    "id": "5cba566a-3634-4501-bed8-aee663455fc6"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "43",
    "file": "com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java",
    "snippet": "package com.fasterxml.jackson.databind.deser.impl;\n\nimport java.io.IOException;\nimport java.lang.annotation.Annotation;\n\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.*;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n\n/**\n",
    "label": "buggy",
    "id": "8103e9ed-020c-4af6-8df6-e9f916459d86"
  },
  {
    "project": "Math",
    "bug_id": "30",
    "file": "org/apache/commons/math3/stat/inference/MannWhitneyUTest.java",
    "snippet": "    /** Concatenate the samples into one array.\n     * @param x first sample\n     * @param y second sample\n     * @return concatenated array\n     */\n    private double[] concatenateSamples(final double[] x, final double[] y) {\n        final double[] z = new double[x.length + y.length];\n\n        System.arraycopy(x, 0, z, 0, x.length);\n        System.arraycopy(y, 0, z, x.length, y.length);\n\n        return z;\n    }\n\n    /**\n     * Computes the <a\n     * href=\"http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U\"> Mann-Whitney\n     * U statistic</a> comparing mean for two independent samples possibly of\n     * different length.\n     * <p>\n     * This statistic can be used to perform a Mann-Whitney U test evaluating\n     * the null hypothesis that the two independent samples has equal mean.\n     * </p>\n     * <p>\n     * Let X<sub>i</sub> denote the i'th individual of the first sample and\n     * Y<sub>j</sub> the j'th individual in the second sample. Note that the\n     * samples would often have different length.\n     * </p>\n     * <p>\n     * <strong>Preconditions</strong>:\n     * <ul>\n     * <li>All observations in the two samples are independent.</li>\n     * <li>The observations are at least ordinal (continuous are also ordinal).</li>\n     * </ul>\n     * </p>\n     *\n     * @param x the first sample\n     * @param y the second sample\n     * @return Mann-Whitney U statistic (maximum of U<sup>x</sup> and U<sup>y</sup>)\n     * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.\n     * @throws NoDataException if {@code x} or {@code y} are zero-length.\n     */\n    public double mannWhitneyU(final double[] x, final double[] y)\n        throws NullArgumentException, NoDataException {\n\n        ensureDataConformance(x, y);\n\n        final double[] z = concatenateSamples(x, y);\n        final double[] ranks = naturalRanking.rank(z);\n\n        double sumRankX = 0;\n\n        /*\n         * The ranks for x is in the first x.length entries in ranks because x\n         * is in the first x.length entries in z\n         */\n        for (int i = 0; i < x.length; ++i) {\n            sumRankX += ranks[i];\n        }\n\n        /*\n         * U1 = R1 - (n1 * (n1 + 1)) / 2 where R1 is sum of ranks for sample 1,\n         * e.g. x, n1 is the number of observations in sample 1.\n         */\n        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;\n\n        /*\n         * It can be shown that U1 + U2 = n1 * n2\n         */\n        final double U2 = x.length * y.length - U1;\n\n        return FastMath.max(U1, U2);\n    }\n\n    /**\n     * @param Umin smallest Mann-Whitney U value\n     * @param n1 number of subjects in first sample\n     * @param n2 number of subjects in second sample\n     * @return two-sided asymptotic p-value\n     * @throws ConvergenceException if the p-value can not be computed\n     * due to a convergence error\n     * @throws MaxCountExceededException if the maximum number of\n     * iterations is exceeded\n     */\n    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n\n        final int n1n2prod = n1 * n2;\n\n        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n        final double EU = n1n2prod / 2.0;\n        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n\n",
    "label": "buggy",
    "id": "f9caf858-2ee0-47f1-9827-90cdfd55c660"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "40",
    "file": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "snippet": "    /**********************************************************\n     */\n\n    protected abstract static class PrimitiveOrWrapperDeserializer<T>\n        extends StdScalarDeserializer<T>\n    {\n        private static final long serialVersionUID = 1L;\n\n        protected final T _nullValue;\n        protected final boolean _primitive;\n\n        protected PrimitiveOrWrapperDeserializer(Class<T> vc, T nvl) {\n            super(vc);\n            _nullValue = nvl;\n            _primitive = vc.isPrimitive();\n        }\n\n        @Override\n        public final T getNullValue(DeserializationContext ctxt) throws JsonMappingException\n        {\n            if (_primitive && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {\n                throw ctxt.mappingException(\n                        \"Can not map JSON null into type %s (set DeserializationConfig.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)\",\n                        handledType().toString());\n            }\n            return _nullValue;\n        }\n\n        @Override\n        @Deprecated // remove in 2.7\n        public final T getNullValue() {\n            return _nullValue;\n        }\n\n            // [databind#1095]: Should not allow coercion from into null from Empty String\n            // either, if `null` not allowed\n    }\n\n    /*\n",
    "label": "buggy",
    "id": "1e607a06-ea30-41c7-a0c6-8bb9762b4ada"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "99",
    "file": "com/fasterxml/jackson/databind/type/ReferenceType.java",
    "snippet": "    /**\n     * @since 2.7\n     */\n    public static ReferenceType construct(Class<?> cls, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInts, JavaType refType)\n    {\n        return new ReferenceType(cls, bindings, superClass, superInts,\n                refType, null, null, null, false);\n    }\n\n    @Deprecated // since 2.7\n    public static ReferenceType construct(Class<?> cls, JavaType refType) {\n        return new ReferenceType(cls, TypeBindings.emptyBindings(),\n                // !!! TODO: missing supertypes\n                null, null, null, refType, null, null, false);\n    }\n\n    @Override\n    public JavaType withContentType(JavaType contentType) {\n        if (_referencedType == contentType) {\n            return this;\n        }\n        return new ReferenceType(_class, _bindings, _superClass, _superInterfaces,\n                contentType, _anchorType, _valueHandler, _typeHandler, _asStatic);\n    }\n\n    @Override\n    public ReferenceType withTypeHandler(Object h)\n    {\n        if (h == _typeHandler) {\n            return this;\n        }\n        return new ReferenceType(_class, _bindings, _superClass, _superInterfaces,\n                _referencedType, _anchorType, _valueHandler, h, _asStatic);\n    }\n\n    @Override\n    public ReferenceType withContentTypeHandler(Object h)\n    {\n        if (h == _referencedType.<Object>getTypeHandler()) {\n            return this;\n        }\n        return new ReferenceType(_class, _bindings, _superClass, _superInterfaces,\n                _referencedType.withTypeHandler(h), _anchorType,\n                _valueHandler, _typeHandler, _asStatic);\n    }\n\n    @Override\n    public ReferenceType withValueHandler(Object h) {\n        if (h == _valueHandler) {\n            return this;\n        }\n        return new ReferenceType(_class, _bindings,\n                _superClass, _superInterfaces, _referencedType, _anchorType,\n                h, _typeHandler,_asStatic);\n    }\n\n    @Override\n    public ReferenceType withContentValueHandler(Object h) {\n        if (h == _referencedType.<Object>getValueHandler()) {\n            return this;\n        }\n        JavaType refdType = _referencedType.withValueHandler(h);\n        return new ReferenceType(_class, _bindings,\n                _superClass, _superInterfaces, refdType, _anchorType,\n                _valueHandler, _typeHandler, _asStatic);\n    }\n\n    @Override\n    public ReferenceType withStaticTyping() {\n        if (_asStatic) {\n            return this;\n        }\n        return new ReferenceType(_class, _bindings, _superClass, _superInterfaces,\n                _referencedType.withStaticTyping(), _anchorType,\n                 _valueHandler, _typeHandler, true);\n    }\n\n    @Override\n    public JavaType refine(Class<?> rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces) {\n        return new ReferenceType(rawType, _bindings,\n                superClass, superInterfaces, _referencedType, _anchorType,\n                _valueHandler, _typeHandler, _asStatic);\n    }\n\n    @Override\n    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\n        sb.append('<');\n        sb.append(_referencedType.toCanonical());\n        sb.append('>');\n        return sb.toString();\n    }\n\n    /*\n    /**********************************************************\n",
    "label": "clean",
    "id": "d4836282-5df2-4982-aded-27c70de77094"
  },
  {
    "project": "Closure",
    "bug_id": "118",
    "file": "com/google/javascript/jscomp/DisambiguateProperties.java",
    "snippet": "    /**\n     * Processes a OBJECTLIT node.\n     */\n    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, GET, SET\n\n        // We should never see a mix of numbers and strings.\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n",
    "label": "buggy",
    "id": "05ddef48-e782-49d4-a70e-a733ac03f498"
  },
  {
    "project": "Math",
    "bug_id": "43",
    "file": "org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
    "snippet": "    /**\n     * Add a value to the data\n     * @param value the value to add\n     */\n    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n        if (meanImpl != mean) {\n            meanImpl.increment(value);\n        }\n        if (varianceImpl != variance) {\n            varianceImpl.increment(value);\n        }\n",
    "label": "clean",
    "id": "e6fd21f9-da3c-4146-95d5-a6d653af5e87"
  },
  {
    "project": "Cli",
    "bug_id": "9",
    "file": "org/apache/commons/cli/Parser.java",
    "snippet": "    /** list of required options strings */\n    private List requiredOptions;\n\n    protected void setOptions(final Options options) {\n        this.options = options;\n        this.requiredOptions = options.getRequiredOptions();\n    }\n\n    protected Options getOptions() {\n        return options;\n    }\n\n    protected List getRequiredOptions() {\n        return requiredOptions;\n    }\n\n\n    /**\n     * <p>Subclasses must implement this method to reduce\n     * the <code>arguments</code> that have been passed to the parse \n     * method.</p>\n     *\n     * @param opts The Options to parse the arguments by.\n     * @param arguments The arguments that have to be flattened.\n     * @param stopAtNonOption specifies whether to stop \n     * flattening when a non option has been encountered\n     * @return a String array of the flattened arguments\n     */\n    protected abstract String[] flatten(Options opts, String[] arguments, \n                                        boolean stopAtNonOption);\n\n    /**\n     * <p>Parses the specified <code>arguments</code> \n     * based on the specifed {@link Options}.</p>\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments)\n                      throws ParseException\n    {\n        return parse(options, arguments, null, false);\n    }\n\n    /**\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             Properties properties)\n        throws ParseException\n    {\n        return parse(options, arguments, properties, false);\n    }\n\n    /**\n     * <p>Parses the specified <code>arguments</code> \n     * based on the specifed {@link Options}.</p>\n     *\n     * @param options the <code>Options</code>\n     * @param arguments the <code>arguments</code>\n     * @param stopAtNonOption specifies whether to stop \n     * interpreting the arguments when a non option has \n     * been encountered and to add them to the CommandLines\n     * args list.\n     *\n     * @return the <code>CommandLine</code>\n     * @throws ParseException if an error occurs when parsing the\n     * arguments.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             boolean stopAtNonOption)\n        throws ParseException\n    {\n        return parse(options, arguments, null, stopAtNonOption);\n    }\n\n    /**\n     * Parse the arguments according to the specified options and\n     * properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @param stopAtNonOption stop parsing the arguments when the first\n     * non option is encountered.\n     *\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, \n                             Properties properties, boolean stopAtNonOption)\n        throws ParseException\n    {\n        // clear out the data in options in case it's been used before (CLI-71)\n        for (Iterator it = options.helpOptions().iterator(); it.hasNext();) {\n            Option opt = (Option) it.next();\n            opt.clearValues();\n        }\n\n        // initialise members\n        setOptions(options);\n\n        cmd = new CommandLine();\n\n        boolean eatTheRest = false;\n\n        if (arguments == null)\n        {\n            arguments = new String[0];\n        }\n\n        List tokenList = Arrays.asList(flatten(getOptions(), \n                                               arguments, \n                                               stopAtNonOption));\n\n        ListIterator iterator = tokenList.listIterator();\n\n        // process each flattened token\n        while (iterator.hasNext())\n        {\n            String t = (String) iterator.next();\n\n            // the value is the double-dash\n            if (\"--\".equals(t))\n            {\n                eatTheRest = true;\n            }\n\n            // the value is a single dash\n            else if (\"-\".equals(t))\n            {\n                if (stopAtNonOption)\n                {\n                    eatTheRest = true;\n                }\n                else\n                {\n                    cmd.addArg(t);\n                }\n            }\n\n            // the value is an option\n            else if (t.startsWith(\"-\"))\n            {\n                if (stopAtNonOption && !getOptions().hasOption(t))\n                {\n                    eatTheRest = true;\n                    cmd.addArg(t);\n                }\n                else\n                {\n                    processOption(t, iterator);\n                }\n            }\n\n            // the value is an argument\n            else\n            {\n                cmd.addArg(t);\n\n                if (stopAtNonOption)\n                {\n                    eatTheRest = true;\n                }\n            }\n\n            // eat the remaining tokens\n            if (eatTheRest)\n            {\n                while (iterator.hasNext())\n                {\n                    String str = (String) iterator.next();\n\n                    // ensure only one double-dash is added\n                    if (!\"--\".equals(str))\n                    {\n                        cmd.addArg(str);\n                    }\n                }\n            }\n        }\n\n        processProperties(properties);\n        checkRequiredOptions();\n\n        return cmd;\n    }\n\n    /**\n     * <p>Sets the values of Options using the values in \n     * <code>properties</code>.</p>\n     *\n     * @param properties The value properties to be processed.\n     */\n    protected void processProperties(Properties properties)\n    {\n        if (properties == null)\n        {\n            return;\n        }\n\n        for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n        {\n            String option = e.nextElement().toString();\n\n            if (!cmd.hasOption(option))\n            {\n                Option opt = getOptions().getOption(option);\n\n                // get the value from the properties instance\n                String value = properties.getProperty(option);\n\n                if (opt.hasArg())\n                {\n                    if ((opt.getValues() == null)\n                        || (opt.getValues().length == 0))\n                    {\n                        try\n                        {\n                            opt.addValueForProcessing(value);\n                        }\n                        catch (RuntimeException exp)\n                        {\n                            // if we cannot add the value don't worry about it\n                        }\n                    }\n                }\n                else if (!(\"yes\".equalsIgnoreCase(value) \n                           || \"true\".equalsIgnoreCase(value)\n                           || \"1\".equalsIgnoreCase(value)))\n                {\n                    // if the value is not yes, true or 1 then don't add the\n                    // option to the CommandLine\n                    break;\n                }\n\n                cmd.addOption(opt);\n            }\n        }\n    }\n\n    /**\n     * <p>Throws a {@link MissingOptionException} if all of the\n     * required options are no present.</p>\n     *\n     * @throws MissingOptionException if any of the required Options\n     * are not present.\n     */\n    protected void checkRequiredOptions()\n        throws MissingOptionException\n    {\n        // if there are required options that have not been\n        // processsed\n        if (getRequiredOptions().size() > 0)\n        {\n            Iterator iter = getRequiredOptions().iterator();\n            StringBuffer buff = new StringBuffer(\"Missing required option\");\n            buff.append(getRequiredOptions().size() == 1 ? \"\" : \"s\");\n            buff.append(\": \");\n\n\n            // loop through the required options\n            while (iter.hasNext())\n            {\n                buff.append(iter.next());\n                buff.append(\", \");\n            }\n\n            throw new MissingOptionException(buff.substring(0, buff.length() - 2));\n        }\n    }\n",
    "label": "clean",
    "id": "f33d806a-10f1-4257-bba6-6a4e5f4d8a8b"
  },
  {
    "project": "Codec",
    "bug_id": "9",
    "file": "org/apache/commons/codec/binary/Base64.java",
    "snippet": "    /**\n     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     * \n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n     * @param urlSafe\n     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.\n     * @param maxResultSize\n     *            The maximum result size to accept.\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than maxResultSize\n     * @since 1.4\n     */\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n        if (binaryData == null || binaryData.length == 0) {\n            return binaryData;\n        }\n\n        long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, CHUNK_SEPARATOR);\n        if (len > maxResultSize) {\n            throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);\n",
    "label": "clean",
    "id": "76ca060f-d001-450c-b8f7-e75fce4afa94"
  },
  {
    "project": "Closure",
    "bug_id": "24",
    "file": "com/google/javascript/jscomp/ScopedAliases.java",
    "snippet": "  /** Name used to denote an scoped function block used for aliasing. */\n  static final String SCOPING_METHOD_NAME = \"goog.scope\";\n\n  private final AbstractCompiler compiler;\n  private final PreprocessorSymbolTable preprocessorSymbolTable;\n  private final AliasTransformationHandler transformationHandler;\n\n  // Errors\n  static final DiagnosticType GOOG_SCOPE_USED_IMPROPERLY = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USED_IMPROPERLY\",\n      \"The call to goog.scope must be alone in a single statement.\");\n\n  static final DiagnosticType GOOG_SCOPE_HAS_BAD_PARAMETERS =\n      DiagnosticType.error(\n          \"JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS\",\n          \"The call to goog.scope must take only a single parameter.  It must\" +\n              \" be an anonymous function that itself takes no parameters.\");\n\n  static final DiagnosticType GOOG_SCOPE_REFERENCES_THIS = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_REFERENCES_THIS\",\n      \"The body of a goog.scope function cannot reference 'this'.\");\n\n  static final DiagnosticType GOOG_SCOPE_USES_RETURN = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_RETURN\",\n      \"The body of a goog.scope function cannot use 'return'.\");\n\n  static final DiagnosticType GOOG_SCOPE_USES_THROW = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_THROW\",\n      \"The body of a goog.scope function cannot use 'throw'.\");\n\n  static final DiagnosticType GOOG_SCOPE_ALIAS_REDEFINED = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_ALIAS_REDEFINED\",\n      \"The alias {0} is assigned a value more than once.\");\n\n  static final DiagnosticType GOOG_SCOPE_NON_ALIAS_LOCAL = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_NON_ALIAS_LOCAL\",\n      \"The local variable {0} is in a goog.scope and is not an alias.\");\n\n  ScopedAliases(AbstractCompiler compiler,\n      @Nullable PreprocessorSymbolTable preprocessorSymbolTable,\n      AliasTransformationHandler transformationHandler) {\n    this.compiler = compiler;\n    this.preprocessorSymbolTable = preprocessorSymbolTable;\n    this.transformationHandler = transformationHandler;\n  }\n\n  @Override\n  public void process(Node externs, Node root) {\n    hotSwapScript(root, null);\n  }\n\n  @Override\n  public void hotSwapScript(Node root, Node originalRoot) {\n    Traversal traversal = new Traversal();\n    NodeTraversal.traverse(compiler, root, traversal);\n\n    if (!traversal.hasErrors()) {\n\n      // Apply the aliases.\n      for (AliasUsage aliasUsage : traversal.getAliasUsages()) {\n        aliasUsage.applyAlias();\n      }\n\n      // Remove the alias definitions.\n      for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder()) {\n        if (aliasDefinition.getParent().isVar() &&\n            aliasDefinition.getParent().hasOneChild()) {\n          aliasDefinition.getParent().detachFromParent();\n        } else {\n          aliasDefinition.detachFromParent();\n        }\n      }\n\n      // Collapse the scopes.\n      for (Node scopeCall : traversal.getScopeCalls()) {\n        Node expressionWithScopeCall = scopeCall.getParent();\n        Node scopeClosureBlock = scopeCall.getLastChild().getLastChild();\n        scopeClosureBlock.detachFromParent();\n        expressionWithScopeCall.getParent().replaceChild(\n            expressionWithScopeCall,\n            scopeClosureBlock);\n        NodeUtil.tryMergeBlock(scopeClosureBlock);\n      }\n\n      if (traversal.getAliasUsages().size() > 0 ||\n          traversal.getAliasDefinitionsInOrder().size() > 0 ||\n          traversal.getScopeCalls().size() > 0) {\n        compiler.reportCodeChange();\n      }\n    }\n  }\n\n  private interface AliasUsage {\n    public void applyAlias();\n  }\n\n  private class AliasedNode implements AliasUsage {\n    private final Node aliasReference;\n\n    private final Node aliasDefinition;\n\n    AliasedNode(Node aliasReference, Node aliasDefinition) {\n      this.aliasReference = aliasReference;\n      this.aliasDefinition = aliasDefinition;\n    }\n\n    @Override\n    public void applyAlias() {\n      aliasReference.getParent().replaceChild(\n          aliasReference, aliasDefinition.cloneTree());\n    }\n  }\n\n  private class AliasedTypeNode implements AliasUsage {\n    private final Node aliasReference;\n\n    private final String correctedType;\n\n    AliasedTypeNode(Node aliasReference, String correctedType) {\n      this.aliasReference = aliasReference;\n      this.correctedType = correctedType;\n    }\n\n    @Override\n    public void applyAlias() {\n      aliasReference.setString(correctedType);\n    }\n  }\n\n\n  private class Traversal implements NodeTraversal.ScopedCallback {\n    // The job of this class is to collect these three data sets.\n\n    // The order of this list determines the order that aliases are applied.\n    private final List<Node> aliasDefinitionsInOrder = Lists.newArrayList();\n\n    private final List<Node> scopeCalls = Lists.newArrayList();\n\n    private final List<AliasUsage> aliasUsages = Lists.newArrayList();\n\n    // This map is temporary and cleared for each scope.\n    private final Map<String, Var> aliases = Maps.newHashMap();\n\n    private boolean hasErrors = false;\n\n    private AliasTransformation transformation = null;\n\n    Collection<Node> getAliasDefinitionsInOrder() {\n      return aliasDefinitionsInOrder;\n    }\n\n    private List<AliasUsage> getAliasUsages() {\n      return aliasUsages;\n    }\n\n    List<Node> getScopeCalls() {\n      return scopeCalls;\n    }\n\n    boolean hasErrors() {\n      return hasErrors;\n    }\n\n    private boolean isCallToScopeMethod(Node n) {\n      return n.isCall() &&\n          SCOPING_METHOD_NAME.equals(n.getFirstChild().getQualifiedName());\n    }\n\n    @Override\n    public void enterScope(NodeTraversal t) {\n      Node n = t.getCurrentNode().getParent();\n      if (n != null && isCallToScopeMethod(n)) {\n        transformation = transformationHandler.logAliasTransformation(\n            n.getSourceFileName(), getSourceRegion(n));\n        findAliases(t);\n      }\n    }\n\n    @Override\n    public void exitScope(NodeTraversal t) {\n      if (t.getScopeDepth() == 2) {\n        aliases.clear();\n        transformation = null;\n      }\n    }\n\n    @Override\n    public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      if (n.isFunction() && t.inGlobalScope()) {\n        // Do not traverse in to functions except for goog.scope functions.\n        if (parent == null || !isCallToScopeMethod(parent)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    private SourcePosition<AliasTransformation> getSourceRegion(Node n) {\n      Node testNode = n;\n      Node next = null;\n      for (; next != null || testNode.isScript();) {\n        next = testNode.getNext();\n        testNode = testNode.getParent();\n      }\n\n      int endLine = next == null ? Integer.MAX_VALUE : next.getLineno();\n      int endChar = next == null ? Integer.MAX_VALUE : next.getCharno();\n      SourcePosition<AliasTransformation> pos =\n          new SourcePosition<AliasTransformation>() {};\n      pos.setPositionInformation(\n          n.getLineno(), n.getCharno(), endLine, endChar);\n      return pos;\n    }\n\n    private void report(NodeTraversal t, Node n, DiagnosticType error,\n        String... arguments) {\n      compiler.report(t.makeError(n, error, arguments));\n      hasErrors = true;\n    }\n\n    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        int type = n.getType();\n        Node parent = n.getParent();\n        if (parent.isVar()) {\n          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n          String name = n.getString();\n          Var aliasVar = scope.getVar(name);\n          aliases.put(name, aliasVar);\n\n",
    "label": "buggy",
    "id": "4ac9eb5a-b36e-47a9-be9d-4043647115db"
  },
  {
    "project": "Lang",
    "bug_id": "24",
    "file": "org/apache/commons/lang3/math/NumberUtils.java",
    "snippet": "    /**\n     * <p>Checks whether the String a valid Java number.</p>\n     *\n     * <p>Valid numbers include hexadecimal marked with the <code>0x</code>\n     * qualifier, scientific notation and numbers marked with a type\n     * qualifier (e.g. 123L).</p>\n     *\n     * <p><code>Null</code> and empty String will return\n     * <code>false</code>.</p>\n     *\n     * @param str  the <code>String</code> to check\n     * @return <code>true</code> if the string is a correctly formatted number\n     */\n    public static boolean isNumber(String str) {\n        if (StringUtils.isEmpty(str)) {\n            return false;\n        }\n        char[] chars = str.toCharArray();\n        int sz = chars.length;\n        boolean hasExp = false;\n        boolean hasDecPoint = false;\n        boolean allowSigns = false;\n        boolean foundDigit = false;\n        // deal with any possible sign up front\n        int start = (chars[0] == '-') ? 1 : 0;\n        if (sz > start + 1) {\n            if (chars[start] == '0' && chars[start + 1] == 'x') {\n                int i = start + 2;\n                if (i == sz) {\n                    return false; // str == \"0x\"\n                }\n                // checking hex (it can't be anything else)\n                for (; i < chars.length; i++) {\n                    if ((chars[i] < '0' || chars[i] > '9')\n                        && (chars[i] < 'a' || chars[i] > 'f')\n                        && (chars[i] < 'A' || chars[i] > 'F')) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        sz--; // don't want to loop to the last char, check it afterwords\n              // for type qualifiers\n        int i = start;\n        // loop to the next to last char or to the last char if we need another digit to\n        // make a valid number (e.g. chars[0..5] = \"1234E\")\n        while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n            if (chars[i] >= '0' && chars[i] <= '9') {\n                foundDigit = true;\n                allowSigns = false;\n\n            } else if (chars[i] == '.') {\n                if (hasDecPoint || hasExp) {\n                    // two decimal points or dec in exponent   \n                    return false;\n                }\n                hasDecPoint = true;\n            } else if (chars[i] == 'e' || chars[i] == 'E') {\n                // we've already taken care of hex.\n                if (hasExp) {\n                    // two E's\n                    return false;\n                }\n                if (!foundDigit) {\n                    return false;\n                }\n                hasExp = true;\n                allowSigns = true;\n            } else if (chars[i] == '+' || chars[i] == '-') {\n                if (!allowSigns) {\n                    return false;\n                }\n                allowSigns = false;\n                foundDigit = false; // we need a digit after the E\n            } else {\n                return false;\n            }\n            i++;\n        }\n        if (i < chars.length) {\n            if (chars[i] >= '0' && chars[i] <= '9') {\n                // no type qualifier, OK\n                return true;\n            }\n            if (chars[i] == 'e' || chars[i] == 'E') {\n                // can't have an E at the last byte\n                return false;\n            }\n            if (chars[i] == '.') {\n                if (hasDecPoint || hasExp) {\n                    // two decimal points or dec in exponent\n                    return false;\n                }\n                // single trailing decimal point after non-exponent is ok\n                return foundDigit;\n            }\n            if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F')) {\n                return foundDigit;\n            }\n            if (chars[i] == 'l'\n                || chars[i] == 'L') {\n                // not allowing L with an exponent or decimal point\n                return foundDigit && !hasExp && !hasDecPoint;\n            }\n            // last character is illegal\n            return false;\n        }\n        // allowSigns is true iff the val ends in 'E'\n",
    "label": "clean",
    "id": "e0051881-0ad9-4ab0-9b74-0a4c970b47e0"
  },
  {
    "project": "Cli",
    "bug_id": "2",
    "file": "org/apache/commons/cli/PosixParser.java",
    "snippet": "/**\n * Copyright 1999-2001,2004 The Apache Software Foundation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.cli;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\n\n/**\n * The class PosixParser provides an implementation of the \n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\npublic class PosixParser extends Parser {\n\n    /** holder for flattened tokens */\n    private ArrayList tokens = new ArrayList();\n\n    /** specifies if bursting should continue */\n    private boolean eatTheRest;\n\n    /** holder for the current option */\n    private Option currentOption;\n\n    /** the command line Options */\n    private Options options;\n\n    /**\n     * <p>Resets the members to their original state i.e. remove\n     * all of <code>tokens</code> entries, set <code>eatTheRest</code>\n     * to false and set <code>currentOption</code> to null.</p>\n     */\n    private void init()\n    {\n        eatTheRest = false;\n        tokens.clear();\n        currentOption = null;\n    }\n\n    /**\n     * <p>An implementation of {@link Parser}'s abstract\n     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n     *\n     * <p>The following are the rules used by this flatten method.\n     * <ol>\n     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n     *  burst anymore of <code>arguments</code> entries, just add each\n     *  successive entry without further processing.  Otherwise, ignore\n     *  <code>stopAtNonOption</code>.</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is two characters\n     *  in length and the first character is \"<b>-</b>\" then check if this\n     *  is a valid {@link Option} id.  If it is a valid id, then add the\n     *  entry to the list of processed tokens and set the current {@link Option}\n     *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n     *  is true, then the remaining entries are copied to the list of \n     *  processed tokens.  Otherwise, the current entry is ignored.</li>\n     *  <li>if the current <code>arguments</code> entry is more than two\n     *  characters in length and the first character is \"<b>-</b>\" then\n     *  we need to burst the entry to determine its constituents.  For more\n     *  information on the bursting algorithm see \n     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n     *  <li>if the current <code>arguments</code> entry is not handled \n     *  by any of the previous rules, then the entry is added to the list\n     *  of processed tokens.</li>\n     * </ol>\n     * </p>\n     *\n     * @param options The command line {@link Options}\n     * @param arguments The command line arguments to be parsed\n     * @param stopAtNonOption Specifies whether to stop flattening\n     * when an non option is found.\n     * @return The flattened <code>arguments</code> String array.\n     */\n    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n        this.options = options;\n\n        // an iterator for the command line tokens\n        Iterator iter = Arrays.asList(arguments).iterator();\n        String token;\n\n        // process each command line token\n        while (iter.hasNext())\n        {\n            // get the next command line token\n            token = (String) iter.next();\n\n            // handle SPECIAL TOKEN\n            if (token.startsWith(\"--\"))\n            {\n                if (token.indexOf('=') != -1)\n                {\n                    tokens.add(token.substring(0, token.indexOf('=')));\n                    tokens.add(token.substring(token.indexOf('=') + 1, \n                                               token.length()));\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n\n            // single hyphen\n            else if (\"-\".equals(token))\n            {\n                processSingleHyphen(token);\n            }\n            else if (token.startsWith(\"-\"))\n            {\n                int tokenLength = token.length();\n\n                if (tokenLength == 2)\n                {\n                    processOptionToken(token, stopAtNonOption);\n                }\n                else if (options.hasOption(token)) {\n                \ttokens.add(token);\n                }\n                // requires bursting\n                else\n                {\n                    burstToken(token, stopAtNonOption);\n                }\n            }\n            else\n            {\n                if (stopAtNonOption)\n                {\n                    process(token);\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n\n            gobble(iter);\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }\n\n    /**\n     * <p>Adds the remaining tokens to the processed tokens list.</p>\n     *\n     * @param iter An iterator over the remaining tokens\n     */\n    private void gobble(Iterator iter)\n    {\n        if (eatTheRest)\n        {\n            while (iter.hasNext())\n            {\n                tokens.add(iter.next());\n            }\n        }\n    }\n\n    /**\n     * <p>If there is a current option and it can have an argument\n     * value then add the token to the processed tokens list and \n     * set the current option to null.</p>\n     * <p>If there is a current option and it can have argument\n     * values then add the token to the processed tokens list.</p>\n     * <p>If there is not a current option add the special token\n     * \"<b>--</b>\" and the current <code>value</code> to the processed\n     * tokens list.  The add all the remaining <code>argument</code>\n     * values to the processed tokens list.</p>\n     *\n     * @param value The current token\n     */\n    private void process(String value)\n    {\n        if ((currentOption != null) && currentOption.hasArg())\n        {\n            if (currentOption.hasArg())\n            {\n                tokens.add(value);\n                currentOption = null;\n            }\n            else if (currentOption.hasArgs())\n            {\n                tokens.add(value);\n            }\n        }\n        else\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n            tokens.add(value);\n        }\n    }\n\n    /**\n     * <p>If it is a hyphen then add the hyphen directly to\n     * the processed tokens list.</p>\n     *\n     * @param hyphen The hyphen token\n     */\n    private void processSingleHyphen(String hyphen)\n    {\n        tokens.add(hyphen);\n    }\n\n    /**\n     * <p>If an {@link Option} exists for <code>token</code> then\n     * set the current option and add the token to the processed \n     * list.</p>\n     * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>\n     * is set then ignore the current token and add the remaining tokens\n     * to the processed tokens list directly.</p>\n     *\n     * @param token The current option token\n     * @param stopAtNonOption Specifies whether flattening should halt\n     * at the first non option.\n     */\n    private void processOptionToken(String token, boolean stopAtNonOption)\n    {\n        if (this.options.hasOption(token))\n        {\n            currentOption = this.options.getOption(token);\n            tokens.add(token);\n        }\n        else if (stopAtNonOption)\n        {\n            eatTheRest = true;\n        }\n    }\n\n    /**\n     * <p>Breaks <code>token</code> into its constituent parts\n     * using the following algorithm.\n     * <ul>\n     *  <li>ignore the first character (\"<b>-</b>\")</li>\n     *  <li>foreach remaining character check if an {@link Option}\n     *  exists with that id.</li>\n     *  <li>if an {@link Option} does exist then add that character\n     *  prepended with \"<b>-</b>\" to the list of processed tokens.</li>\n     *  <li>if the {@link Option} can have an argument value and there \n     *  are remaining characters in the token then add the remaining \n     *  characters as a token to the list of processed tokens.</li>\n     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b> \n     *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token\n     *  \"<b>--</b>\" followed by the remaining characters and also \n     *  the remaining tokens directly to the processed tokens list.</li>\n     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n     *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that\n     *  character prepended with \"<b>-</b>\".</li>\n     * </ul>\n     * </p>\n     *\n     * @param token The current token to be <b>burst</b>\n     * @param stopAtNonOption Specifies whether to stop processing\n     * at the first non-Option encountered.\n     */\n    protected void burstToken(String token, boolean stopAtNonOption)\n    {\n        int tokenLength = token.length();\n\n        for (int i = 1; i < tokenLength; i++)\n        {\n            String ch = String.valueOf(token.charAt(i));\n            boolean hasOption = options.hasOption(ch);\n\n            if (hasOption)\n            {\n                tokens.add(\"-\" + ch);\n                currentOption = options.getOption(ch);\n\n                if (currentOption.hasArg() && (token.length() != (i + 1)))\n                {\n                    tokens.add(token.substring(i + 1));\n\n                    break;\n                }\n            }\n            else if (stopAtNonOption)\n            {\n                process(token.substring(i));\n            }\n            else\n            {\n                tokens.add(\"-\" + ch);\n            }\n        }\n    }\n}\n",
    "label": "buggy",
    "id": "339884fa-c0a6-4dad-9c99-4102c8ed49fb"
  },
  {
    "project": "Chart",
    "bug_id": "25",
    "file": "org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
    "snippet": "    /**\n     * Sets the stroke used for the error indicators (if <code>null</code>, \n     * the item outline stroke is used instead)\n     * \n     * @param stroke  the stroke (<code>null</code> permitted).\n     * \n     * @see #getErrorIndicatorStroke()\n     *\n     * @since 1.2.0\n     */\n    public void setErrorIndicatorStroke(Stroke stroke) {\n        this.errorIndicatorStroke = stroke;\n        notifyListeners(new RendererChangeEvent(this));\n    }\n    \n    /**\n     * Draws the bar with its standard deviation line range for a single \n     * (series, category) data item.\n     *\n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param data  the data.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param pass  the pass index.\n     */\n    public void drawItem(Graphics2D g2,\n                         CategoryItemRendererState state,\n                         Rectangle2D dataArea,\n                         CategoryPlot plot,\n                         CategoryAxis domainAxis,\n                         ValueAxis rangeAxis,\n                         CategoryDataset data,\n                         int row,\n                         int column,\n                         int pass) {\n\n        // defensive check\n        if (!(data instanceof StatisticalCategoryDataset)) {\n            throw new IllegalArgumentException(\n                \"Requires StatisticalCategoryDataset.\");\n        }\n        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;\n\n        PlotOrientation orientation = plot.getOrientation();\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, \n                    rangeAxis, statData, row, column);\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, \n                    statData, row, column);\n        }\n    }\n                \n    /**\n     * Draws an item for a plot with a horizontal orientation.\n     * \n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the data.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     */\n    protected void drawHorizontalItem(Graphics2D g2,\n                                      CategoryItemRendererState state,\n                                      Rectangle2D dataArea,\n                                      CategoryPlot plot,\n                                      CategoryAxis domainAxis,\n                                      ValueAxis rangeAxis,\n                                      StatisticalCategoryDataset dataset,\n                                      int row,\n                                      int column) {\n                                     \n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        \n        // BAR Y\n        double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                dataArea, xAxisLocation);\n\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getHeight() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n        }\n        else {\n            rectY = rectY + row * state.getBarWidth();\n        }\n\n        // BAR X\n        Number meanValue = dataset.getMeanValue(row, column);\n        if (meanValue == null) {\n            return;\n        }\n\n        double value = meanValue.doubleValue();\n        double base = 0.0;\n",
    "label": "clean",
    "id": "5d0c2a0b-70ed-4a89-9779-be3232b54588"
  },
  {
    "project": "Collections",
    "bug_id": "17",
    "file": "org/apache/commons/collections/functors/EqualPredicate.java",
    "snippet": "    /**\n     * Constructor that performs no validation.\n     * Use <code>getInstance</code> if you want that.\n     * \n     * @param object  the object to compare to\n     */\n    public EqualPredicate(T object) {\n        // do not use the DefaultEquator to keep backwards compatibility\n        // the DefaultEquator returns also true if the two object references are equal\n        this(object, new DefaultEquator<T>());\n    }\n\n    /**\n     * Constructor that performs no validation.\n     * Use <code>getInstance</code> if you want that.\n",
    "label": "buggy",
    "id": "e233dec6-deb7-45da-bb38-5916598b5883"
  },
  {
    "project": "Compress",
    "bug_id": "45",
    "file": "org/apache/commons/compress/archivers/tar/TarUtils.java",
    "snippet": "    /**\n     * Write an octal long integer into a buffer.\n     * \n     * Uses {@link #formatUnsignedOctalString} to format\n     * the value as an octal string with leading zeros.\n     * The converted number is followed by a space.\n     * \n     * @param value The value to write as octal\n     * @param buf The destinationbuffer.\n     * @param offset The starting offset into the buffer.\n     * @param length The length of the buffer\n     * @return The updated offset\n     * @throws IllegalArgumentException if the value (and trailer) will not fit in the buffer\n     */\n    public static int formatLongOctalBytes(final long value, final byte[] buf, final int offset, final int length) {\n\n        final int idx=length-1; // For space\n\n        formatUnsignedOctalString(value, buf, offset, idx);\n        buf[offset + idx] = (byte) ' '; // Trailing space\n\n        return offset + length;\n    }\n\n    /**\n     * Write an long integer into a buffer as an octal string if this\n     * will fit, or as a binary number otherwise.\n     * \n     * Uses {@link #formatUnsignedOctalString} to format\n     * the value as an octal string with leading zeros.\n     * The converted number is followed by a space.\n     * \n     * @param value The value to write into the buffer.\n     * @param buf The destination buffer.\n     * @param offset The starting offset into the buffer.\n     * @param length The length of the buffer.\n     * @return The updated offset.\n     * @throws IllegalArgumentException if the value (and trailer)\n     * will not fit in the buffer.\n     * @since 1.4\n     */\n    public static int formatLongOctalOrBinaryBytes(\n        final long value, final byte[] buf, final int offset, final int length) {\n\n        // Check whether we are dealing with UID/GID or SIZE field\n        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n        final boolean negative = value < 0;\n        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars\n            return formatLongOctalBytes(value, buf, offset, length);\n        }\n\n        if (length < 9) {\n            formatLongBinary(value, buf, offset, length, negative);\n        }\n        formatBigIntegerBinary(value, buf, offset, length, negative);\n\n        buf[offset] = (byte) (negative ? 0xff : 0x80);\n        return offset + length;\n",
    "label": "buggy",
    "id": "12008955-6837-45df-86dc-14258417e9e0"
  },
  {
    "project": "Closure",
    "bug_id": "152",
    "file": "com/google/javascript/rhino/jstype/FunctionType.java",
    "snippet": "  /**\n   * Gets the template type name.\n   */\n  public String getTemplateTypeName() {\n    return templateTypeName;\n  }\n\n  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n",
    "label": "buggy",
    "id": "20930d73-2b45-4a67-b369-4d67ebb7c57b"
  },
  {
    "project": "Jsoup",
    "bug_id": "41",
    "file": "org/jsoup/nodes/Element.java",
    "snippet": "    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html) {\n        empty();\n        append(html);\n        return this;\n    }\n\n    public String toString() {\n        return outerHtml();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        if (!super.equals(o)) return false;\n\n        Element element = (Element) o;\n\n        return this == o;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n",
    "label": "buggy",
    "id": "7cbfe49e-115e-4bb1-9eec-17627d064ea4"
  },
  {
    "project": "Jsoup",
    "bug_id": "79",
    "file": "org/jsoup/nodes/LeafNode.java",
    "snippet": "package org.jsoup.nodes;\n\nimport org.jsoup.helper.Validate;\n\nimport java.util.Collections;\nimport java.util.List;\n\nabstract class LeafNode extends Node {\n    private static final List<Node> EmptyNodes = Collections.emptyList();\n\n",
    "label": "clean",
    "id": "0a1ad6b3-0c1b-46b9-82e8-b5cec8fab6ac"
  },
  {
    "project": "Jsoup",
    "bug_id": "8",
    "file": "org/jsoup/nodes/Node.java",
    "snippet": "    /**\n     Get the outer HTML of this node.\n     @return HTML\n     */\n    public String outerHtml() {\n        StringBuilder accum = new StringBuilder(32*1024);\n        outerHtml(accum);\n        return accum.toString();\n    }\n\n    protected void outerHtml(StringBuilder accum) {\n        new NodeTraversor(new OuterHtmlVisitor(accum, getOutputSettings())).traverse(this);\n    }\n\n    // if this node has no document (or parent), retrieve the default output settings\n    private Document.OutputSettings getOutputSettings() {\n        return ownerDocument() != null ? ownerDocument().outputSettings() : (new Document(\"\")).outputSettings();\n",
    "label": "clean",
    "id": "5d832968-97ea-45d2-91d6-bdadc03b9263"
  },
  {
    "project": "Jsoup",
    "bug_id": "8",
    "file": "org/jsoup/nodes/Node.java",
    "snippet": "    /**\n     Get the outer HTML of this node.\n     @return HTML\n     */\n    public String outerHtml() {\n        StringBuilder accum = new StringBuilder(32*1024);\n        outerHtml(accum);\n        return accum.toString();\n    }\n\n    protected void outerHtml(StringBuilder accum) {\n        new NodeTraversor(new OuterHtmlVisitor(accum, ownerDocument().outputSettings())).traverse(this);\n    }\n\n    // if this node has no document (or parent), retrieve the default output settings\n\n    /**\n",
    "label": "buggy",
    "id": "9d822c1c-6de4-4dfe-8043-3d235e1eb217"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "77",
    "file": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "snippet": "    /**\n     * Globally shareable thread-safe instance which has no additional custom deserializers\n     * registered\n     */\n    public final static BeanDeserializerFactory instance = new BeanDeserializerFactory(\n            new DeserializerFactoryConfig());\n\n    public BeanDeserializerFactory(DeserializerFactoryConfig config) {\n        super(config);\n    }\n    \n    /**\n     * Method used by module registration functionality, to construct a new bean\n     * deserializer factory\n     * with different configuration settings.\n     */\n    @Override\n    public DeserializerFactory withConfig(DeserializerFactoryConfig config)\n    {\n        if (_factoryConfig == config) {\n            return this;\n        }\n        /* 22-Nov-2010, tatu: Handling of subtypes is tricky if we do immutable-with-copy-ctor;\n         *    and we pretty much have to here either choose between losing subtype instance\n         *    when registering additional deserializers, or losing deserializers.\n         *    Instead, let's actually just throw an error if this method is called when subtype\n         *    has not properly overridden this method; this to indicate problem as soon as possible.\n         */\n        if (getClass() != BeanDeserializerFactory.class) {\n            throw new IllegalStateException(\"Subtype of BeanDeserializerFactory (\"+getClass().getName()\n                    +\") has not properly overridden method 'withAdditionalDeserializers': can not instantiate subtype with \"\n                    +\"additional deserializer definitions\");\n        }\n        return new BeanDeserializerFactory(config);\n    }\n    \n    /*\n    /**********************************************************\n    /* DeserializerFactory API implementation\n    /**********************************************************\n     */\n\n    /**\n     * Method that {@link DeserializerCache}s call to create a new\n     * deserializer for types other than Collections, Maps, arrays and\n     * enums.\n     */\n    @Override\n    public JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config = ctxt.getConfig();\n        // We may also have custom overrides:\n        JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n        if (custom != null) {\n            return custom;\n        }\n        /* One more thing to check: do we have an exception type\n         * (Throwable or its sub-classes)? If so, need slightly\n         * different handling.\n         */\n        if (type.isThrowable()) {\n            return buildThrowableDeserializer(ctxt, type, beanDesc);\n        }\n        /* Or, for abstract types, may have alternate means for resolution\n         * (defaulting, materialization)\n         */\n        // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n        //    not something we could materialize anything for\n        if (type.isAbstract() && !type.isPrimitive()) {\n            // Let's make it possible to materialize abstract types.\n            JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n            if (concreteType != null) {\n                /* important: introspect actual implementation (abstract class or\n                 * interface doesn't have constructors, for one)\n                 */\n                beanDesc = config.introspect(concreteType);\n                return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n            }\n        }\n\n        // Otherwise, may want to check handlers for standard types, from superclass:\n        @SuppressWarnings(\"unchecked\")\n        JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);\n        if (deser != null) {\n            return deser;\n        }\n\n        // Otherwise: could the class be a Bean class? If not, bail out\n        if (!isPotentialBeanType(type.getRawClass())) {\n            return null;\n        }\n        // For checks like [databind#1599]\n        checkIllegalTypes(ctxt, type, beanDesc);\n        // Use generic bean introspection to build deserializer\n        return buildBeanDeserializer(ctxt, type, beanDesc);\n    }\n\n    @Override\n",
    "label": "clean",
    "id": "b199521e-fe6e-4247-a748-7bf9aa832e07"
  },
  {
    "project": "JxPath",
    "bug_id": "3",
    "file": "org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java",
    "snippet": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.jxpath.ri.model.beans;\n\nimport org.apache.commons.jxpath.AbstractFactory;\nimport org.apache.commons.jxpath.JXPathAbstractFactoryException;\nimport org.apache.commons.jxpath.JXPathContext;\nimport org.apache.commons.jxpath.JXPathInvalidAccessException;\nimport org.apache.commons.jxpath.ri.QName;\nimport org.apache.commons.jxpath.ri.model.NodePointer;\n",
    "label": "clean",
    "id": "9bd1bed6-a6f3-4922-b76d-a63bf32750d6"
  },
  {
    "project": "Math",
    "bug_id": "31",
    "file": "org/apache/commons/math3/util/ContinuedFraction.java",
    "snippet": "    /**\n     * <p>\n     * Evaluates the continued fraction at the value x.\n     * </p>\n     *\n     * <p>\n     * The implementation of this method is based on the modified Lentz algorithm as described\n     * on page 18 ff. in:\n     * <ul>\n     * <li>\n     *   I. J. Thompson,  A. R. Barnett. \"Coulomb and Bessel Functions of Complex Arguments and Order.\"\n     *   <a target=\"_blank\" href=\"http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf\">\n     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>\n     * </li>\n     * </ul>\n     * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in\n     * <a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">Continued Fraction / MathWorld</a>.\n     * </p>\n     *\n     * @param x the evaluation point.\n     * @param epsilon maximum error allowed.\n     * @param maxIterations maximum number of convergents\n     * @return the value of the continued fraction evaluated at x.\n     * @throws ConvergenceException if the algorithm fails to converge.\n     */\n    public double evaluate(double x, double epsilon, int maxIterations) {\n        final double small = 1e-50;\n        double hPrev = getA(0, x);\n\n        // use the value of small as epsilon criteria for zero checks\n        if (Precision.equals(hPrev, 0.0, small)) {\n            hPrev = small;\n        }\n\n        int n = 1;\n        double dPrev = 0.0;\n        double cPrev = hPrev;\n        double hN = hPrev;\n\n        while (n < maxIterations) {\n            final double a = getA(n, x);\n",
    "label": "clean",
    "id": "d4950e9f-841b-49ee-b338-4d5787849b81"
  },
  {
    "project": "Gson",
    "bug_id": "18",
    "file": "com/google/gson/internal/$Gson$Types.java",
    "snippet": "  /**\n   * Returns true if {@code a} and {@code b} are equal.\n   */\n  public static boolean equals(Type a, Type b) {\n    if (a == b) {\n      // also handles (a == null && b == null)\n      return true;\n\n    } else if (a instanceof Class) {\n      // Class already specifies equals().\n      return a.equals(b);\n\n    } else if (a instanceof ParameterizedType) {\n      if (!(b instanceof ParameterizedType)) {\n        return false;\n      }\n\n      // TODO: save a .clone() call\n      ParameterizedType pa = (ParameterizedType) a;\n      ParameterizedType pb = (ParameterizedType) b;\n      return equal(pa.getOwnerType(), pb.getOwnerType())\n          && pa.getRawType().equals(pb.getRawType())\n          && Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments());\n\n    } else if (a instanceof GenericArrayType) {\n      if (!(b instanceof GenericArrayType)) {\n        return false;\n      }\n\n      GenericArrayType ga = (GenericArrayType) a;\n      GenericArrayType gb = (GenericArrayType) b;\n      return equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n\n    } else if (a instanceof WildcardType) {\n      if (!(b instanceof WildcardType)) {\n        return false;\n      }\n\n      WildcardType wa = (WildcardType) a;\n      WildcardType wb = (WildcardType) b;\n      return Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())\n          && Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds());\n\n    } else if (a instanceof TypeVariable) {\n      if (!(b instanceof TypeVariable)) {\n        return false;\n      }\n      TypeVariable<?> va = (TypeVariable<?>) a;\n      TypeVariable<?> vb = (TypeVariable<?>) b;\n      return va.getGenericDeclaration() == vb.getGenericDeclaration()\n          && va.getName().equals(vb.getName());\n\n    } else {\n      // This isn't a type we support. Could be a generic array type, wildcard type, etc.\n      return false;\n    }\n  }\n\n  static int hashCodeOrZero(Object o) {\n    return o != null ? o.hashCode() : 0;\n  }\n\n  public static String typeToString(Type type) {\n    return type instanceof Class ? ((Class<?>) type).getName() : type.toString();\n  }\n\n  /**\n   * Returns the generic supertype for {@code supertype}. For example, given a class {@code\n   * IntegerSet}, the result for when supertype is {@code Set.class} is {@code Set<Integer>} and the\n   * result when the supertype is {@code Collection.class} is {@code Collection<Integer>}.\n   */\n  static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {\n    if (toResolve == rawType) {\n      return context;\n    }\n\n    // we skip searching through interfaces if unknown is an interface\n    if (toResolve.isInterface()) {\n      Class<?>[] interfaces = rawType.getInterfaces();\n      for (int i = 0, length = interfaces.length; i < length; i++) {\n        if (interfaces[i] == toResolve) {\n          return rawType.getGenericInterfaces()[i];\n        } else if (toResolve.isAssignableFrom(interfaces[i])) {\n          return getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n        }\n      }\n    }\n\n    // check our supertypes\n    if (!rawType.isInterface()) {\n      while (rawType != Object.class) {\n        Class<?> rawSupertype = rawType.getSuperclass();\n        if (rawSupertype == toResolve) {\n          return rawType.getGenericSuperclass();\n        } else if (toResolve.isAssignableFrom(rawSupertype)) {\n          return getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n        }\n        rawType = rawSupertype;\n      }\n    }\n\n    // we can't resolve this further\n    return toResolve;\n  }\n\n  /**\n   * Returns the generic form of {@code supertype}. For example, if this is {@code\n   * ArrayList<String>}, this returns {@code Iterable<String>} given the input {@code\n   * Iterable.class}.\n   *\n   * @param supertype a superclass of, or interface implemented by, this.\n   */\n  static Type getSupertype(Type context, Class<?> contextRawType, Class<?> supertype) {\n    if (context instanceof WildcardType) {\n      // wildcards are useless for resolving supertypes. As the upper bound has the same raw type, use it instead\n      context = ((WildcardType)context).getUpperBounds()[0];\n    }\n    checkArgument(supertype.isAssignableFrom(contextRawType));\n    return resolve(context, contextRawType,\n",
    "label": "clean",
    "id": "77e82497-50b7-4fbb-a8a8-decfcb4a09bf"
  },
  {
    "project": "Compress",
    "bug_id": "36",
    "file": "org/apache/commons/compress/archivers/sevenz/SevenZFile.java",
    "snippet": "    /**\n     * Returns meta-data of all archive entries.\n     *\n     * <p>This method only provides meta-data, the entries can not be\n     * used to read the contents, you still need to process all\n     * entries in order using {@link #getNextEntry} for that.</p>\n     *\n     * <p>The content methods are only available for entries that have\n     * already been reached via {@link #getNextEntry}.</p>\n     *\n     * @return meta-data of all archive entries.\n     * @since 1.11\n     */\n    public Iterable<SevenZArchiveEntry> getEntries() {\n        return Arrays.asList(archive.files);\n    }\n    \n    private Archive readHeaders(final byte[] password) throws IOException {\n        final byte[] signature = new byte[6];\n        file.readFully(signature);\n        if (!Arrays.equals(signature, sevenZSignature)) {\n            throw new IOException(\"Bad 7z signature\");\n        }\n        // 7zFormat.txt has it wrong - it's first major then minor\n        final byte archiveVersionMajor = file.readByte();\n        final byte archiveVersionMinor = file.readByte();\n        if (archiveVersionMajor != 0) {\n            throw new IOException(String.format(\"Unsupported 7z version (%d,%d)\",\n                    archiveVersionMajor, archiveVersionMinor));\n        }\n\n        final long startHeaderCrc = 0xffffFFFFL & Integer.reverseBytes(file.readInt());\n        final StartHeader startHeader = readStartHeader(startHeaderCrc);\n        \n        final int nextHeaderSizeInt = (int) startHeader.nextHeaderSize;\n        if (nextHeaderSizeInt != startHeader.nextHeaderSize) {\n            throw new IOException(\"cannot handle nextHeaderSize \" + startHeader.nextHeaderSize);\n        }\n        file.seek(SIGNATURE_HEADER_SIZE + startHeader.nextHeaderOffset);\n        final byte[] nextHeader = new byte[nextHeaderSizeInt];\n        file.readFully(nextHeader);\n        final CRC32 crc = new CRC32();\n        crc.update(nextHeader);\n        if (startHeader.nextHeaderCrc != crc.getValue()) {\n            throw new IOException(\"NextHeader CRC mismatch\");\n        }\n        \n        final ByteArrayInputStream byteStream = new ByteArrayInputStream(nextHeader);\n        DataInputStream nextHeaderInputStream = new DataInputStream(\n                byteStream);\n        Archive archive = new Archive();\n        int nid = nextHeaderInputStream.readUnsignedByte();\n        if (nid == NID.kEncodedHeader) {\n            nextHeaderInputStream =\n                readEncodedHeader(nextHeaderInputStream, archive, password);\n            // Archive gets rebuilt with the new header\n            archive = new Archive();\n            nid = nextHeaderInputStream.readUnsignedByte();\n        }\n        if (nid == NID.kHeader) {\n            readHeader(nextHeaderInputStream, archive);\n            nextHeaderInputStream.close();\n        } else {\n            throw new IOException(\"Broken or unsupported archive: no Header\");\n        }\n        return archive;\n    }\n    \n    private StartHeader readStartHeader(final long startHeaderCrc) throws IOException {\n        final StartHeader startHeader = new StartHeader();\n        DataInputStream dataInputStream = null;\n        try {\n             dataInputStream = new DataInputStream(new CRC32VerifyingInputStream(\n                    new BoundedRandomAccessFileInputStream(file, 20), 20, startHeaderCrc));\n             startHeader.nextHeaderOffset = Long.reverseBytes(dataInputStream.readLong());\n             startHeader.nextHeaderSize = Long.reverseBytes(dataInputStream.readLong());\n             startHeader.nextHeaderCrc = 0xffffFFFFL & Integer.reverseBytes(dataInputStream.readInt());\n             return startHeader;\n        } finally {\n            if (dataInputStream != null) {\n                dataInputStream.close();\n            }\n        }\n    }\n    \n    private void readHeader(final DataInput header, final Archive archive) throws IOException {\n        int nid = header.readUnsignedByte();\n        \n        if (nid == NID.kArchiveProperties) {\n            readArchiveProperties(header);\n            nid = header.readUnsignedByte();\n        }\n        \n        if (nid == NID.kAdditionalStreamsInfo) {\n            throw new IOException(\"Additional streams unsupported\");\n            //nid = header.readUnsignedByte();\n        }\n        \n        if (nid == NID.kMainStreamsInfo) {\n            readStreamsInfo(header, archive);\n            nid = header.readUnsignedByte();\n        }\n        \n        if (nid == NID.kFilesInfo) {\n            readFilesInfo(header, archive);\n            nid = header.readUnsignedByte();\n        }\n        \n        if (nid != NID.kEnd) {\n            throw new IOException(\"Badly terminated header, found \" + nid);\n        }\n    }\n    \n    private void readArchiveProperties(final DataInput input) throws IOException {\n        // FIXME: the reference implementation just throws them away?\n        int nid =  input.readUnsignedByte();\n        while (nid != NID.kEnd) {\n            final long propertySize = readUint64(input);\n            final byte[] property = new byte[(int)propertySize];\n            input.readFully(property);\n            nid = input.readUnsignedByte();\n        }\n    }\n    \n    private DataInputStream readEncodedHeader(final DataInputStream header, final Archive archive,\n                                              final byte[] password) throws IOException {\n        readStreamsInfo(header, archive);\n        \n        // FIXME: merge with buildDecodingStream()/buildDecoderStack() at some stage?\n        final Folder folder = archive.folders[0];\n        final int firstPackStreamIndex = 0;\n        final long folderOffset = SIGNATURE_HEADER_SIZE + archive.packPos +\n                0;\n        \n        file.seek(folderOffset);\n        InputStream inputStreamStack = new BoundedRandomAccessFileInputStream(file,\n                archive.packSizes[firstPackStreamIndex]);\n        for (final Coder coder : folder.getOrderedCoders()) {\n            if (coder.numInStreams != 1 || coder.numOutStreams != 1) {\n                throw new IOException(\"Multi input/output stream coders are not yet supported\");\n            }\n            inputStreamStack = Coders.addDecoder(fileName, inputStreamStack,\n                    folder.getUnpackSizeForCoder(coder), coder, password);\n        }\n        if (folder.hasCrc) {\n            inputStreamStack = new CRC32VerifyingInputStream(inputStreamStack,\n                    folder.getUnpackSize(), folder.crc);\n        }\n        final byte[] nextHeader = new byte[(int)folder.getUnpackSize()];\n        final DataInputStream nextHeaderInputStream = new DataInputStream(inputStreamStack);\n        try {\n            nextHeaderInputStream.readFully(nextHeader);\n        } finally {\n            nextHeaderInputStream.close();\n        }\n        return new DataInputStream(new ByteArrayInputStream(nextHeader));\n    }\n    \n    private void readStreamsInfo(final DataInput header, final Archive archive) throws IOException {\n        int nid = header.readUnsignedByte();\n        \n        if (nid == NID.kPackInfo) {\n            readPackInfo(header, archive);\n            nid = header.readUnsignedByte();\n        }\n        \n        if (nid == NID.kUnpackInfo) {\n            readUnpackInfo(header, archive);\n            nid = header.readUnsignedByte();\n        } else {\n            // archive without unpack/coders info\n            archive.folders = new Folder[0];\n        }\n        \n        if (nid == NID.kSubStreamsInfo) {\n            readSubStreamsInfo(header, archive);\n            nid = header.readUnsignedByte();\n        }\n        \n        if (nid != NID.kEnd) {\n            throw new IOException(\"Badly terminated StreamsInfo\");\n        }\n    }\n    \n    private void readPackInfo(final DataInput header, final Archive archive) throws IOException {\n        archive.packPos = readUint64(header);\n        final long numPackStreams = readUint64(header);\n        int nid = header.readUnsignedByte();\n        if (nid == NID.kSize) {\n            archive.packSizes = new long[(int)numPackStreams];\n            for (int i = 0; i < archive.packSizes.length; i++) {\n                archive.packSizes[i] = readUint64(header);\n            }\n            nid = header.readUnsignedByte();\n        }\n        \n        if (nid == NID.kCRC) {\n            archive.packCrcsDefined = readAllOrBits(header, (int)numPackStreams);\n            archive.packCrcs = new long[(int)numPackStreams];\n            for (int i = 0; i < (int)numPackStreams; i++) {\n                if (archive.packCrcsDefined.get(i)) {\n                    archive.packCrcs[i] = 0xffffFFFFL & Integer.reverseBytes(header.readInt());\n                }\n            }\n            \n            nid = header.readUnsignedByte();\n        }\n        \n        if (nid != NID.kEnd) {\n            throw new IOException(\"Badly terminated PackInfo (\" + nid + \")\");\n        }\n    }\n    \n    private void readUnpackInfo(final DataInput header, final Archive archive) throws IOException {\n        int nid = header.readUnsignedByte();\n        if (nid != NID.kFolder) {\n            throw new IOException(\"Expected kFolder, got \" + nid);\n        }\n        final long numFolders = readUint64(header);\n        final Folder[] folders = new Folder[(int)numFolders];\n        archive.folders = folders;\n        final int external = header.readUnsignedByte();\n        if (external != 0) {\n            throw new IOException(\"External unsupported\");\n        }\n        for (int i = 0; i < (int)numFolders; i++) {\n            folders[i] = readFolder(header);\n        }\n        \n        nid = header.readUnsignedByte();\n        if (nid != NID.kCodersUnpackSize) {\n            throw new IOException(\"Expected kCodersUnpackSize, got \" + nid);\n        }\n        for (final Folder folder : folders) {\n            folder.unpackSizes = new long[(int)folder.totalOutputStreams];\n            for (int i = 0; i < folder.totalOutputStreams; i++) {\n                folder.unpackSizes[i] = readUint64(header);\n            }\n        }\n        \n        nid = header.readUnsignedByte();\n        if (nid == NID.kCRC) {\n            final BitSet crcsDefined = readAllOrBits(header, (int)numFolders);\n            for (int i = 0; i < (int)numFolders; i++) {\n                if (crcsDefined.get(i)) {\n                    folders[i].hasCrc = true;\n                    folders[i].crc = 0xffffFFFFL & Integer.reverseBytes(header.readInt());\n                } else {\n                    folders[i].hasCrc = false;\n                }\n            }\n            \n            nid = header.readUnsignedByte();\n        }\n        \n        if (nid != NID.kEnd) {\n            throw new IOException(\"Badly terminated UnpackInfo\");\n        }\n    }\n    \n    private void readSubStreamsInfo(final DataInput header, final Archive archive) throws IOException {\n        for (final Folder folder : archive.folders) {\n            folder.numUnpackSubStreams = 1;\n        }\n        int totalUnpackStreams = archive.folders.length;\n        \n        int nid = header.readUnsignedByte();\n        if (nid == NID.kNumUnpackStream) {\n            totalUnpackStreams = 0;\n            for (final Folder folder : archive.folders) {\n                final long numStreams = readUint64(header);\n                folder.numUnpackSubStreams = (int)numStreams;\n                totalUnpackStreams += numStreams;\n            }\n            nid = header.readUnsignedByte();\n        }\n        \n        final SubStreamsInfo subStreamsInfo = new SubStreamsInfo();\n        subStreamsInfo.unpackSizes = new long[totalUnpackStreams];\n        subStreamsInfo.hasCrc = new BitSet(totalUnpackStreams);\n        subStreamsInfo.crcs = new long[totalUnpackStreams];\n        \n        int nextUnpackStream = 0;\n        for (final Folder folder : archive.folders) {\n            if (folder.numUnpackSubStreams == 0) {\n                continue;\n            }\n            long sum = 0;\n            if (nid == NID.kSize) {\n                for (int i = 0; i < folder.numUnpackSubStreams - 1; i++) {\n                    final long size = readUint64(header);\n                    subStreamsInfo.unpackSizes[nextUnpackStream++] = size;\n                    sum += size;\n                }\n            }\n            subStreamsInfo.unpackSizes[nextUnpackStream++] = folder.getUnpackSize() - sum;\n        }\n        if (nid == NID.kSize) {\n            nid = header.readUnsignedByte();\n        }\n        \n        int numDigests = 0;\n        for (final Folder folder : archive.folders) {\n            if (folder.numUnpackSubStreams != 1 || !folder.hasCrc) {\n                numDigests += folder.numUnpackSubStreams;\n            }\n        }\n        \n        if (nid == NID.kCRC) {\n            final BitSet hasMissingCrc = readAllOrBits(header, numDigests);\n            final long[] missingCrcs = new long[numDigests];\n            for (int i = 0; i < numDigests; i++) {\n                if (hasMissingCrc.get(i)) {\n                    missingCrcs[i] = 0xffffFFFFL & Integer.reverseBytes(header.readInt());\n                }\n            }\n            int nextCrc = 0;\n            int nextMissingCrc = 0;\n            for (final Folder folder: archive.folders) {\n                if (folder.numUnpackSubStreams == 1 && folder.hasCrc) {\n                    subStreamsInfo.hasCrc.set(nextCrc, true);\n                    subStreamsInfo.crcs[nextCrc] = folder.crc;\n                    ++nextCrc;\n                } else {\n                    for (int i = 0; i < folder.numUnpackSubStreams; i++) {\n                        subStreamsInfo.hasCrc.set(nextCrc, hasMissingCrc.get(nextMissingCrc));\n                        subStreamsInfo.crcs[nextCrc] = missingCrcs[nextMissingCrc];\n                        ++nextCrc;\n                        ++nextMissingCrc;\n                    }\n                }\n            }\n            \n            nid = header.readUnsignedByte();\n        }\n        \n        if (nid != NID.kEnd) {\n            throw new IOException(\"Badly terminated SubStreamsInfo\");\n        }\n        \n        archive.subStreamsInfo = subStreamsInfo;\n    }\n    \n    private Folder readFolder(final DataInput header) throws IOException {\n        final Folder folder = new Folder();\n        \n        final long numCoders = readUint64(header);\n        final Coder[] coders = new Coder[(int)numCoders];\n        long totalInStreams = 0;\n        long totalOutStreams = 0;\n        for (int i = 0; i < coders.length; i++) {\n            coders[i] = new Coder();\n            final int bits = header.readUnsignedByte();\n            final int idSize = bits & 0xf;\n            final boolean isSimple = (bits & 0x10) == 0;\n            final boolean hasAttributes = (bits & 0x20) != 0;\n            final boolean moreAlternativeMethods = (bits & 0x80) != 0;\n            \n            coders[i].decompressionMethodId = new byte[idSize];\n            header.readFully(coders[i].decompressionMethodId);\n            if (isSimple) {\n                coders[i].numInStreams = 1;\n                coders[i].numOutStreams = 1;\n            } else {\n                coders[i].numInStreams = readUint64(header);\n                coders[i].numOutStreams = readUint64(header);\n            }\n            totalInStreams += coders[i].numInStreams;\n            totalOutStreams += coders[i].numOutStreams;\n            if (hasAttributes) {\n                final long propertiesSize = readUint64(header);\n                coders[i].properties = new byte[(int)propertiesSize];\n                header.readFully(coders[i].properties);\n            }\n            // would need to keep looping as above:\n            while (moreAlternativeMethods) {\n                throw new IOException(\"Alternative methods are unsupported, please report. \" +\n                        \"The reference implementation doesn't support them either.\");\n            }\n        }\n        folder.coders = coders;\n        folder.totalInputStreams = totalInStreams;\n        folder.totalOutputStreams = totalOutStreams;\n        \n        if (totalOutStreams == 0) {\n            throw new IOException(\"Total output streams can't be 0\");\n        }\n        final long numBindPairs = totalOutStreams - 1;\n        final BindPair[] bindPairs = new BindPair[(int)numBindPairs];\n        for (int i = 0; i < bindPairs.length; i++) {\n            bindPairs[i] = new BindPair();\n            bindPairs[i].inIndex = readUint64(header);\n            bindPairs[i].outIndex = readUint64(header);\n        }\n        folder.bindPairs = bindPairs;\n        \n        if (totalInStreams < numBindPairs) {\n            throw new IOException(\"Total input streams can't be less than the number of bind pairs\");\n        }\n        final long numPackedStreams = totalInStreams - numBindPairs;\n        final long packedStreams[] = new long[(int)numPackedStreams];\n        if (numPackedStreams == 1) {\n            int i;\n            for (i = 0; i < (int)totalInStreams; i++) {\n                if (folder.findBindPairForInStream(i) < 0) {\n                    break;\n                }\n            }\n            if (i == (int)totalInStreams) {\n                throw new IOException(\"Couldn't find stream's bind pair index\");\n            }\n            packedStreams[0] = i;\n        } else {\n            for (int i = 0; i < (int)numPackedStreams; i++) {\n                packedStreams[i] = readUint64(header);\n            }\n        }\n        folder.packedStreams = packedStreams;\n        \n        return folder;\n    }\n    \n    private BitSet readAllOrBits(final DataInput header, final int size) throws IOException {\n        final int areAllDefined = header.readUnsignedByte();\n        final BitSet bits;\n        if (areAllDefined != 0) {\n            bits = new BitSet(size);\n            for (int i = 0; i < size; i++) {\n                bits.set(i, true);\n            }\n        } else {\n            bits = readBits(header, size);\n        }\n        return bits;\n    }\n    \n    private BitSet readBits(final DataInput header, final int size) throws IOException {\n        final BitSet bits = new BitSet(size);\n        int mask = 0;\n        int cache = 0;\n        for (int i = 0; i < size; i++) {\n            if (mask == 0) {\n                mask = 0x80;\n                cache = header.readUnsignedByte();\n            }\n            bits.set(i, (cache & mask) != 0);\n            mask >>>= 1;\n        }\n        return bits;\n    }\n    \n    private void readFilesInfo(final DataInput header, final Archive archive) throws IOException {\n        final long numFiles = readUint64(header);\n        final SevenZArchiveEntry[] files = new SevenZArchiveEntry[(int)numFiles];\n        for (int i = 0; i < files.length; i++) {\n            files[i] = new SevenZArchiveEntry();\n        }\n        BitSet isEmptyStream = null;\n        BitSet isEmptyFile = null; \n        BitSet isAnti = null;\n        while (true) {\n            final int propertyType = header.readUnsignedByte();\n            if (propertyType == 0) {\n                break;\n            }\n            final long size = readUint64(header);\n            switch (propertyType) {\n                case NID.kEmptyStream: {\n                    isEmptyStream = readBits(header, files.length);\n                    break;\n                }\n                case NID.kEmptyFile: {\n                    if (isEmptyStream == null) { // protect against NPE\n                        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n                    }\n                    isEmptyFile = readBits(header, isEmptyStream.cardinality());\n                    break;\n                }\n                case NID.kAnti: {\n                    if (isEmptyStream == null) { // protect against NPE\n                        throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n                    }\n                    isAnti = readBits(header, isEmptyStream.cardinality());\n                    break;\n                }\n                case NID.kName: {\n                    final int external = header.readUnsignedByte();\n                    if (external != 0) {\n                        throw new IOException(\"Not implemented\");\n                    }\n                    if (((size - 1) & 1) != 0) {\n                        throw new IOException(\"File names length invalid\");\n                    }\n                    final byte[] names = new byte[(int)(size - 1)];\n                    header.readFully(names);\n                    int nextFile = 0;\n                    int nextName = 0;\n                    for (int i = 0; i < names.length; i += 2) {\n                        if (names[i] == 0 && names[i+1] == 0) {\n                            files[nextFile++].setName(new String(names, nextName, i-nextName, CharsetNames.UTF_16LE));\n                            nextName = i + 2;\n                        }\n                    }\n                    if (nextName != names.length || nextFile != files.length) {\n                        throw new IOException(\"Error parsing file names\");\n                    }\n                    break;\n                }\n                case NID.kCTime: {\n                    final BitSet timesDefined = readAllOrBits(header, files.length);\n                    final int external = header.readUnsignedByte();\n                    if (external != 0) {\n                        throw new IOException(\"Unimplemented\");\n                    }\n                    for (int i = 0; i < files.length; i++) {\n                        files[i].setHasCreationDate(timesDefined.get(i));\n                        if (files[i].getHasCreationDate()) {\n                            files[i].setCreationDate(Long.reverseBytes(header.readLong()));\n                        }\n                    }\n                    break;\n                }\n                case NID.kATime: {\n                    final BitSet timesDefined = readAllOrBits(header, files.length);\n                    final int external = header.readUnsignedByte();\n                    if (external != 0) {\n                        throw new IOException(\"Unimplemented\");\n                    }\n                    for (int i = 0; i < files.length; i++) {\n                        files[i].setHasAccessDate(timesDefined.get(i));\n                        if (files[i].getHasAccessDate()) {\n                            files[i].setAccessDate(Long.reverseBytes(header.readLong()));\n                        }\n                    }\n                    break;\n                }\n                case NID.kMTime: {\n                    final BitSet timesDefined = readAllOrBits(header, files.length);\n                    final int external = header.readUnsignedByte();\n                    if (external != 0) {\n                        throw new IOException(\"Unimplemented\");\n                    }\n                    for (int i = 0; i < files.length; i++) {\n                        files[i].setHasLastModifiedDate(timesDefined.get(i));\n                        if (files[i].getHasLastModifiedDate()) {\n                            files[i].setLastModifiedDate(Long.reverseBytes(header.readLong()));\n                        }\n                    }\n                    break;\n                }\n                case NID.kWinAttributes: {\n                    final BitSet attributesDefined = readAllOrBits(header, files.length);\n                    final int external = header.readUnsignedByte();\n                    if (external != 0) {\n                        throw new IOException(\"Unimplemented\");\n                    }\n                    for (int i = 0; i < files.length; i++) {\n                        files[i].setHasWindowsAttributes(attributesDefined.get(i));\n                        if (files[i].getHasWindowsAttributes()) {\n                            files[i].setWindowsAttributes(Integer.reverseBytes(header.readInt()));\n                        }\n                    }\n                    break;\n                }\n                case NID.kStartPos: {\n                    throw new IOException(\"kStartPos is unsupported, please report\");\n                }\n                case NID.kDummy: {\n                    // 7z 9.20 asserts the content is all zeros and ignores the property\n                    // Compress up to 1.8.1 would throw an exception, now we ignore it (see COMPRESS-287\n                    \n                    if (skipBytesFully(header, size) < size) {\n                        throw new IOException(\"Incomplete kDummy property\");\n                    }\n                    break;\n                }\n\n                default: {\n                    // Compress up to 1.8.1 would throw an exception, now we ignore it (see COMPRESS-287\n                    if (skipBytesFully(header, size) < size) {\n                        throw new IOException(\"Incomplete property of type \" + propertyType);\n                    }\n                    break;\n                }\n            }\n        }\n        int nonEmptyFileCounter = 0;\n        int emptyFileCounter = 0;\n        for (int i = 0; i < files.length; i++) {\n            files[i].setHasStream(isEmptyStream == null ? true : !isEmptyStream.get(i));\n            if (files[i].hasStream()) {\n                files[i].setDirectory(false);\n                files[i].setAntiItem(false);\n                files[i].setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n                files[i].setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n                files[i].setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n                ++nonEmptyFileCounter;\n            } else {\n                files[i].setDirectory(isEmptyFile == null ? true : !isEmptyFile.get(emptyFileCounter));\n                files[i].setAntiItem(isAnti == null ? false : isAnti.get(emptyFileCounter));\n                files[i].setHasCrc(false);\n                files[i].setSize(0);\n                ++emptyFileCounter;\n            }\n        }\n        archive.files = files;\n        calculateStreamMap(archive);\n    }\n    \n    private void calculateStreamMap(final Archive archive) throws IOException {\n        final StreamMap streamMap = new StreamMap();\n        \n        int nextFolderPackStreamIndex = 0;\n        final int numFolders = archive.folders != null ? archive.folders.length : 0;\n        streamMap.folderFirstPackStreamIndex = new int[numFolders];\n        for (int i = 0; i < numFolders; i++) {\n            streamMap.folderFirstPackStreamIndex[i] = nextFolderPackStreamIndex;\n            nextFolderPackStreamIndex += archive.folders[i].packedStreams.length;\n        }\n        \n        long nextPackStreamOffset = 0;\n        final int numPackSizes = archive.packSizes != null ? archive.packSizes.length : 0;\n        streamMap.packStreamOffsets = new long[numPackSizes];\n        for (int i = 0; i < numPackSizes; i++) {\n            streamMap.packStreamOffsets[i] = nextPackStreamOffset;\n            nextPackStreamOffset += archive.packSizes[i]; \n        }\n        \n        streamMap.folderFirstFileIndex = new int[numFolders];\n        streamMap.fileFolderIndex = new int[archive.files.length];\n        int nextFolderIndex = 0;\n        int nextFolderUnpackStreamIndex = 0;\n        for (int i = 0; i < archive.files.length; i++) {\n            if (!archive.files[i].hasStream() && nextFolderUnpackStreamIndex == 0) {\n                streamMap.fileFolderIndex[i] = -1;\n                continue;\n            }\n            if (nextFolderUnpackStreamIndex == 0) {\n                for (; nextFolderIndex < archive.folders.length; ++nextFolderIndex) {\n                    streamMap.folderFirstFileIndex[nextFolderIndex] = i;\n                    if (archive.folders[nextFolderIndex].numUnpackSubStreams > 0) {\n                        break;\n                    }\n                }\n                if (nextFolderIndex >= archive.folders.length) {\n                    throw new IOException(\"Too few folders in archive\");\n                }\n            }\n            streamMap.fileFolderIndex[i] = nextFolderIndex;\n            if (!archive.files[i].hasStream()) {\n                continue;\n            }\n            ++nextFolderUnpackStreamIndex;\n            if (nextFolderUnpackStreamIndex >= archive.folders[nextFolderIndex].numUnpackSubStreams) {\n                ++nextFolderIndex;\n                nextFolderUnpackStreamIndex = 0;\n            }\n        }\n        \n        archive.streamMap = streamMap;\n    }\n    \n    private void buildDecodingStream() throws IOException {\n        final int folderIndex = archive.streamMap.fileFolderIndex[currentEntryIndex];\n        if (folderIndex < 0) {\n            deferredBlockStreams.clear();\n            // TODO: previously it'd return an empty stream?\n            // new BoundedInputStream(new ByteArrayInputStream(new byte[0]), 0);\n            return;\n        }\n        final SevenZArchiveEntry file = archive.files[currentEntryIndex];\n        if (currentFolderIndex == folderIndex) {\n            // (COMPRESS-320).\n            // The current entry is within the same (potentially opened) folder. The\n            // previous stream has to be fully decoded before we can start reading\n            // but don't do it eagerly -- if the user skips over the entire folder nothing\n            // is effectively decompressed.\n\n            file.setContentMethods(archive.files[currentEntryIndex - 1].getContentMethods());\n        } else {\n            // We're opening a new folder. Discard any queued streams/ folder stream.\n            currentFolderIndex = folderIndex;\n            deferredBlockStreams.clear();\n            if (currentFolderInputStream != null) {\n                currentFolderInputStream.close();\n                currentFolderInputStream = null;\n            }\n            \n            final Folder folder = archive.folders[folderIndex];\n            final int firstPackStreamIndex = archive.streamMap.folderFirstPackStreamIndex[folderIndex];\n            final long folderOffset = SIGNATURE_HEADER_SIZE + archive.packPos +\n                    archive.streamMap.packStreamOffsets[firstPackStreamIndex];\n            currentFolderInputStream = buildDecoderStack(folder, folderOffset, firstPackStreamIndex, file);\n        }\n\n        InputStream fileStream = new BoundedInputStream(currentFolderInputStream, file.getSize());\n        if (file.getHasCrc()) {\n            fileStream = new CRC32VerifyingInputStream(fileStream, file.getSize(), file.getCrcValue());\n        }\n        \n        deferredBlockStreams.add(fileStream);\n    }\n\n    private InputStream buildDecoderStack(final Folder folder, final long folderOffset,\n                final int firstPackStreamIndex, final SevenZArchiveEntry entry) throws IOException {\n        file.seek(folderOffset);\n        InputStream inputStreamStack =\n            new BufferedInputStream(\n              new BoundedRandomAccessFileInputStream(file,\n                  archive.packSizes[firstPackStreamIndex]));\n        final LinkedList<SevenZMethodConfiguration> methods = new LinkedList<SevenZMethodConfiguration>();\n        for (final Coder coder : folder.getOrderedCoders()) {\n            if (coder.numInStreams != 1 || coder.numOutStreams != 1) {\n                throw new IOException(\"Multi input/output stream coders are not yet supported\");\n            }\n            final SevenZMethod method = SevenZMethod.byId(coder.decompressionMethodId);\n            inputStreamStack = Coders.addDecoder(fileName, inputStreamStack,\n                    folder.getUnpackSizeForCoder(coder), coder, password);\n            methods.addFirst(new SevenZMethodConfiguration(method,\n                     Coders.findByMethod(method).getOptionsFromCoder(coder, inputStreamStack)));\n        }\n        entry.setContentMethods(methods);\n        if (folder.hasCrc) {\n            return new CRC32VerifyingInputStream(inputStreamStack,\n                    folder.getUnpackSize(), folder.crc);\n        }\n        return inputStreamStack;\n    }\n    \n    /**\n     * Reads a byte of data.\n     * \n     * @return the byte read, or -1 if end of input is reached\n     * @throws IOException\n     *             if an I/O error has occurred\n     */\n    public int read() throws IOException {\n        return getCurrentStream().read();\n    }\n    \n    private InputStream getCurrentStream() throws IOException {\n        if (archive.files[currentEntryIndex].getSize() == 0) {\n            return new ByteArrayInputStream(new byte[0]);\n        }\n        if (deferredBlockStreams.isEmpty()) {\n            throw new IllegalStateException(\"No current 7z entry (call getNextEntry() first).\");\n        }\n",
    "label": "clean",
    "id": "dec03407-b403-4924-95b1-18306d17d16f"
  },
  {
    "project": "Gson",
    "bug_id": "2",
    "file": "com/google/gson/internal/bind/TypeAdapters.java",
    "snippet": "  /**\n   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\n   * that the deserialized type matches the type requested.\n   */\n  public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null;\n        }\n        return (TypeAdapter<T2>) new TypeAdapter<T1>() {\n          @Override public void write(JsonWriter out, T1 value) throws IOException {\n            typeAdapter.write(out, value);\n          }\n\n          @Override public T1 read(JsonReader in) throws IOException {\n",
    "label": "clean",
    "id": "4887cda6-88af-4e19-b08d-5d4944f10da1"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "100",
    "file": "com/fasterxml/jackson/databind/node/TreeTraversingParser.java",
    "snippet": "    /**********************************************************\n     */\n\n    //public byte getByteValue() throws IOException, JsonParseException\n\n    @Override\n    public NumberType getNumberType() throws IOException, JsonParseException {\n        JsonNode n = currentNumericNode();\n        return (n == null) ? null : n.numberType();\n    }\n\n    @Override\n    public BigInteger getBigIntegerValue() throws IOException, JsonParseException\n    {\n        return currentNumericNode().bigIntegerValue();\n    }\n\n    @Override\n    public BigDecimal getDecimalValue() throws IOException, JsonParseException {\n        return currentNumericNode().decimalValue();\n    }\n\n    @Override\n    public double getDoubleValue() throws IOException, JsonParseException {\n        return currentNumericNode().doubleValue();\n    }\n\n    @Override\n    public float getFloatValue() throws IOException, JsonParseException {\n        return (float) currentNumericNode().doubleValue();\n    }\n\n    @Override\n    public long getLongValue() throws IOException, JsonParseException {\n        return currentNumericNode().longValue();\n    }\n\n    @Override\n    public int getIntValue() throws IOException, JsonParseException {\n        return currentNumericNode().intValue();\n    }\n\n    @Override\n    public Number getNumberValue() throws IOException, JsonParseException {\n        return currentNumericNode().numberValue();\n    }\n\n    @Override\n    public Object getEmbeddedObject()\n    {\n        if (!_closed) {\n            JsonNode n = currentNode();\n            if (n != null) {\n                if (n.isPojo()) {\n                    return ((POJONode) n).getPojo();\n                }\n                if (n.isBinary()) {\n                    return ((BinaryNode) n).binaryValue();\n                }\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public boolean isNaN() {\n        if (!_closed) {\n            JsonNode n = currentNode();\n            if (n instanceof NumericNode) {\n                return ((NumericNode) n).isNaN();\n            }\n        }\n        return false;\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, typed binary (base64) access\n    /**********************************************************\n     */\n\n    @Override\n    public byte[] getBinaryValue(Base64Variant b64variant)\n        throws IOException, JsonParseException\n    {\n        // Multiple possibilities...\n        JsonNode n = currentNode();\n        if (n != null) {\n            // [databind#2096]: although `binaryValue()` works for real binary node\n            // and embedded \"POJO\" node, coercion from TextNode may require variant, so:\n            byte[] data = n.binaryValue();\n            if (data != null) {\n                return data;\n            }\n            if (n.isPojo()) {\n                Object ob = ((POJONode) n).getPojo();\n",
    "label": "buggy",
    "id": "89622665-2298-4712-938c-f1569eaa4d2e"
  },
  {
    "project": "Cli",
    "bug_id": "8",
    "file": "org/apache/commons/cli/HelpFormatter.java",
    "snippet": "/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.cli;\n\nimport java.io.PrintWriter;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.List;\n\n/** \n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n **/\npublic class HelpFormatter {\n    // --------------------------------------------------------------- Constants\n\n    /** default number of characters per line */\n    public static final int DEFAULT_WIDTH = 74;\n\n    /** default padding to the left of each line */\n    public static final int DEFAULT_LEFT_PAD = 1;\n\n    /**\n     * the number of characters of padding to be prefixed\n     * to each description line\n     */\n    public static final int DEFAULT_DESC_PAD = 3;\n\n    /** the string to display at the begining of the usage statement */\n    public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";\n\n    /** default prefix for shortOpts */\n    public static final String DEFAULT_OPT_PREFIX = \"-\";\n\n    /** default prefix for long Option */\n    public static final String DEFAULT_LONG_OPT_PREFIX = \"--\";\n\n    /** default name for an argument */\n    public static final String DEFAULT_ARG_NAME = \"arg\";\n\n    // -------------------------------------------------------------- Attributes\n\n    /**\n     * number of characters per line\n     *\n     * @deprecated Scope will be made private for next major version\n     * - use get/setWidth methods instead.\n     */\n    public int defaultWidth = DEFAULT_WIDTH;\n\n    /**\n     * amount of padding to the left of each line\n     *\n     * @deprecated Scope will be made private for next major version\n     * - use get/setLeftPadding methods instead.\n     */\n    public int defaultLeftPad = DEFAULT_LEFT_PAD;\n\n    /**\n     * the number of characters of padding to be prefixed\n     * to each description line\n     *\n     * @deprecated Scope will be made private for next major version\n     * - use get/setDescPadding methods instead.\n     */\n    public int defaultDescPad = DEFAULT_DESC_PAD;\n\n    /**\n     * the string to display at the begining of the usage statement\n     *\n     * @deprecated Scope will be made private for next major version\n     * - use get/setSyntaxPrefix methods instead.\n     */\n    public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\n\n    /**\n     * the new line string\n     *\n     * @deprecated Scope will be made private for next major version\n     * - use get/setNewLine methods instead.\n     */\n    public String defaultNewLine = System.getProperty(\"line.separator\");\n\n    /**\n     * the shortOpt prefix\n     *\n     * @deprecated Scope will be made private for next major version\n     * - use get/setOptPrefix methods instead.\n     */\n    public String defaultOptPrefix = DEFAULT_OPT_PREFIX;\n\n    /**\n     * the long Opt prefix\n     *\n     * @deprecated Scope will be made private for next major version\n     * - use get/setLongOptPrefix methods instead.\n     */\n    public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\n\n    /**\n     * the name of the argument\n     *\n     * @deprecated Scope will be made private for next major version\n     * - use get/setArgName methods instead.\n     */\n    public String defaultArgName = DEFAULT_ARG_NAME;\n\n    /**\n     * Sets the 'width'.\n     *\n     * @param width the new value of 'width'\n     */\n    public void setWidth(int width)\n    {\n        this.defaultWidth = width;\n    }\n\n    /**\n     * Returns the 'width'.\n     *\n     * @return the 'width'\n     */\n    public int getWidth()\n    {\n        return this.defaultWidth;\n    }\n\n    /**\n     * Sets the 'leftPadding'.\n     *\n     * @param padding the new value of 'leftPadding'\n     */\n    public void setLeftPadding(int padding)\n    {\n        this.defaultLeftPad = padding;\n    }\n\n    /**\n     * Returns the 'leftPadding'.\n     *\n     * @return the 'leftPadding'\n     */\n    public int getLeftPadding()\n    {\n        return this.defaultLeftPad;\n    }\n\n    /**\n     * Sets the 'descPadding'.\n     *\n     * @param padding the new value of 'descPadding'\n     */\n    public void setDescPadding(int padding)\n    {\n        this.defaultDescPad = padding;\n    }\n\n    /**\n     * Returns the 'descPadding'.\n     *\n     * @return the 'descPadding'\n     */\n    public int getDescPadding()\n    {\n        return this.defaultDescPad;\n    }\n\n    /**\n     * Sets the 'syntaxPrefix'.\n     *\n     * @param prefix the new value of 'syntaxPrefix'\n     */\n    public void setSyntaxPrefix(String prefix)\n    {\n        this.defaultSyntaxPrefix = prefix;\n    }\n\n    /**\n     * Returns the 'syntaxPrefix'.\n     *\n     * @return the 'syntaxPrefix'\n     */\n    public String getSyntaxPrefix()\n    {\n        return this.defaultSyntaxPrefix;\n    }\n\n    /**\n     * Sets the 'newLine'.\n     *\n     * @param newline the new value of 'newLine'\n     */\n    public void setNewLine(String newline)\n    {\n        this.defaultNewLine = newline;\n    }\n\n    /**\n     * Returns the 'newLine'.\n     *\n     * @return the 'newLine'\n     */\n    public String getNewLine()\n    {\n        return this.defaultNewLine;\n    }\n\n    /**\n     * Sets the 'optPrefix'.\n     *\n     * @param prefix the new value of 'optPrefix'\n     */\n    public void setOptPrefix(String prefix)\n    {\n        this.defaultOptPrefix = prefix;\n    }\n\n    /**\n     * Returns the 'optPrefix'.\n     *\n     * @return the 'optPrefix'\n     */\n    public String getOptPrefix()\n    {\n        return this.defaultOptPrefix;\n    }\n\n    /**\n     * Sets the 'longOptPrefix'.\n     *\n     * @param prefix the new value of 'longOptPrefix'\n     */\n    public void setLongOptPrefix(String prefix)\n    {\n        this.defaultLongOptPrefix = prefix;\n    }\n\n    /**\n     * Returns the 'longOptPrefix'.\n     *\n     * @return the 'longOptPrefix'\n     */\n    public String getLongOptPrefix()\n    {\n        return this.defaultLongOptPrefix;\n    }\n\n    /**\n     * Sets the 'argName'.\n     *\n     * @param name the new value of 'argName'\n     */\n    public void setArgName(String name)\n    {\n        this.defaultArgName = name;\n    }\n\n    /**\n     * Returns the 'argName'.\n     *\n     * @return the 'argName'\n     */\n    public String getArgName()\n    {\n        return this.defaultArgName;\n    }\n\n\n    // ------------------------------------------------------------------ Public\n\n    /**\n     * <p>Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.</p>\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     */\n    public void printHelp(String cmdLineSyntax, Options options)\n    {\n        printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);\n    }\n\n    /**\n     * <p>Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.</p>\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param options the Options instance\n     * @param autoUsage whether to print an automatically generated \n     * usage statement\n     */\n    public void printHelp(String cmdLineSyntax, Options options, \n                          boolean autoUsage)\n    {\n        printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);\n    }\n\n    /**\n     * <p>Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.</p>\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(String cmdLineSyntax, String header, Options options, \n                          String footer)\n    {\n        printHelp(cmdLineSyntax, header, options, footer, false);\n    }\n\n    /**\n     * <p>Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to \n     * System.out.</p>\n     *\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated \n     * usage statement\n     */\n    public void printHelp(String cmdLineSyntax, String header, Options options, \n                          String footer, boolean autoUsage)\n    {\n        printHelp(defaultWidth, cmdLineSyntax, header, options, footer, \n                  autoUsage);\n    }\n\n    /**\n     * <p>Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.</p>\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(int width, String cmdLineSyntax, String header, \n                          Options options, String footer)\n    {\n        printHelp(width, cmdLineSyntax, header, options, footer, false);\n    }\n\n    /**\n     * <p>Print the help for <code>options</code> with the specified\n     * command line syntax.  This method prints help information to\n     * System.out.</p>\n     *\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated \n     * usage statement\n     */\n    public void printHelp(int width, String cmdLineSyntax, String header, \n                          Options options, String footer, boolean autoUsage)\n    {\n        PrintWriter pw = new PrintWriter(System.out);\n\n        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, \n                  defaultDescPad, footer, autoUsage);\n        pw.flush();\n    }\n\n    /**\n     * <p>Print the help for <code>options</code> with the specified\n     * command line syntax.</p>\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     */\n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, \n                          String header, Options options, int leftPad, \n                          int descPad, String footer)\n    {\n        printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, \n                  footer, false);\n    }\n\n\n    /**\n     * <p>Print the help for <code>options</code> with the specified\n     * command line syntax.</p>\n     *\n     * @param pw the writer to which the help will be written\n     * @param width the number of characters to be displayed on each line\n     * @param cmdLineSyntax the syntax for this application\n     * @param header the banner to display at the begining of the help\n     * @param options the Options instance\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     * @param footer the banner to display at the end of the help\n     * @param autoUsage whether to print an automatically generated \n     * usage statement\n     */\n    public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, \n                          String header, Options options, int leftPad, \n                          int descPad, String footer, boolean autoUsage)\n    {\n        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))\n        {\n            throw new IllegalArgumentException(\"cmdLineSyntax not provided\");\n        }\n\n        if (autoUsage)\n        {\n            printUsage(pw, width, cmdLineSyntax, options);\n        }\n        else\n        {\n            printUsage(pw, width, cmdLineSyntax);\n        }\n\n        if ((header != null) && (header.trim().length() > 0))\n        {\n            printWrapped(pw, width, header);\n        }\n\n        printOptions(pw, width, options, leftPad, descPad);\n\n        if ((footer != null) && (footer.trim().length() > 0))\n        {\n            printWrapped(pw, width, footer);\n        }\n    }\n\n    /**\n     * <p>Prints the usage statement for the specified application.</p>\n     *\n     * @param pw The PrintWriter to print the usage statement \n     * @param width The number of characters to display per line\n     * @param app The application name\n     * @param options The command line Options\n     *\n     */\n    public void printUsage(PrintWriter pw, int width, String app, \n                           Options options)\n    {\n        // initialise the string buffer\n        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app)\n                                                                 .append(\" \");\n\n        // create a list for processed option groups\n        final Collection processedGroups = new ArrayList();\n\n        // temp variable\n        Option option;\n\n        List optList = new ArrayList(options.getOptions());\n        Collections.sort(optList, new OptionComparator());\n        // iterate over the options\n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            // get the next Option\n            option = (Option) i.next();\n\n            // check if the option is part of an OptionGroup\n            OptionGroup group = options.getOptionGroup(option);\n\n            // if the option is part of a group \n            if (group != null)\n            {\n                // and if the group has not already been processed\n                if (!processedGroups.contains(group))\n                {\n                    // add the group to the processed list\n                    processedGroups.add(group);\n\n\n                    // add the usage clause\n                    appendOptionGroup(buff, group);\n                }\n\n                // otherwise the option was displayed in the group\n                // previously so ignore it.\n            }\n\n            // if the Option is not part of an OptionGroup\n            else\n            {\n                appendOption(buff, option, option.isRequired());\n            }\n\n            if (i.hasNext())\n            {\n                buff.append(\" \");\n            }\n        }\n\n\n        // call printWrapped\n        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, \n                     buff.toString());\n    }\n\n    /**\n     * Appends the usage clause for an OptionGroup to a StringBuffer.  \n     * The clause is wrapped in square brackets if the group is required.\n     * The display of the options is handled by appendOption\n     * @param buff the StringBuffer to append to\n     * @param group the group to append\n     * @see #appendOption(StringBuffer,Option,boolean)\n     */\n    private static void appendOptionGroup(final StringBuffer buff, \n                                          final OptionGroup group)\n    {\n        if (!group.isRequired())\n        {\n            buff.append(\"[\");\n        }\n\n        List optList = new ArrayList(group.getOptions());\n        Collections.sort(optList, new OptionComparator());\n        // for each option in the OptionGroup\n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            // whether the option is required or not is handled at group level\n            appendOption(buff, (Option) i.next(), true);\n\n            if (i.hasNext())\n            {\n                buff.append(\" | \");\n            }\n        }\n\n        if (!group.isRequired())\n        {\n            buff.append(\"]\");\n        }\n    }\n\n    /**\n     * Appends the usage clause for an Option to a StringBuffer.  \n     *\n     * @param buff the StringBuffer to append to\n     * @param option the Option to append\n     * @param required whether the Option is required or not\n     */\n    private static void appendOption(final StringBuffer buff, \n                                     final Option option, \n                                     final boolean required)\n    {\n        if (!required)\n        {\n            buff.append(\"[\");\n        }\n\n        if (option.getOpt() != null)\n        {\n            buff.append(\"-\").append(option.getOpt());\n        }\n        else\n        {\n            buff.append(\"--\").append(option.getLongOpt());\n        }\n\n        // if the Option has a value\n        if (option.hasArg() && (option.getArgName() != null))\n        {\n            buff.append(\" <\").append(option.getArgName()).append(\">\");\n        }\n\n        // if the Option is not a required option\n        if (!required)\n        {\n            buff.append(\"]\");\n        }\n    }\n\n    /**\n     * <p>Print the cmdLineSyntax to the specified writer, using the\n     * specified width.</p>\n     *\n     * @param pw The printWriter to write the help to\n     * @param width The number of characters per line for the usage statement.\n     * @param cmdLineSyntax The usage statement.\n     */\n    public void printUsage(PrintWriter pw, int width, String cmdLineSyntax)\n    {\n        int argPos = cmdLineSyntax.indexOf(' ') + 1;\n\n        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, \n                     defaultSyntaxPrefix + cmdLineSyntax);\n    }\n\n    /**\n     * <p>Print the help for the specified Options to the specified writer, \n     * using the specified width, left padding and description padding.</p>\n     *\n     * @param pw The printWriter to write the help to\n     * @param width The number of characters to display per line\n     * @param options The command line Options\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     */\n    public void printOptions(PrintWriter pw, int width, Options options, \n                             int leftPad, int descPad)\n    {\n        StringBuffer sb = new StringBuffer();\n\n        renderOptions(sb, width, options, leftPad, descPad);\n        pw.println(sb.toString());\n    }\n\n    /**\n     * <p>Print the specified text to the specified PrintWriter.</p>\n     *\n     * @param pw The printWriter to write the help to\n     * @param width The number of characters to display per line\n     * @param text The text to be written to the PrintWriter\n     */\n    public void printWrapped(PrintWriter pw, int width, String text)\n    {\n        printWrapped(pw, width, 0, text);\n    }\n\n    /**\n     * <p>Print the specified text to the specified PrintWriter.</p>\n     *\n     * @param pw The printWriter to write the help to\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be written to the PrintWriter\n     */\n    public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, \n                             String text)\n    {\n        StringBuffer sb = new StringBuffer(text.length());\n\n        renderWrappedText(sb, width, nextLineTabStop, text);\n        pw.println(sb.toString());\n    }\n\n    // --------------------------------------------------------------- Protected\n\n    /**\n     * <p>Render the specified Options and return the rendered Options\n     * in a StringBuffer.</p>\n     *\n     * @param sb The StringBuffer to place the rendered Options into.\n     * @param width The number of characters to display per line\n     * @param options The command line Options\n     * @param leftPad the number of characters of padding to be prefixed\n     * to each line\n     * @param descPad the number of characters of padding to be prefixed\n     * to each description line\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderOptions(StringBuffer sb, int width, \n                                         Options options, int leftPad, \n                                         int descPad)\n    {\n        final String lpad = createPadding(leftPad);\n        final String dpad = createPadding(descPad);\n\n        // first create list containing only <lpad>-a,--aaa where \n        // -a is opt and --aaa is long opt; in parallel look for \n        // the longest opt string this list will be then used to \n        // sort options ascending\n        int max = 0;\n        StringBuffer optBuf;\n        List prefixList = new ArrayList();\n        Option option;\n        List optList = options.helpOptions();\n\n        Collections.sort(optList, new OptionComparator());\n\n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            option = (Option) i.next();\n            optBuf = new StringBuffer(8);\n\n            if (option.getOpt() == null)\n            {\n                optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix)\n                      .append(option.getLongOpt());\n            }\n            else\n            {\n                optBuf.append(lpad).append(defaultOptPrefix)\n                      .append(option.getOpt());\n\n                if (option.hasLongOpt())\n                {\n                    optBuf.append(',').append(defaultLongOptPrefix)\n                          .append(option.getLongOpt());\n                }\n            }\n\n            if (option.hasArg())\n            {\n                if (option.hasArgName())\n                {\n                    optBuf.append(\" <\").append(option.getArgName()).append(\">\");\n                }\n                else\n                {\n                    optBuf.append(' ');\n                }\n            }\n\n            prefixList.add(optBuf);\n            max = (optBuf.length() > max)       ? optBuf.length() : max;\n        }\n\n        int x = 0;\n\n        for (Iterator i = optList.iterator(); i.hasNext();)\n        {\n            option = (Option) i.next();\n            optBuf = new StringBuffer(prefixList.get(x++).toString());\n\n            if (optBuf.length() < max)\n            {\n                optBuf.append(createPadding(max - optBuf.length()));\n            }\n\n            optBuf.append(dpad);\n\n            int nextLineTabStop = max + descPad;\n\n            if (option.getDescription() != null)\n            {\n                optBuf.append(option.getDescription());\n            }\n\n            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n\n            if (i.hasNext())\n            {\n                sb.append(defaultNewLine);\n            }\n        }\n\n        return sb;\n    }\n\n    /**\n     * <p>Render the specified text and return the rendered Options\n     * in a StringBuffer.</p>\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, nextLineTabStop);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n\n",
    "label": "buggy",
    "id": "cc4a12dc-5160-4c33-966f-593cdd313eec"
  },
  {
    "project": "Mockito",
    "bug_id": "20",
    "file": "org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java",
    "snippet": "    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n        }\n        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n                settings.getTypeToMock(),\n                settings.getExtraInterfaces()\n        );\n        T mockInstance = null;\n        try {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n",
    "label": "buggy",
    "id": "5b8abf9c-b45b-49b7-bcd0-9078f95f5d31"
  },
  {
    "project": "Compress",
    "bug_id": "37",
    "file": "org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java",
    "snippet": "    /**\n     * Determine if an archive record indicate End of Archive. End of\n     * archive is indicated by a record that consists entirely of null bytes.\n     *\n     * @param record The record data to check.\n     * @return true if the record data is an End of Archive\n     */\n    protected boolean isEOFRecord(final byte[] record) {\n        return record == null || ArchiveUtils.isArrayZero(record, recordSize);\n    }\n    \n    /**\n     * Read a record from the input stream and return the data.\n     *\n     * @return The record data or null if EOF has been hit.\n     * @throws IOException on error\n     */\n    protected byte[] readRecord() throws IOException {\n\n        final byte[] record = new byte[recordSize];\n\n        final int readNow = IOUtils.readFully(is, record);\n        count(readNow);\n        if (readNow != recordSize) {\n            return null;\n        }\n\n        return record;\n    }\n\n    private void readGlobalPaxHeaders() throws IOException {\n        globalPaxHeaders = parsePaxHeaders(this);\n        getNextEntry(); // Get the actual file entry\n    }\n\n    private void paxHeaders() throws IOException{\n        final Map<String, String> headers = parsePaxHeaders(this);\n        getNextEntry(); // Get the actual file entry\n        applyPaxHeadersToCurrentEntry(headers);\n    }\n\n    // NOTE, using a Map here makes it impossible to ever support GNU\n    // sparse files using the PAX Format 0.0, see\n    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\n    Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n        // Format is \"length keyword=value\\n\";\n        while(true){ // get length\n            int ch;\n            int len = 0;\n            int read = 0;\n            while((ch = i.read()) != -1) {\n                read++;\n                if (ch == ' '){\n                    // Get keyword\n                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n                    while((ch = i.read()) != -1) {\n                        read++;\n                        if (ch == '='){ // end of keyword\n",
    "label": "buggy",
    "id": "014c86a1-a51b-484f-858a-422471e5cca5"
  },
  {
    "project": "Closure",
    "bug_id": "128",
    "file": "com/google/javascript/jscomp/CodeGenerator.java",
    "snippet": "  /**\n   * Insert a ECMASCRIPT 5 strict annotation.\n   */\n  public void tagAsStrict() {\n    add(\"'use strict';\");\n  }\n\n  void add(String str) {\n    cc.add(str);\n  }\n\n  private void addIdentifier(String identifier) {\n    cc.addIdentifier(identifierEscape(identifier));\n  }\n\n  void add(Node n) {\n    add(n, Context.OTHER);\n  }\n\n  void add(Node n, Context context) {\n    if (!cc.continueProcessing()) {\n      return;\n    }\n\n    int type = n.getType();\n    String opstr = NodeUtil.opToStr(type);\n    int childCount = n.getChildCount();\n    Node first = n.getFirstChild();\n    Node last = n.getLastChild();\n\n    // Handle all binary operators\n    if (opstr != null && first != last) {\n      Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);\n      int p = NodeUtil.precedence(type);\n\n      // For right-hand-side of operations, only pass context if it's\n      // the IN_FOR_INIT_CLAUSE one.\n      Context rhsContext = getContextForNoInOperator(context);\n\n      // Handle associativity.\n      // e.g. if the parse tree is a * (b * c),\n      // we can simply generate a * b * c.\n      if (last.getType() == type &&\n          NodeUtil.isAssociative(type)) {\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {\n        // Assignments are the only right-associative binary operators\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else {\n        unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);\n      }\n      return;\n    }\n\n    cc.startSourceMapping(n);\n\n    switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.isEmpty()) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.isComma()) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.PARAM_LIST:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        unrollBinaryOperator(n, Token.COMMA, \",\", context, Context.OTHER, 0, 0);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().isNumber()) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1, Context.OTHER);\n        cc.addOp(\":\", true);\n        addExpr(last, 1, Context.OTHER);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (!first.isString() ||\n            !last.isString()) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        Preconditions.checkState(n.getParent().isObjectLit());\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.isFunction());\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GETTER_DEF) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // Unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n);\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.isVar()) {\n            cc.endStatement();\n          }\n\n          if (c.isFunction()) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top-level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.isVar()) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.isNumber());\n        if (needsParens) {\n          add(\"(\");\n        }\n        addExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n          add(\")\");\n        } else {\n          addExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"null\");\n        break;\n\n      case Token.THIS:\n        Preconditions.checkState(childCount == 0);\n        add(\"this\");\n        break;\n\n      case Token.FALSE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"false\");\n        break;\n\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"true\");\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence, Context.OTHER);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING_KEY:\n        Preconditions.checkState(\n            childCount == 1, \"Object lit key must have 1 child\");\n        addJsString(n);\n        break;\n\n      case Token.STRING:\n        Preconditions.checkState(\n            childCount == 0, \"A string may not have children\");\n        addJsString(n);\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.isGetterDef() || c.isSetterDef()) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.isStringKey());\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were Unicode escaped.\n                NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1, Context.OTHER);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1, Context.OTHER);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT_CASE:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (!first.isLabelName()) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      case Token.CAST:\n        add(\"(\");\n        add(first);\n        add(\")\");\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }\n\n    cc.endSourceMapping(n);\n  }\n\n  /**\n   * We could use addList recursively here, but sometimes we produce\n   * very deeply nested operators and run out of stack space, so we\n   * just unroll the recursion when possible.\n   *\n   * We assume nodes are left-recursive.\n   */\n  private void unrollBinaryOperator(\n      Node n, int op, String opStr, Context context,\n      Context rhsContext, int leftPrecedence, int rightPrecedence) {\n    Node firstNonOperator = n.getFirstChild();\n    while (firstNonOperator.getType() == op) {\n      firstNonOperator = firstNonOperator.getFirstChild();\n    }\n\n    addExpr(firstNonOperator, leftPrecedence, context);\n\n    Node current = firstNonOperator;\n    do {\n      current = current.getParent();\n      cc.addOp(opStr, true);\n      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);\n    } while (current != n);\n  }\n\n  static boolean isSimpleNumber(String s) {\n    int len = s.length();\n    if (len == 0) {\n      return false;\n    }\n    for (int index = 0; index < len; index++) {\n      char c = s.charAt(index);\n      if (c < '0' || c > '9') {\n",
    "label": "clean",
    "id": "1d497ade-ac77-4056-bce6-6148de93c29f"
  },
  {
    "project": "JacksonDatabind",
    "bug_id": "66",
    "file": "com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java",
    "snippet": "package com.fasterxml.jackson.databind.deser.std;\n\nimport java.io.IOException;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Method;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URL;\nimport java.util.*;\n\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.io.NumberInput;\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\nimport com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n",
    "label": "clean",
    "id": "f32bbae4-7674-45b8-8563-41914b34a175"
  },
  {
    "project": "JacksonXml",
    "bug_id": "5",
    "file": "com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java",
    "snippet": "    /**\n     * @since 2.8.9\n     */\n    protected XmlSerializerProvider(XmlSerializerProvider src) {\n        super(src);\n        // 21-May-2018, tatu: As per [dataformat-xml#282], should NOT really copy\n        //    root name lookup as that may link back to diff version, configuration\n        _rootNameLookup = new XmlRootNameLookup();\n    }\n\n    /*\n    /**********************************************************************\n    /* Overridden methods\n",
    "label": "clean",
    "id": "4891a38e-4c2f-40f0-b2d7-e46d5d82693a"
  }
]